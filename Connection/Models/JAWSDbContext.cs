using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Connection.Settings;

#nullable disable

namespace Connection.Models
{
    public partial class JAWSDbContext : DbContext
    {
        private ConnectionString connectionStrings;
        public JAWSDbContext()
        {
            this.connectionStrings = new ConnectionString();
        }

        public JAWSDbContext(DbContextOptions<JAWSDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AdjustmentPackaging> AdjustmentPackagings { get; set; }
        public virtual DbSet<AdjustmentPackagingProduct> AdjustmentPackagingProducts { get; set; }
        public virtual DbSet<AdjustmentSouvenir> AdjustmentSouvenirs { get; set; }
        public virtual DbSet<AdjustmentSouvenirProduct> AdjustmentSouvenirProducts { get; set; }
        public virtual DbSet<ASPDJ> ASPDJs { get; set; }
        public virtual DbSet<CetakanPriceLog> CetakanPricingLogs { get; set; }
        public virtual DbSet<PackagingPriceLog> PackagingPricingLogs { get; set; }
        public virtual DbSet<SouvenirPriceLog> SouvenirPricingLogs { get; set; }
        public virtual DbSet<ASPDJLog> ASPDJLogs { get; set; }
        public virtual DbSet<ASPGJ> ASPGJs { get; set; }
        public virtual DbSet<ASPGJLog> ASPGJLogs { get; set; }
        public virtual DbSet<ASPLD> ASPLDs { get; set; }
        public virtual DbSet<ASPLDLog> ASPLDLogs { get; set; }
        public virtual DbSet<ASPPG> ASPPGs { get; set; }
        public virtual DbSet<ASPPGLog> ASPPGLogs { get; set; }
        public virtual DbSet<BankIssuer> BankIssuers { get; set; }
        public virtual DbSet<BudgetStock> BudgetStocks { get; set; }
        public virtual DbSet<BundleItem> BundleItems { get; set; }
        public virtual DbSet<BundleItemMaster> BundleItemMasters { get; set; }
        public virtual DbSet<BundleItemPasangan> BundleItemPasangans { get; set; }
        public virtual DbSet<BungaBank> BungaBanks { get; set; }
        public virtual DbSet<BuybackCalculator> BuybackCalculators { get; set; }
        public virtual DbSet<CalculatorProductDJ> CalculatorProductDJs { get; set; }
        public virtual DbSet<CalculatorProductDJ_CharProduct> CalculatorProductDJCharProducts { get; set; }
        public virtual DbSet<CalculatorProductDJ_Finishing> CalculatorProductDJFinishings { get; set; }
        public virtual DbSet<CalculatorProductDJ_PricingBiaya> CalculatorProductDJPricingBiayas { get; set; }
        public virtual DbSet<CalculatorProductDJ_PricingMU> CalculatorProductDJPricingMUs { get; set; }
        public virtual DbSet<CalculatorProductDJPricingProduct> CalculatorProductDJPricingProducts { get; set; }
        public virtual DbSet<CalculatorProductDJ_Stone1A> CalculatorProductDJStone1As { get; set; }
        public virtual DbSet<CalculatorProductDJ_Stone1B> CalculatorProductDJStone1Bs { get; set; }
        public virtual DbSet<CalculatorProductDJ_Stone2> CalculatorProductDJStone2s { get; set; }
        public virtual DbSet<CalculatorProductDJ_Stone3> CalculatorProductDJStone3s { get; set; }
        public virtual DbSet<CalculatorProductDJ_Stone4> CalculatorProductDJStone4s { get; set; }
        public virtual DbSet<CalculatorProductDJ_Stone5> CalculatorProductDJStone5s { get; set; }
        public virtual DbSet<CardType> CardTypes { get; set; }
        public virtual DbSet<CharDesignCategory> CharDesignCategories { get; set; }
        public virtual DbSet<CharDesignConcept> CharDesignConcepts { get; set; }
        public virtual DbSet<CharDesignProcess> CharDesignProcesses { get; set; }
        public virtual DbSet<CharFrameColor> CharFrameColors { get; set; }
        public virtual DbSet<CharFrameFinishing> CharFrameFinishings { get; set; }
        public virtual DbSet<CharFrameMaterial> CharFrameMaterials { get; set; }
        public virtual DbSet<CharGoldLevel> CharGoldLevels { get; set; }
        public virtual DbSet<CharGoldModel> CharGoldModels { get; set; }
        public virtual DbSet<CharProcessCon> CharProcessCons { get; set; }
        public virtual DbSet<CharProcessFinishing> CharProcessFinishings { get; set; }
        public virtual DbSet<CharProcessRepair> CharProcessRepairs { get; set; }
        public virtual DbSet<CharProductCategory> CharProductCategories { get; set; }
        public virtual DbSet<CharProductCategory2> CharProductCategory2s { get; set; }
        public virtual DbSet<CharProductItem> CharProductItems { get; set; }
        public virtual DbSet<CharProductLevel> CharProductLevels { get; set; }
        public virtual DbSet<CharProductSegmen> CharProductSegmen { get; set; }
        public virtual DbSet<CharStoneDist> CharStoneDists { get; set; }
        public virtual DbSet<CharStoneFluor> CharStoneFluors { get; set; }
        public virtual DbSet<CharStoneSetting> CharStoneSettings { get; set; }
        public virtual DbSet<CharTargetAge> CharTargetAges { get; set; }
        public virtual DbSet<CharTargetGender> CharTargetGenders { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyBrand> CompanyBrands { get; set; }
        public virtual DbSet<CompanyDiv> CompanyDivs { get; set; }
        public virtual DbSet<CrossBrand_StockIncomingDJ> CrossBrandStockIncomingDJs { get; set; }
        public virtual DbSet<CrossBrand_StockIncomingDJ_Product> CrossBrandStockIncomingDJProducts { get; set; }
        public virtual DbSet<CrossBrand_StockIncomingPG> CrossBrandStockIncomingPgs { get; set; }
        public virtual DbSet<CrossBrand_StockIncomingPG_Product> CrossBrandStockIncomingPgProducts { get; set; }
        public virtual DbSet<CrossBrand_StockIncomingLD> CrossBrandStockIncomingLDs { get; set; }
        public virtual DbSet<CrossBrand_StockIncomingLD_Product> CrossBrandStockIncomingLDProducts { get; set; }
        public virtual DbSet<CrossBrand_StockOutgoingDJ> CrossBrandStockOutgoingDJs { get; set; }
        public virtual DbSet<CrossBrand_StockOutgoingDJ_Product> CrossBrandStockOutgoingDJProducts { get; set; }
        public virtual DbSet<CrossBrand_StockOutgoingPG> CrossBrandStockOutgoingPgs { get; set; }
        public virtual DbSet<CrossBrand_StockOutgoingPG_Product> CrossBrandStockOutgoingPgProducts { get; set; }
        public virtual DbSet<CrossBrand_StockOutgoingLD> CrossBrandStockOutgoingLDs { get; set; }
        public virtual DbSet<CrossBrand_StockOutgoingLD_Product> CrossBrandStockOutgoingLDProducts { get; set; }
        public virtual DbSet<DataAccounting> DataAccountings { get; set; }
        public virtual DbSet<DataAdminSale> DataAdminSales { get; set; }
        public virtual DbSet<DataAreaManager> DataAreaManagers { get; set; }
        public virtual DbSet<DataAreaManagerLokasi> DataAreaManagerLokasis { get; set; }
        public virtual DbSet<DataCustomer> DataCustomers { get; set; }
        public virtual DbSet<DataCustomerSalesOrder> DataCustomerSalesOrders { get; set; }
        public virtual DbSet<DataHuman> DataHumans { get; set; }
        public virtual DbSet<DataHumanGroup> DataHumanGroups { get; set; }
        public virtual DbSet<DataProcurement> DataProcurements { get; set; }
        public virtual DbSet<DataSales> DataSales { get; set; }
        public virtual DbSet<DataSalesGroup> DataSalesGroups { get; set; }
        public virtual DbSet<DataSK> DataSks { get; set; }
        public virtual DbSet<DataSKGroup> DataSkgroups { get; set; }
        public virtual DbSet<DataSupplier> DataSuppliers { get; set; }
        public virtual DbSet<DataSupplierGroup> DataSupplierGroups { get; set; }
        public virtual DbSet<DataVoucher> DataVouchers { get; set; }
        public virtual DbSet<DocQCDJ> DocQcdjs { get; set; }
        public virtual DbSet<DocQCDJ_Stone1A> DocQcdjStone1As { get; set; }
        public virtual DbSet<DocQCDJ_Stone1B> DocQcdjStone1Bs { get; set; }
        public virtual DbSet<DocQCDJ_Stone2> DocQcdjStone2s { get; set; }
        public virtual DbSet<DocQCDJ_Stone3> DocQcdjStone3s { get; set; }
        public virtual DbSet<DocQCDJ_Stone4> DocQcdjStone4s { get; set; }
        public virtual DbSet<DocQCDJ_Stone5> DocQcdjStone5s { get; set; }
        public virtual DbSet<DocQCDJCustomer> DocQcdjcustomers { get; set; }
        public virtual DbSet<DocQCDJCustomer_Stone1A> DocQcdjcustomerStone1As { get; set; }
        public virtual DbSet<DocQCDJCustomer_Stone1B> DocQcdjcustomerStone1Bs { get; set; }
        public virtual DbSet<DocQCDJCustomer_Stone2> DocQcdjcustomerStone2s { get; set; }
        public virtual DbSet<DocQCDJCustomer_Stone3> DocQcdjcustomerStone3s { get; set; }
        public virtual DbSet<DocQCDJCustomer_Stone4> DocQcdjcustomerStone4s { get; set; }
        public virtual DbSet<DocQCDJCustomer_Stone5> DocQcdjcustomerStone5s { get; set; }
        public virtual DbSet<DocQCGJ> DocQcgjs { get; set; }
        public virtual DbSet<DocQCLD> DocQclds { get; set; }
        public virtual DbSet<DocQCPG> DocQcpgs { get; set; }
        public virtual DbSet<DocRepair> DocRepairs { get; set; }
        public virtual DbSet<DocRepair_CharProduct> DocRepairCharProducts { get; set; }
        public virtual DbSet<DocRepairLog_Stone1A> DocRepairLogStone1As { get; set; }
        public virtual DbSet<DocRepairLog_Stone1B> DocRepairLogStone1Bs { get; set; }
        public virtual DbSet<DocRepairLog_Stone2> DocRepairLogStone2s { get; set; }
        public virtual DbSet<DocRepairLog_Stone3> DocRepairLogStone3s { get; set; }
        public virtual DbSet<DocRepairLog_Stone4> DocRepairLogStone4s { get; set; }
        public virtual DbSet<DocRepairLog_Stone5> DocRepairLogStone5s { get; set; }
        public virtual DbSet<DocRepair_Repair> DocRepairRepairs { get; set; }
        public virtual DbSet<DocRepairResult> DocRepairResults { get; set; }
        public virtual DbSet<DocRepairResult_CharProduct> DocRepairResultCharProducts { get; set; }
        public virtual DbSet<DocRepairResult_Repair> DocRepairResultRepairs { get; set; }
        public virtual DbSet<DocRepairResult_Stone1A> DocRepairResultStone1As { get; set; }
        public virtual DbSet<DocRepairResult_Stone1B> DocRepairResultStone1Bs { get; set; }
        public virtual DbSet<DocRepairResult_Stone2> DocRepairResultStone2s { get; set; }
        public virtual DbSet<DocRepairResult_Stone3> DocRepairResultStone3s { get; set; }
        public virtual DbSet<DocRepairResult_Stone4> DocRepairResultStone4s { get; set; }
        public virtual DbSet<DocRepairResult_Stone5> DocRepairResultStone5s { get; set; }
        public virtual DbSet<DocRepairResult_StoneRepair> DocRepairResultStoneRepairs { get; set; }
        public virtual DbSet<DocRepair_Stone1A> DocRepairStone1As { get; set; }
        public virtual DbSet<DocRepair_Stone1B> DocRepairStone1Bs { get; set; }
        public virtual DbSet<DocRepair_Stone2> DocRepairStone2s { get; set; }
        public virtual DbSet<DocRepair_Stone3> DocRepairStone3s { get; set; }
        public virtual DbSet<DocRepair_Stone4> DocRepairStone4s { get; set; }
        public virtual DbSet<DocRepair_Stone5> DocRepairStone5s { get; set; }
        public virtual DbSet<DocRepair_StoneRepair> DocRepairStoneRepairs { get; set; }
        public virtual DbSet<DocTitipan> DocTitipans { get; set; }
        public virtual DbSet<DocTitipan_Product> DocTitipanProducts { get; set; }
        public virtual DbSet<EDCList> Edclists { get; set; }
        public virtual DbSet<FCFEBRUARI> Fcfebruaris { get; set; }
        public virtual DbSet<FCMARET> Fcmarets { get; set; }
        public virtual DbSet<FontType> FontTypes { get; set; }
        public virtual DbSet<FormResellLd> FormResellLds { get; set; }
        public virtual DbSet<ImageDJPrototypeChange> ImageDjprototypeChanges { get; set; }
        public virtual DbSet<IT_ErrorLog> ItErrorLogs { get; set; }
        public virtual DbSet<IT_SMS_Blast> ItSmsBlasts { get; set; }
        public virtual DbSet<IT_SP_Audit> ItSpAudits { get; set; }
        public virtual DbSet<JenisKartuKredit> JenisKartuKredits { get; set; }
        public virtual DbSet<KodeKaretCleansing> KodeKaretCleansings { get; set; }
        public virtual DbSet<KodeKaretCleansing_Detail> KodeKaretCleansingDetails { get; set; }
        public virtual DbSet<KodeKaret_Detail> KodeKaretDetails { get; set; }
        public virtual DbSet<KodeKaretDJ> KodeKaretDjs { get; set; }
        public virtual DbSet<KodeKaretDJ_CharDesign> KodeKaretDjCharDesigns { get; set; }
        public virtual DbSet<KodeKaretDJ_CharProduct> KodeKaretDjCharProducts { get; set; }
        public virtual DbSet<KodeKaretDJ_Finishing> KodeKaretDjFinishings { get; set; }
        public virtual DbSet<KodeKaretDJ_Stone1A> KodeKaretDjStone1As { get; set; }
        public virtual DbSet<KodeKaretDJ_Stone1B> KodeKaretDjStone1Bs { get; set; }
        public virtual DbSet<KodeKaretDJ_Stone2> KodeKaretDjStone2s { get; set; }
        public virtual DbSet<KodeKaretDJ_Stone3> KodeKaretDjStone3s { get; set; }
        public virtual DbSet<KodeKaretDJ_Stone4> KodeKaretDjStone4s { get; set; }
        public virtual DbSet<KodeKaretDJ_Stone5> KodeKaretDjStone5s { get; set; }
        public virtual DbSet<KodeKaretGJ> KodeKaretGjs { get; set; }
        public virtual DbSet<KodeKaretGJ_CharDesign> KodeKaretGjCharDesigns { get; set; }
        public virtual DbSet<KodeKaretGJ_CharProduct> KodeKaretGjCharProducts { get; set; }
        public virtual DbSet<KodeKaretGJ_Detail> KodeKaretGjDetails { get; set; }
        public virtual DbSet<KodeKaretGJ_Finishing> KodeKaretGjFinishings { get; set; }
        public virtual DbSet<LetterWR> LetterWrs { get; set; }
        public virtual DbSet<ListUploadEDC> ListUploadEdcs { get; set; }
        public virtual DbSet<LocExhibition> LocExhibitions { get; set; }
        public virtual DbSet<LocExhibition_AllBrand> LocExhibitionAllBrands { get; set; }
        public virtual DbSet<LocExhibitionGroup> LocExhibitionGroups { get; set; }
        public virtual DbSet<LocOutlet> LocOutlets { get; set; }
        public virtual DbSet<LocOutlet_AllBrand> LocOutletAllBrands { get; set; }
        public virtual DbSet<LocOutletGroup> LocOutletGroups { get; set; }
        public virtual DbSet<LocWarehouse> LocWarehouses { get; set; }
        public virtual DbSet<LocWarehouse_AllBrand> LocWarehouseAllBrands { get; set; }
        public virtual DbSet<LocWarehouseGroup> LocWarehouseGroups { get; set; }
        public virtual DbSet<Lokasi> Lokasis { get; set; }
        public virtual DbSet<MasterMeltingReason> MasterMeltingReasons { get; set; }
        public virtual DbSet<MasterStatusBarangSPK> MasterStatusBarangSpks { get; set; }
        public virtual DbSet<MDRRate> Mdrrates { get; set; }
        public virtual DbSet<MemberTiering> MemberTierings { get; set; }
        public virtual DbSet<MemberTieringLog> MemberTieringLogs { get; set; }
        public virtual DbSet<NoteRepair> NoteRepairs { get; set; }
        public virtual DbSet<NoteRepair_CharProduct> NoteRepairCharProducts { get; set; }
        public virtual DbSet<NoteRepair_Repair> NoteRepairRepairs { get; set; }
        public virtual DbSet<NoteRepair_Stone1A> NoteRepairStone1As { get; set; }
        public virtual DbSet<NoteRepair_Stone1B> NoteRepairStone1Bs { get; set; }
        public virtual DbSet<NoteRepair_Stone2> NoteRepairStone2s { get; set; }
        public virtual DbSet<NoteRepair_Stone3> NoteRepairStone3s { get; set; }
        public virtual DbSet<NoteRepair_Stone4> NoteRepairStone4s { get; set; }
        public virtual DbSet<NoteRepair_Stone5> NoteRepairStone5s { get; set; }
        public virtual DbSet<Packaging> Packagings { get; set; }
        public virtual DbSet<Cetakan> Cetakans { get; set; }
        public virtual DbSet<Parcel101> Parcel101s { get; set; }
        public virtual DbSet<Parcel102> Parcel102s { get; set; }
        public virtual DbSet<Parcel103> Parcel103s { get; set; }
        public virtual DbSet<Parcel104> Parcel104s { get; set; }
        public virtual DbSet<Parcel105> Parcel105s { get; set; }
        public virtual DbSet<Parcel106> Parcel106s { get; set; }
        public virtual DbSet<Parcel107> Parcel107s { get; set; }
        public virtual DbSet<Parcel201> Parcel201s { get; set; }
        public virtual DbSet<Parcel202> Parcel202s { get; set; }
        public virtual DbSet<Parcel203> Parcel203s { get; set; }
        public virtual DbSet<Parcel204> Parcel204s { get; set; }
        public virtual DbSet<Parcel205> Parcel205s { get; set; }
        public virtual DbSet<Parcel206> Parcel206s { get; set; }
        public virtual DbSet<Parcel207> Parcel207s { get; set; }
        public virtual DbSet<Parcel301> Parcel301s { get; set; }
        public virtual DbSet<Parcel302> Parcel302s { get; set; }
        public virtual DbSet<Parcel303> Parcel303s { get; set; }
        public virtual DbSet<Parcel304> Parcel304s { get; set; }
        public virtual DbSet<Parcel305> Parcel305s { get; set; }
        public virtual DbSet<Parcel306> Parcel306s { get; set; }
        public virtual DbSet<Parcel307> Parcel307s { get; set; }
        public virtual DbSet<Parcel308> Parcel308s { get; set; }
        public virtual DbSet<Parcel309> Parcel309s { get; set; }
        public virtual DbSet<Parcel310> Parcel310s { get; set; }
        public virtual DbSet<Parcel311> Parcel311s { get; set; }
        public virtual DbSet<Parcel312> Parcel312s { get; set; }
        public virtual DbSet<Parcel401> Parcel401s { get; set; }
        public virtual DbSet<Parcel402> Parcel402s { get; set; }
        public virtual DbSet<Parcel403> Parcel403s { get; set; }
        public virtual DbSet<Parcel501> Parcel501s { get; set; }
        public virtual DbSet<Parcel502> Parcel502s { get; set; }
        public virtual DbSet<Parcel503> Parcel503s { get; set; }
        public virtual DbSet<Parcel504> Parcel504s { get; set; }
        public virtual DbSet<Parcel505> Parcel505s { get; set; }
        public virtual DbSet<Parcel506> Parcel506s { get; set; }
        public virtual DbSet<Parcel507> Parcel507s { get; set; }
        public virtual DbSet<Parcel508> Parcel508s { get; set; }
        public virtual DbSet<Parcel509> Parcel509s { get; set; }
        public virtual DbSet<ParcelRepair01> ParcelRepair01s { get; set; }
        public virtual DbSet<ParcelRepair02> ParcelRepair02s { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<PLUFrankValentine> PlufrankValentines { get; set; }
        public virtual DbSet<PLUPromoValentineDay> PlupromoValentineDays { get; set; }
        public virtual DbSet<PointRedeem> PointRedeems { get; set; }
        public virtual DbSet<PointRewardDJ> PointRewardDjs { get; set; }
        public virtual DbSet<PointRewardGJ> PointRewardGjs { get; set; }
        public virtual DbSet<PointRewardLogDJ> PointRewardLogDjs { get; set; }
        public virtual DbSet<PointRewardLogGJ> PointRewardLogGjs { get; set; }
        public virtual DbSet<PricingLogFS> PricingLogFs { get; set; }
        public virtual DbSet<PricingLogFB> PricingLogFbs { get; set; }
        public virtual DbSet<PricingLogFF> PricingLogFfs { get; set; }
        public virtual DbSet<PricingLogFM> PricingLogFms { get; set; }
        public virtual DbSet<PricingLogMU> PricingLogMus { get; set; }
        public virtual DbSet<PricingLogRepair> PricingLogRepairs { get; set; }
        public virtual DbSet<PricingLogResellMU> PricingLogResellMus { get; set; }
        public virtual DbSet<PricingLogSS> PricingLogSses { get; set; }
        public virtual DbSet<PricingLogTG> PricingLogTgs { get; set; }
        public virtual DbSet<PricingLogUS> PricingLogUs { get; set; }
        public virtual DbSet<PricingTableFS> PricingTableFs { get; set; }
        public virtual DbSet<PricingTableFB> PricingTableFbs { get; set; }
        public virtual DbSet<PricingTableFF> PricingTableFfs { get; set; }
        public virtual DbSet<PricingTableFM> PricingTableFms { get; set; }
        public virtual DbSet<PricingTableMU> PricingTableMus { get; set; }
        public virtual DbSet<PricingTableRepair> PricingTableRepairs { get; set; }
        public virtual DbSet<PricingTableResellMU> PricingTableResellMus { get; set; }
        public virtual DbSet<PricingTableRO> PricingTableRos { get; set; }
        public virtual DbSet<PricingTableSS> PricingTableSses { get; set; }
        public virtual DbSet<PricingTableTG> PricingTableTgs { get; set; }
        public virtual DbSet<PricingTableUS> PricingTableUs { get; set; }
        public virtual DbSet<PrintCertificate> PrintCertificates { get; set; }
        public virtual DbSet<PrintCertificate_Detail> PrintCertificateDetails { get; set; }
        public virtual DbSet<ProductDesign> ProductDesigns { get; set; }
        public virtual DbSet<ProductDesign_CharDesign> ProductDesignCharDesigns { get; set; }
        public virtual DbSet<ProductDesign_CharProduct> ProductDesignCharProducts { get; set; }
        public virtual DbSet<ProductDesign_Finishing> ProductDesignFinishings { get; set; }
        public virtual DbSet<ProductDesignGJ> ProductDesignGjs { get; set; }
        public virtual DbSet<ProductDesignGJ_CharDesign> ProductDesignGjCharDesigns { get; set; }
        public virtual DbSet<ProductDesignGJ_CharProduct> ProductDesignGjCharProducts { get; set; }
        public virtual DbSet<ProductDesignGJ_Finishing> ProductDesignGjFinishings { get; set; }
        public virtual DbSet<ProductDesignGJ_PricingBiaya> ProductDesignGjPricingBiayas { get; set; }
        public virtual DbSet<ProductDesignGJ_PricingMU> ProductDesignGjPricingMus { get; set; }
        public virtual DbSet<ProductDesignGJ_PricingProduct> ProductDesignGjPricingProducts { get; set; }
        public virtual DbSet<ProductDesignGJ_PricingSegmen> ProductDesignGjPricingSegmen { get; set; }
        public virtual DbSet<ProductDesign_PricingBiaya> ProductDesignPricingBiayas { get; set; }
        public virtual DbSet<ProductDesign_PricingMU> ProductDesignPricingMus { get; set; }
        public virtual DbSet<ProductDesign_PricingProduct> ProductDesignPricingProducts { get; set; }
        public virtual DbSet<ProductDesign_PricingSegmen> ProductDesignPricingSegmen { get; set; }
        public virtual DbSet<ProductDesign_Stone1A> ProductDesignStone1As { get; set; }
        public virtual DbSet<ProductDesign_Stone1B> ProductDesignStone1Bs { get; set; }
        public virtual DbSet<ProductDesign_Stone2> ProductDesignStone2s { get; set; }
        public virtual DbSet<ProductDesign_Stone3> ProductDesignStone3s { get; set; }
        public virtual DbSet<ProductDesign_Stone4> ProductDesignStone4s { get; set; }
        public virtual DbSet<ProductDesign_Stone5> ProductDesignStone5s { get; set; }
        public virtual DbSet<ProductOrder> ProductOrders { get; set; }
        public virtual DbSet<ProductOrder_CharDesign> ProductOrderCharDesigns { get; set; }
        public virtual DbSet<ProductOrder_CharProduct> ProductOrderCharProducts { get; set; }
        public virtual DbSet<ProductOrder_Costing> ProductOrderCostings { get; set; }
        public virtual DbSet<ProductOrder_CostingProduct> ProductOrderCostingProducts { get; set; }
        public virtual DbSet<ProductOrder_Finishing> ProductOrderFinishings { get; set; }
        public virtual DbSet<ProductOrderGJ> ProductOrderGjs { get; set; }
        public virtual DbSet<ProductOrderGJ_CharDesign> ProductOrderGjCharDesigns { get; set; }
        public virtual DbSet<ProductOrderGJ_CharProduct> ProductOrderGjCharProducts { get; set; }
        public virtual DbSet<ProductOrderGJ_Finishing> ProductOrderGjFinishings { get; set; }
        public virtual DbSet<ProductOrder_PricingBiaya> ProductOrderPricingBiayas { get; set; }
        public virtual DbSet<ProductOrder_PricingMU> ProductOrderPricingMus { get; set; }
        public virtual DbSet<ProductOrder_PricingProduct> ProductOrderPricingProducts { get; set; }
        public virtual DbSet<ProductOrder_PricingSegmen> ProductOrderPricingSegmen { get; set; }
        public virtual DbSet<ProductOrder_Stone1A> ProductOrderStone1As { get; set; }
        public virtual DbSet<ProductOrder_Stone1B> ProductOrderStone1Bs { get; set; }
        public virtual DbSet<ProductOrder_Stone2> ProductOrderStone2s { get; set; }
        public virtual DbSet<ProductOrder_Stone3> ProductOrderStone3s { get; set; }
        public virtual DbSet<ProductOrder_Stone4> ProductOrderStone4s { get; set; }
        public virtual DbSet<ProductOrder_Stone5> ProductOrderStone5s { get; set; }
        public virtual DbSet<ProductStoneRequest> ProductStoneRequests { get; set; }
        public virtual DbSet<ProductStoneRequest_Detail> ProductStoneRequestDetails { get; set; }
        public virtual DbSet<ProgramCicilan> ProgramCicilans { get; set; }
        public virtual DbSet<Promo> Promos { get; set; }
        public virtual DbSet<PromoDJ> PromoDjs { get; set; }
        public virtual DbSet<PromoDJ_Detail> PromoDjDetails { get; set; }
        public virtual DbSet<PromoGJ> PromoGjs { get; set; }
        public virtual DbSet<PromoGJ_Detail> PromoGjDetails { get; set; }
        public virtual DbSet<PromoPG> PromoPgs { get; set; }
        public virtual DbSet<PromoPG_Detail> PromoPgDetails { get; set; }
        public virtual DbSet<Resell> Resells { get; set; }
        public virtual DbSet<ResellAPILEPLog> ResellApilepglogs { get; set; }
        public virtual DbSet<ResellDJ> ResellDjs { get; set; }
        public virtual DbSet<ResellDJ_BackUp> ResellDjbackUps { get; set; }
        public virtual DbSet<ResellGJ> ResellGjs { get; set; }
        public virtual DbSet<ResellLD> ResellLds { get; set; }
        public virtual DbSet<ResellPG> ResellPgs { get; set; }
        public virtual DbSet<ResellReceipt> ResellReceipts { get; set; }
        public virtual DbSet<RevalItemDJ> RevalItemDjs { get; set; }
        public virtual DbSet<RevalItemGJ> RevalItemGjs { get; set; }
        public virtual DbSet<RevalLogProductDJ> RevalLogProductDjs { get; set; }
        public virtual DbSet<RevalLogProductDJ_CharProduct> RevalLogProductDjCharProducts { get; set; }
        public virtual DbSet<RevalLogProductDJ_Costing> RevalLogProductDjCostings { get; set; }
        public virtual DbSet<RevalLogProductDJ_CostingProduct> RevalLogProductDjCostingProducts { get; set; }
        public virtual DbSet<RevalLogProductDJ_Finishing> RevalLogProductDjFinishings { get; set; }
        public virtual DbSet<RevalLogProductDJ_PricingBiaya> RevalLogProductDjPricingBiayas { get; set; }
        public virtual DbSet<RevalLogProductDJ_PricingMU> RevalLogProductDjPricingMus { get; set; }
        public virtual DbSet<RevalLogProductDJ_PricingProduct> RevalLogProductDjPricingProducts { get; set; }
        public virtual DbSet<RevalLogProductDJ_PricingSegmen> RevalLogProductDjPricingSegmen { get; set; }
        public virtual DbSet<RevalLogProductDJ_Stone1A> RevalLogProductDjStone1As { get; set; }
        public virtual DbSet<RevalLogProductDJ_Stone1B> RevalLogProductDjStone1Bs { get; set; }
        public virtual DbSet<RevalLogProductDJ_Stone2> RevalLogProductDjStone2s { get; set; }
        public virtual DbSet<RevalLogProductDJ_Stone3> RevalLogProductDjStone3s { get; set; }
        public virtual DbSet<RevalLogProductDJ_Stone4> RevalLogProductDjStone4s { get; set; }
        public virtual DbSet<RevalLogProductDJ_Stone5> RevalLogProductDjStone5s { get; set; }
        public virtual DbSet<RevalLogProductGJ> RevalLogProductGjs { get; set; }
        public virtual DbSet<RevalLogProductGJ_CharProduct> RevalLogProductGjCharProducts { get; set; }
        public virtual DbSet<RevalLogProductGJ_Costing> RevalLogProductGjCostings { get; set; }
        public virtual DbSet<RevalLogProductGJ_CostingProduct> RevalLogProductGjCostingProducts { get; set; }
        public virtual DbSet<RevalLogProductGJ_Finishing> RevalLogProductGjFinishings { get; set; }
        public virtual DbSet<RevalLogProductGJ_PricingBiaya> RevalLogProductGjPricingBiayas { get; set; }
        public virtual DbSet<RevalLogProductGJ_PricingMU> RevalLogProductGjPricingMus { get; set; }
        public virtual DbSet<RevalLogProductGJ_PricingProduct> RevalLogProductGjPricingProducts { get; set; }
        public virtual DbSet<RevalLogProductGJ_PricingSegmen> RevalLogProductGjPricingSegmen { get; set; }
        public virtual DbSet<RevalLogReceiveDJ_CharDesign> RevalLogReceiveDjCharDesigns { get; set; }
        public virtual DbSet<RevalProductDJ> RevalProductDjs { get; set; }
        public virtual DbSet<RevalProductDJ_CharDesign> RevalProductDjCharDesigns { get; set; }
        public virtual DbSet<RevalProductDJ_CharProduct> RevalProductDjCharProducts { get; set; }
        public virtual DbSet<RevalProductDJ_Costing> RevalProductDjCostings { get; set; }
        public virtual DbSet<RevalProductDJ_CostingProduct> RevalProductDjCostingProducts { get; set; }
        public virtual DbSet<RevalProductDJ_Finishing> RevalProductDjFinishings { get; set; }
        public virtual DbSet<RevalProductDJ_PricingBiaya> RevalProductDjPricingBiayas { get; set; }
        public virtual DbSet<RevalProductDJ_PricingMU> RevalProductDjPricingMus { get; set; }
        public virtual DbSet<RevalProductDJ_PricingProduct> RevalProductDjPricingProducts { get; set; }
        public virtual DbSet<RevalProductDJ_PricingSegmen> RevalProductDjPricingSegmen { get; set; }
        public virtual DbSet<RevalProductDJ_Stone1A> RevalProductDjStone1As { get; set; }
        public virtual DbSet<RevalProductDJ_Stone1B> RevalProductDjStone1Bs { get; set; }
        public virtual DbSet<RevalProductDJ_Stone2> RevalProductDjStone2s { get; set; }
        public virtual DbSet<RevalProductDJ_Stone3> RevalProductDjStone3s { get; set; }
        public virtual DbSet<RevalProductDJ_Stone4> RevalProductDjStone4s { get; set; }
        public virtual DbSet<RevalProductDJ_Stone5> RevalProductDjStone5s { get; set; }
        public virtual DbSet<RevalProductGJ> RevalProductGjs { get; set; }
        public virtual DbSet<RevalProductGJ_CharDesign> RevalProductGjCharDesigns { get; set; }
        public virtual DbSet<RevalProductGJ_CharProduct> RevalProductGjCharProducts { get; set; }
        public virtual DbSet<RevalProductGJ_Costing> RevalProductGjCostings { get; set; }
        public virtual DbSet<RevalProductGJ_CostingProduct> RevalProductGjCostingProducts { get; set; }
        public virtual DbSet<RevalProductGJ_Finishing> RevalProductGjFinishings { get; set; }
        public virtual DbSet<RevalProductGJ_PricingBiaya> RevalProductGjPricingBiayas { get; set; }
        public virtual DbSet<RevalProductGJ_PricingMU> RevalProductGjPricingMus { get; set; }
        public virtual DbSet<RevalProductGJ_PricingProduct> RevalProductGjPricingProducts { get; set; }
        public virtual DbSet<RevalProductGJ_PricingSegmen> RevalProductGjPricingSegmen { get; set; }
        public virtual DbSet<RevalReceiveDJ_CharDesign> RevalReceiveDjCharDesigns { get; set; }
        public virtual DbSet<SaldoStockDJ> SaldoStockDjs { get; set; }
        public virtual DbSet<SaldoStockGJ> SaldoStockGjs { get; set; }
        public virtual DbSet<SaldoStockLD> SaldoStockLds { get; set; }
        public virtual DbSet<SaldoStockPG> SaldoStockPgs { get; set; }
        public virtual DbSet<SalesFee> SalesFees { get; set; }
        public virtual DbSet<SalesOrder> SalesOrders { get; set; }
        public virtual DbSet<SalesOrderDJ> SalesOrderDjs { get; set; }
        public virtual DbSet<SalesOrderGJ> SalesOrderGjs { get; set; }
        public virtual DbSet<SalesOrderLD> SalesOrderLds { get; set; }
        public virtual DbSet<SalesOrderCetakan> SalesOrderCetakans { get; set; }
        public virtual DbSet<SalesOrderPackaging> SalesOrderPackagings { get; set; }
        public virtual DbSet<SalesOrderPG> SalesOrderPgs { get; set; }
        public virtual DbSet<SalesOrderPGLEI> SalesOrderPgleis { get; set; }
        public virtual DbSet<SalesOrderRepair> SalesOrderRepairs { get; set; }
        public virtual DbSet<SalesOrderSouvenir> SalesOrderSouvenirs { get; set; }
        public virtual DbSet<SalesPromo> SalesPromos { get; set; }
        public virtual DbSet<SalesReceipt> SalesReceipts { get; set; }
        public virtual DbSet<SalesReceiptDetail> SalesReceiptDetails { get; set; }
        public virtual DbSet<SalesReceiptDetailDebitLakuEmas> SalesReceiptDetailDebitLakuEmas { get; set; }
        public virtual DbSet<SalesReceiptDetailExtension> SalesReceiptDetailExtensions { get; set; }
        public virtual DbSet<SalesReceiptDetailLakuEmas> SalesReceiptDetailLakuEmas { get; set; }
        public virtual DbSet<SalesReceiptDPPO> SalesReceiptDppos { get; set; }
        public virtual DbSet<SalesReceiptDPPODetail> SalesReceiptDPPODetails { get; set; }
        public virtual DbSet<SalesReceiptDPPODetailExtension> SalesReceiptDppodetailExtensions { get; set; }
        public virtual DbSet<SalesVoucher> SalesVouchers { get; set; }
        public virtual DbSet<SettingsSegmen> SettingsSegmen { get; set; }
        public virtual DbSet<SettingsStoneDist> SettingsStoneDists { get; set; }
        public virtual DbSet<Souvenir> Souvenirs { get; set; }
        public virtual DbSet<StockActualDJ> StockActualDjs { get; set; }
        public virtual DbSet<StockActualDJRepair> StockActualDjrepairs { get; set; }
        public virtual DbSet<StockActualGJ> StockActualGjs { get; set; }
        public virtual DbSet<StockActualLD> StockActualLds { get; set; }
        public virtual DbSet<StockActualLD_Stone1B> StockActualLdStone1Bs { get; set; }
        public virtual DbSet<StockActualMounting> StockActualMountings { get; set; }
        public virtual DbSet<StockActualCetakan> StockActualCetakans { get; set; }
        public virtual DbSet<StockActualPackaging> StockActualPackagings { get; set; }
        public virtual DbSet<StockActualPG> StockActualPgs { get; set; }
        public virtual DbSet<StockActualSouvenir> StockActualSouvenirs { get; set; }
        public virtual DbSet<StockAll> StockAlls { get; set; }
        public virtual DbSet<StockAudit> StockAudits { get; set; }
        public virtual DbSet<StockAuditDetail> StockAuditDetails { get; set; }
        public virtual DbSet<StockAuditDJ> StockAuditDjs { get; set; }
        public virtual DbSet<StockAuditDJDetail> StockAuditDjdetails { get; set; }
        public virtual DbSet<StockAuditGJ> StockAuditGjs { get; set; }
        public virtual DbSet<StockAuditGJDetail> StockAuditGjdetails { get; set; }
        public virtual DbSet<StockAuditItemDJ> StockAuditItemDjs { get; set; }
        public virtual DbSet<StockAuditItemGJ> StockAuditItemGjs { get; set; }
        public virtual DbSet<StockAuditItemLD> StockAuditItemLds { get; set; }
        public virtual DbSet<StockAuditItemPG> StockAuditItemPgs { get; set; }
        public virtual DbSet<StockAuditLD> StockAuditLds { get; set; }
        public virtual DbSet<StockAuditLDDetail> StockAuditLddetails { get; set; }
        public virtual DbSet<StockAuditPG> StockAuditPgs { get; set; }
        public virtual DbSet<StockAuditPGDetail> StockAuditPgdetails { get; set; }
        public virtual DbSet<StockAwalDJ> StockAwalDjs { get; set; }
        public virtual DbSet<StockAwalGJ> StockAwalGjs { get; set; }
        public virtual DbSet<StockAwalLD> StockAwalLds { get; set; }
        public virtual DbSet<StockAwalPackaging> StockAwalPackagings { get; set; }
        public virtual DbSet<StockAwalCetakan> StockAwalCetakans { get; set; }
        public virtual DbSet<StockIncomingCetakan> StockIncomingCetakans { get; set; }
        public virtual DbSet<StockIncomingCetakan_Product> StockIncomingCetakanProducts { get; set; }
        public virtual DbSet<StockOutgoingCetakan> StockOutgoingCetakans { get; set; }
        public virtual DbSet<StockOutgoingCetakan_Product> StockOutgoingCetakanProducts { get; set; }
        public virtual DbSet<StockReceiveCetakan> StockReceiveCetakans { get; set; }
        public virtual DbSet<StockReceiveCetakan_Product> StockReceiveCetakanProducts { get; set; }
        public virtual DbSet<StockAwalPG> StockAwalPgs { get; set; }
        public virtual DbSet<StockAwalSouvenir> StockAwalSouvenirs { get; set; }
        public virtual DbSet<StockBasic> StockBasics { get; set; }
        public virtual DbSet<StockCutoff> StockCutoffs { get; set; }
        public virtual DbSet<StockCutoffIncoming> StockCutoffIncomings { get; set; }
        public virtual DbSet<StockCutoffInvalid> StockCutoffInvalids { get; set; }
        public virtual DbSet<StockCutoffOutgoing> StockCutoffOutgoings { get; set; }
        public virtual DbSet<StockCutoffReceive> StockCutoffReceives { get; set; }
        public virtual DbSet<StockCutoffResell> StockCutoffResells { get; set; }
        public virtual DbSet<StockCutoffRetire> StockCutoffRetires { get; set; }
        public virtual DbSet<StockCutoffReturn> StockCutoffReturns { get; set; }
        public virtual DbSet<StockCutoffSalesOrder> StockCutoffSalesOrders { get; set; }
        public virtual DbSet<StockCutoffStockAkhir> StockCutoffStockAkhirs { get; set; }
        public virtual DbSet<StockCutoffStockAwal> StockCutoffStockAwals { get; set; }
        public virtual DbSet<StockCutoffTradeIn> StockCutoffTradeIns { get; set; }
        public virtual DbSet<StockIncomingDJ> StockIncomingDjs { get; set; }
        public virtual DbSet<StockIncomingDJ_Product> StockIncomingDjProducts { get; set; }
        public virtual DbSet<StockIncomingGJ> StockIncomingGjs { get; set; }
        public virtual DbSet<StockIncomingGJ_Product> StockIncomingGjProducts { get; set; }
        public virtual DbSet<StockIncomingLD> StockIncomingLds { get; set; }
        public virtual DbSet<StockIncomingLD_Product> StockIncomingLdProducts { get; set; }
        public virtual DbSet<StockIncomingPackaging> StockIncomingPackagings { get; set; }
        public virtual DbSet<StockIncomingPackaging_Product> StockIncomingPackagingProducts { get; set; }
        public virtual DbSet<StockIncomingPG> StockIncomingPgs { get; set; }
        public virtual DbSet<StockIncomingPG_Product> StockIncomingPgProducts { get; set; }
        public virtual DbSet<StockIncomingSouvenir> StockIncomingSouvenirs { get; set; }
        public virtual DbSet<StockIncomingSouvenir_Product> StockIncomingSouvenirProducts { get; set; }
        public virtual DbSet<StockLedgerDJ> StockLedgerDjs { get; set; }
        public virtual DbSet<StockLedgerGJ> StockLedgerGjs { get; set; }
        public virtual DbSet<StockLedgerLd> StockLedgerLds { get; set; }
        public virtual DbSet<StockLedgerPg> StockLedgerPgs { get; set; }
        public virtual DbSet<StockOutgoingDJ> StockOutgoingDjs { get; set; }
        public virtual DbSet<StockOutgoingDJ_Product> StockOutgoingDjProducts { get; set; }
        public virtual DbSet<StockOutgoingGJ> StockOutgoingGjs { get; set; }
        public virtual DbSet<StockOutgoingGJ_Product> StockOutgoingGjProducts { get; set; }
        public virtual DbSet<StockOutgoingLD> StockOutgoingLds { get; set; }
        public virtual DbSet<StockOutgoingLD_Product> StockOutgoingLdProducts { get; set; }
        public virtual DbSet<StockOutgoingPackaging> StockOutgoingPackagings { get; set; }
        public virtual DbSet<StockOutgoingPackaging_Product> StockOutgoingPackagingProducts { get; set; }
        public virtual DbSet<StockOutgoingPG> StockOutgoingPgs { get; set; }
        public virtual DbSet<StockOutgoingPG_Product> StockOutgoingPgProducts { get; set; }
        public virtual DbSet<StockOutgoingSouvenir> StockOutgoingSouvenirs { get; set; }
        public virtual DbSet<StockOutgoingSouvenir_Product> StockOutgoingSouvenirProducts { get; set; }
        public virtual DbSet<StockProductDJ> StockProductDjs { get; set; }
        public virtual DbSet<StockProductDJ_CharDesign> StockProductDjCharDesigns { get; set; }
        public virtual DbSet<StockProductDJ_CharProduct> StockProductDjCharProducts { get; set; }
        public virtual DbSet<StockProductDJ_Costing> StockProductDjCostings { get; set; }
        public virtual DbSet<StockProductDJ_CostingProduct> StockProductDjCostingProducts { get; set; }
        public virtual DbSet<StockProductDJ_Finishing> StockProductDjFinishings { get; set; }
        public virtual DbSet<StockProductDJ_PricingBiaya> StockProductDjPricingBiayas { get; set; }
        public virtual DbSet<StockProductDJ_PricingMU> StockProductDjPricingMus { get; set; }
        public virtual DbSet<StockProductDJ_PricingProduct> StockProductDjPricingProducts { get; set; }
        public virtual DbSet<StockProductDJ_PricingSegmen> StockProductDjPricingSegmen { get; set; }
        public virtual DbSet<StockProductDJ_Stone1A> StockProductDjStone1As { get; set; }
        public virtual DbSet<StockProductDJ_Stone1B> StockProductDjStone1Bs { get; set; }
        public virtual DbSet<StockProductDJ_Stone2> StockProductDjStone2s { get; set; }
        public virtual DbSet<StockProductDJ_Stone3> StockProductDjStone3s { get; set; }
        public virtual DbSet<StockProductDJ_Stone4> StockProductDjStone4s { get; set; }
        public virtual DbSet<StockProductDJ_Stone5> StockProductDjStone5s { get; set; }
        public virtual DbSet<StockProductDJCustomer> StockProductDjcustomers { get; set; }
        public virtual DbSet<StockProductDJCustomer_CharProduct> StockProductDjcustomerCharProducts { get; set; }
        public virtual DbSet<StockProductDJCustomer_Stone1A> StockProductDjcustomerStone1As { get; set; }
        public virtual DbSet<StockProductDJCustomer_Stone1B> StockProductDjcustomerStone1Bs { get; set; }
        public virtual DbSet<StockProductDJCustomer_Stone2> StockProductDjcustomerStone2s { get; set; }
        public virtual DbSet<StockProductDJCustomer_Stone3> StockProductDjcustomerStone3s { get; set; }
        public virtual DbSet<StockProductDJCustomer_Stone4> StockProductDjcustomerStone4s { get; set; }
        public virtual DbSet<StockProductDJCustomer_Stone5> StockProductDjcustomerStone5s { get; set; }
        public virtual DbSet<StockProductDJLD> StockProductDjlds { get; set; }
        public virtual DbSet<StockProductGJ> StockProductGjs { get; set; }
        public virtual DbSet<StockProductGJ_CharDesign> StockProductGjCharDesigns { get; set; }
        public virtual DbSet<StockProductGJ_CharProduct> StockProductGjCharProducts { get; set; }
        public virtual DbSet<StockProductGJ_Costing> StockProductGjCostings { get; set; }
        public virtual DbSet<StockProductGJ_CostingProduct> StockProductGjCostingProducts { get; set; }
        public virtual DbSet<StockProductGJ_Finishing> StockProductGjFinishings { get; set; }
        public virtual DbSet<StockProductGJ_PricingBiaya> StockProductGjPricingBiayas { get; set; }
        public virtual DbSet<StockProductGJ_PricingMu> StockProductGjPricingMus { get; set; }
        public virtual DbSet<StockProductGJ_PricingProduct> StockProductGjPricingProducts { get; set; }
        public virtual DbSet<StockProductGJ_PricingSegmen> StockProductGjPricingSegmen { get; set; }
        public virtual DbSet<StockProductLD> StockProductLds { get; set; }
        public virtual DbSet<StockProductLD_CharDesign> StockProductLdCharDesigns { get; set; }
        public virtual DbSet<StockProductLD_Stone1B> StockProductLdStone1Bs { get; set; }
        public virtual DbSet<StockProductMounting> StockProductMountings { get; set; }
        public virtual DbSet<StockProductMounting_CharDesign> StockProductMountingCharDesigns { get; set; }
        public virtual DbSet<StockProductMounting_CharProduct> StockProductMountingCharProducts { get; set; }
        public virtual DbSet<StockProductMounting_Costing> StockProductMountingCostings { get; set; }
        public virtual DbSet<StockProductMounting_CostingProduct> StockProductMountingCostingProducts { get; set; }
        public virtual DbSet<StockProductMounting_Finishing> StockProductMountingFinishings { get; set; }
        public virtual DbSet<StockProductMounting_PricingBiaya> StockProductMountingPricingBiayas { get; set; }
        public virtual DbSet<StockProductMounting_PricingMU> StockProductMountingPricingMus { get; set; }
        public virtual DbSet<StockProductMounting_PricingProduct> StockProductMountingPricingProducts { get; set; }
        public virtual DbSet<StockProductMounting_PricingSegmen> StockProductMountingPricingSegmen { get; set; }
        public virtual DbSet<StockProductPG> StockProductPgs { get; set; }
        public virtual DbSet<StockProductWhitelist> StockProductWhitelists { get; set; }
        public virtual DbSet<StockReal> StockReals { get; set; }
        public virtual DbSet<StockReceiveDJ> StockReceiveDjs { get; set; }
        public virtual DbSet<StockReceiveDJ_CharDesign> StockReceiveDjCharDesigns { get; set; }
        public virtual DbSet<StockReceiveDJ_CharProduct> StockReceiveDjCharProducts { get; set; }
        public virtual DbSet<StockReceiveDJ_Costing> StockReceiveDjCostings { get; set; }
        public virtual DbSet<StockReceiveDJ_CostingProduct> StockReceiveDjCostingProducts { get; set; }
        public virtual DbSet<StockReceiveDJ_Finishing> StockReceiveDjFinishings { get; set; }
        public virtual DbSet<StockReceiveDJ_PricingBiaya> StockReceiveDjPricingBiayas { get; set; }
        public virtual DbSet<StockReceiveDJ_PricingMU> StockReceiveDjPricingMus { get; set; }
        public virtual DbSet<StockReceiveDJ_PricingProduct> StockReceiveDjPricingProducts { get; set; }
        public virtual DbSet<StockReceiveDJ_PricingSegmen> StockReceiveDjPricingSegmen { get; set; }
        public virtual DbSet<StockReceiveDJ_Stone1A> StockReceiveDjStone1As { get; set; }
        public virtual DbSet<StockReceiveDJ_Stone1B> StockReceiveDjStone1Bs { get; set; }
        public virtual DbSet<StockReceiveDJ_Stone2> StockReceiveDjStone2s { get; set; }
        public virtual DbSet<StockReceiveDJ_Stone3> StockReceiveDjStone3s { get; set; }
        public virtual DbSet<StockReceiveDJ_Stone4> StockReceiveDjStone4s { get; set; }
        public virtual DbSet<StockReceiveDJ_Stone5> StockReceiveDjStone5s { get; set; }
        public virtual DbSet<StockReceiveDJLegacy> StockReceiveDjlegacies { get; set; }
        public virtual DbSet<StockReceiveGJ> StockReceiveGjs { get; set; }
        public virtual DbSet<StockReceiveGJ_CharDesign> StockReceiveGjCharDesigns { get; set; }
        public virtual DbSet<StockReceiveGJ_CharProduct> StockReceiveGjCharProducts { get; set; }
        public virtual DbSet<StockReceiveGJ_Costing> StockReceiveGjCostings { get; set; }
        public virtual DbSet<StockReceiveGJ_CostingProduct> StockReceiveGjCostingProducts { get; set; }
        public virtual DbSet<StockReceiveGJ_Finishing> StockReceiveGjFinishings { get; set; }
        public virtual DbSet<StockReceiveGJ_PricingBiaya> StockReceiveGjPricingBiayas { get; set; }
        public virtual DbSet<StockReceiveGJ_PricingMU> StockReceiveGjPricingMus { get; set; }
        public virtual DbSet<StockReceiveGJ_PricingProduct> StockReceiveGjPricingProducts { get; set; }
        public virtual DbSet<StockReceiveGJ_PricingSegmen> StockReceiveGjPricingSegmen { get; set; }
        public virtual DbSet<StockReceiveGJLegacy> StockReceiveGjlegacies { get; set; }
        public virtual DbSet<StockReceiveLD> StockReceiveLds { get; set; }
        public virtual DbSet<StockReceiveLD_CharDesign> StockReceiveLdCharDesigns { get; set; }
        public virtual DbSet<StockReceiveLD_Stone1A> StockReceiveLdStone1As { get; set; }
        public virtual DbSet<StockReceiveLD_Stone1B> StockReceiveLdStone1Bs { get; set; }
        public virtual DbSet<StockReceiveLDLegacy> StockReceiveLdlegacies { get; set; }
        public virtual DbSet<StockReceiveMounting> StockReceiveMountings { get; set; }
        public virtual DbSet<StockReceiveMounting_CharDesign> StockReceiveMountingCharDesigns { get; set; }
        public virtual DbSet<StockReceiveMounting_CharProduct> StockReceiveMountingCharProducts { get; set; }
        public virtual DbSet<StockReceiveMounting_Costing> StockReceiveMountingCostings { get; set; }
        public virtual DbSet<StockReceiveMounting_CostingProduct> StockReceiveMountingCostingProducts { get; set; }
        public virtual DbSet<StockReceiveMounting_Finishing> StockReceiveMountingFinishings { get; set; }
        public virtual DbSet<StockReceiveMounting_PricingBiaya> StockReceiveMountingPricingBiayas { get; set; }
        public virtual DbSet<StockReceiveMounting_PricingMU> StockReceiveMountingPricingMus { get; set; }
        public virtual DbSet<StockReceiveMounting_PricingProduct> StockReceiveMountingPricingProducts { get; set; }
        public virtual DbSet<StockReceiveMounting_PricingSegmen> StockReceiveMountingPricingSegmen { get; set; }
        public virtual DbSet<StockReceivePackaging> StockReceivePackagings { get; set; }
        public virtual DbSet<StockReceivePackaging_Product> StockReceivePackagingProducts { get; set; }
        public virtual DbSet<StockReceivePG> StockReceivePgs { get; set; }
        public virtual DbSet<StockReceivePGLegacy> StockReceivePglegacies { get; set; }
        public virtual DbSet<StockReceiveSouvenir> StockReceiveSouvenirs { get; set; }
        public virtual DbSet<StockReceiveSouvenir_Product> StockReceiveSouvenirProducts { get; set; }
        public virtual DbSet<StockRetireDJ> StockRetireDjs { get; set; }
        public virtual DbSet<StockRetireDJ_Stone1A> StockRetireDjStone1As { get; set; }
        public virtual DbSet<StockRetireDJ_Stone1B> StockRetireDjStone1Bs { get; set; }
        public virtual DbSet<StockRetireDJ_Stone2> StockRetireDjStone2s { get; set; }
        public virtual DbSet<StockRetireDJ_Stone3> StockRetireDjStone3s { get; set; }
        public virtual DbSet<StockRetireDJ_Stone4> StockRetireDjStone4s { get; set; }
        public virtual DbSet<StockRetireDJ_Stone5> StockRetireDjStone5s { get; set; }
        public virtual DbSet<StockRetireGJ> StockRetireGjs { get; set; }
        public virtual DbSet<StockRetirePG> StockRetirePgs { get; set; }
        public virtual DbSet<StockReturnDJ> StockReturnDjs { get; set; }
        public virtual DbSet<StockReturnDJ_Product> StockReturnDjProducts { get; set; }
        public virtual DbSet<StockReturnGJ> StockReturnGjs { get; set; }
        public virtual DbSet<StockReturnGJ_Product> StockReturnGjProducts { get; set; }
        public virtual DbSet<StockReturnLD> StockReturnLds { get; set; }
        public virtual DbSet<StockReturnLD_Product> StockReturnLdProducts { get; set; }
        public virtual DbSet<StockReturnPG> StockReturnPgs { get; set; }
        public virtual DbSet<StockReturnPG_Product> StockReturnPgProducts { get; set; }
        public virtual DbSet<StockHadiah> Stockhadiahs { get; set; }
        public virtual DbSet<Stone1A> Stone1As { get; set; }
        public virtual DbSet<Stone1B> Stone1Bs { get; set; }
        public virtual DbSet<Stone2> Stone2s { get; set; }
        public virtual DbSet<Stone3> Stone3s { get; set; }
        public virtual DbSet<Stone4> Stone4s { get; set; }
        public virtual DbSet<Stone5> Stone5s { get; set; }
        public virtual DbSet<StoneCosting1A> StoneCosting1As { get; set; }
        public virtual DbSet<StoneCosting1B> StoneCosting1Bs { get; set; }
        public virtual DbSet<StoneCosting2> StoneCosting2s { get; set; }
        public virtual DbSet<StoneCosting3> StoneCosting3s { get; set; }
        public virtual DbSet<StoneCosting4> StoneCosting4s { get; set; }
        public virtual DbSet<StoneCosting5> StoneCosting5s { get; set; }
        public virtual DbSet<StoneCostingLog1A> StoneCostingLog1As { get; set; }
        public virtual DbSet<StoneCostingLog1B> StoneCostingLog1Bs { get; set; }
        public virtual DbSet<StoneCostingLog2> StoneCostingLog2s { get; set; }
        public virtual DbSet<StoneCostingLog3> StoneCostingLog3s { get; set; }
        public virtual DbSet<StoneCostingLog4> StoneCostingLog4s { get; set; }
        public virtual DbSet<StoneCostingLog5> StoneCostingLog5s { get; set; }
        public virtual DbSet<StonePricing1A> StonePricing1As { get; set; }
        public virtual DbSet<StonePricing1B> StonePricing1Bs { get; set; }
        public virtual DbSet<StonePricing2> StonePricing2s { get; set; }
        public virtual DbSet<StonePricing3> StonePricing3s { get; set; }
        public virtual DbSet<StonePricing4> StonePricing4s { get; set; }
        public virtual DbSet<StonePricing5> StonePricing5s { get; set; }
        public virtual DbSet<StonePricingLog1A> StonePricingLog1As { get; set; }
        public virtual DbSet<StonePricingLog1B> StonePricingLog1Bs { get; set; }
        public virtual DbSet<StonePricingLog2> StonePricingLog2s { get; set; }
        public virtual DbSet<StonePricingLog3> StonePricingLog3s { get; set; }
        public virtual DbSet<StonePricingLog4> StonePricingLog4s { get; set; }
        public virtual DbSet<StonePricingLog5> StonePricingLog5s { get; set; }
        public virtual DbSet<StonePricingLogRepair> StonePricingLogRepairs { get; set; }
        public virtual DbSet<StonePricingRepair> StonePricingRepairs { get; set; }
        public virtual DbSet<StoneRepair> StoneRepairs { get; set; }
        public virtual DbSet<Substorage> Substorages { get; set; }
        public virtual DbSet<TempResult> TempResults { get; set; }
        public virtual DbSet<TradeIn> TradeIns { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(connectionStrings.ConnectionStrings.Cnn_DB);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<AdjustmentPackaging>(entity =>
            {
                entity.ToTable("AdjustmentPackaging");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

            });

            modelBuilder.Entity<AdjustmentPackagingProduct>(entity =>
            {
                entity.ToTable("AdjustmentPackaging_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.HasOne(d => d.AdjustmentPackaging)
                    .WithMany(p => p.AdjustmentPackagingProducts)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_AdjustmentPackaging_Product_AdjustmentPackaging");

                entity.HasOne(d => d.Packaging)
                    .WithMany(p => p.AdjustmentPackagingProducts)
                    .HasForeignKey(d => d.Idproduct)
                    .HasConstraintName("FK_AdjustmentPackaging_Product_Packaging");
            });

            modelBuilder.Entity<AdjustmentSouvenir>(entity =>
            {
                entity.ToTable("AdjustmentSouvenir");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<AdjustmentSouvenirProduct>(entity =>
            {
                entity.ToTable("AdjustmentSouvenir_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.HasOne(d => d.AdjustmentSouvenir)
                    .WithMany(p => p.AdjustmentSouvenirProducts)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_AdjustmentSouvenir_Product_AdjustmentSouvenir");

                entity.HasOne(d => d.Souvenir)
                    .WithMany(p => p.AdjustmentSouvenirProducts)
                    .HasForeignKey(d => d.Idproduct)
                    .HasConstraintName("FK_AdjustmentSouvenir_Product_Souvenir");
            });

            modelBuilder.Entity<ASPDJ>(entity =>
            {
                entity.ToTable("ASPDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.MeperiodeMax).HasColumnName("MEPeriodeMax");

                entity.Property(e => e.MeperiodeMaxDay).HasColumnName("MEPeriodeMaxDay");

                entity.Property(e => e.MeperiodeMin).HasColumnName("MEPeriodeMin");

                entity.Property(e => e.Merumus)
                    .HasColumnType("money")
                    .HasColumnName("MERumus");

                entity.Property(e => e.R1PeriodeMax).HasColumnName("R1_PeriodeMax");

                entity.Property(e => e.R1PeriodeMin).HasColumnName("R1_PeriodeMin");

                entity.Property(e => e.R1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R1_Rumus");

                entity.Property(e => e.R2PeriodeMax).HasColumnName("R2_PeriodeMax");

                entity.Property(e => e.R2PeriodeMin).HasColumnName("R2_PeriodeMin");

                entity.Property(e => e.R2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R2_Rumus");

                entity.Property(e => e.Ti1PeriodeMax).HasColumnName("TI1_PeriodeMax");

                entity.Property(e => e.Ti1PeriodeMin).HasColumnName("TI1_PeriodeMin");

                entity.Property(e => e.Ti1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Rumus");

                entity.Property(e => e.Ti2PeriodeMax).HasColumnName("TI2_PeriodeMax");

                entity.Property(e => e.Ti2PeriodeMin).HasColumnName("TI2_PeriodeMin");

                entity.Property(e => e.Ti2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Rumus");

                entity.Property(e => e.Ti3PeriodeMax).HasColumnName("TI3_PeriodeMax");

                entity.Property(e => e.Ti3PeriodeMin).HasColumnName("TI3_PeriodeMin");

                entity.Property(e => e.Ti3Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI3_Rumus");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.ASPDJs)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ASPDJ_CharProductCategory");
            });

            modelBuilder.Entity<ASPDJLog>(entity =>
            {
                entity.ToTable("ASPDJLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.MeperiodeMax).HasColumnName("MEPeriodeMax");

                entity.Property(e => e.MeperiodeMaxLama).HasColumnName("MEPeriodeMaxLama");

                entity.Property(e => e.MeperiodeMin).HasColumnName("MEPeriodeMin");

                entity.Property(e => e.MeperiodeMinLama).HasColumnName("MEPeriodeMinLama");

                entity.Property(e => e.Merumus)
                    .HasColumnType("money")
                    .HasColumnName("MERumus");

                entity.Property(e => e.MerumusLama)
                    .HasColumnType("money")
                    .HasColumnName("MERumusLama");

                entity.Property(e => e.R1PeriodeMax).HasColumnName("R1_PeriodeMax");

                entity.Property(e => e.R1PeriodeMaxLama).HasColumnName("R1_PeriodeMaxLama");

                entity.Property(e => e.R1PeriodeMin).HasColumnName("R1_PeriodeMin");

                entity.Property(e => e.R1PeriodeMinLama).HasColumnName("R1_PeriodeMinLama");

                entity.Property(e => e.R1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R1_Rumus");

                entity.Property(e => e.R1RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("R1_RumusLama");

                entity.Property(e => e.R2PeriodeMax).HasColumnName("R2_PeriodeMax");

                entity.Property(e => e.R2PeriodeMaxLama).HasColumnName("R2_PeriodeMaxLama");

                entity.Property(e => e.R2PeriodeMin).HasColumnName("R2_PeriodeMin");

                entity.Property(e => e.R2PeriodeMinLama).HasColumnName("R2_PeriodeMinLama");

                entity.Property(e => e.R2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R2_Rumus");

                entity.Property(e => e.R2RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("R2_RumusLama");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.Property(e => e.Ti1PeriodeMax).HasColumnName("TI1_PeriodeMax");

                entity.Property(e => e.Ti1PeriodeMaxLama).HasColumnName("TI1_PeriodeMaxLama");

                entity.Property(e => e.Ti1PeriodeMin).HasColumnName("TI1_PeriodeMin");

                entity.Property(e => e.Ti1PeriodeMinLama).HasColumnName("TI1_PeriodeMinLama");

                entity.Property(e => e.Ti1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Rumus");

                entity.Property(e => e.Ti1RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("TI1_RumusLama");

                entity.Property(e => e.Ti2PeriodeMax).HasColumnName("TI2_PeriodeMax");

                entity.Property(e => e.Ti2PeriodeMaxLama).HasColumnName("TI2_PeriodeMaxLama");

                entity.Property(e => e.Ti2PeriodeMin).HasColumnName("TI2_PeriodeMin");

                entity.Property(e => e.Ti2PeriodeMinLama).HasColumnName("TI2_PeriodeMinLama");

                entity.Property(e => e.Ti2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Rumus");

                entity.Property(e => e.Ti2RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("TI2_RumusLama");

                entity.Property(e => e.Ti3PeriodeMax).HasColumnName("TI3_PeriodeMax");

                entity.Property(e => e.Ti3PeriodeMaxLama).HasColumnName("TI3_PeriodeMaxLama");

                entity.Property(e => e.Ti3PeriodeMin).HasColumnName("TI3_PeriodeMin");

                entity.Property(e => e.Ti3PeriodeMinLama).HasColumnName("TI3_PeriodeMinLama");

                entity.Property(e => e.Ti3Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI3_Rumus");

                entity.Property(e => e.Ti3RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("TI3_RumusLama");

                entity.HasOne(d => d.ASPDJ)
                    .WithMany(p => p.ASPDJLogs)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_ASPDJLog_ASPDJ");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.ASPDJLogs)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ASPDJLog_CharProductCategory");
            });

            modelBuilder.Entity<ASPGJ>(entity =>
            {
                entity.ToTable("ASPGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.MeperiodeMax).HasColumnName("MEPeriodeMax");

                entity.Property(e => e.MeperiodeMin).HasColumnName("MEPeriodeMin");

                entity.Property(e => e.Merumus)
                    .HasColumnType("money")
                    .HasColumnName("MERumus");

                entity.Property(e => e.R1PeriodeMax).HasColumnName("R1_PeriodeMax");

                entity.Property(e => e.R1PeriodeMin).HasColumnName("R1_PeriodeMin");

                entity.Property(e => e.R1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R1_Rumus");

                entity.Property(e => e.R2PeriodeMax).HasColumnName("R2_PeriodeMax");

                entity.Property(e => e.R2PeriodeMin).HasColumnName("R2_PeriodeMin");

                entity.Property(e => e.R2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R2_Rumus");

                entity.Property(e => e.Ti1PeriodeMax).HasColumnName("TI1_PeriodeMax");

                entity.Property(e => e.Ti1PeriodeMin).HasColumnName("TI1_PeriodeMin");

                entity.Property(e => e.Ti1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Rumus");

                entity.Property(e => e.Ti2PeriodeMax).HasColumnName("TI2_PeriodeMax");

                entity.Property(e => e.Ti2PeriodeMin).HasColumnName("TI2_PeriodeMin");

                entity.Property(e => e.Ti2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Rumus");

                entity.Property(e => e.Ti3PeriodeMax).HasColumnName("TI3_PeriodeMax");

                entity.Property(e => e.Ti3PeriodeMin).HasColumnName("TI3_PeriodeMin");

                entity.Property(e => e.Ti3Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI3_Rumus");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.ASPGJs)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ASPGJ_CharProductCategory");
            });

            modelBuilder.Entity<ASPGJLog>(entity =>
            {
                entity.ToTable("ASPGJLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.MeperiodeMax).HasColumnName("MEPeriodeMax");

                entity.Property(e => e.MeperiodeMaxLama).HasColumnName("MEPeriodeMaxLama");

                entity.Property(e => e.MeperiodeMin).HasColumnName("MEPeriodeMin");

                entity.Property(e => e.MeperiodeMinLama).HasColumnName("MEPeriodeMinLama");

                entity.Property(e => e.Merumus)
                    .HasColumnType("money")
                    .HasColumnName("MERumus");

                entity.Property(e => e.MerumusLama)
                    .HasColumnType("money")
                    .HasColumnName("MERumusLama");

                entity.Property(e => e.R1PeriodeMax).HasColumnName("R1_PeriodeMax");

                entity.Property(e => e.R1PeriodeMaxLama).HasColumnName("R1_PeriodeMaxLama");

                entity.Property(e => e.R1PeriodeMin).HasColumnName("R1_PeriodeMin");

                entity.Property(e => e.R1PeriodeMinLama).HasColumnName("R1_PeriodeMinLama");

                entity.Property(e => e.R1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R1_Rumus");

                entity.Property(e => e.R1RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("R1_RumusLama");

                entity.Property(e => e.R2PeriodeMax).HasColumnName("R2_PeriodeMax");

                entity.Property(e => e.R2PeriodeMaxLama).HasColumnName("R2_PeriodeMaxLama");

                entity.Property(e => e.R2PeriodeMin).HasColumnName("R2_PeriodeMin");

                entity.Property(e => e.R2PeriodeMinLama).HasColumnName("R2_PeriodeMinLama");

                entity.Property(e => e.R2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R2_Rumus");

                entity.Property(e => e.R2RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("R2_RumusLama");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.Property(e => e.Ti1PeriodeMax).HasColumnName("TI1_PeriodeMax");

                entity.Property(e => e.Ti1PeriodeMaxLama).HasColumnName("TI1_PeriodeMaxLama");

                entity.Property(e => e.Ti1PeriodeMin).HasColumnName("TI1_PeriodeMin");

                entity.Property(e => e.Ti1PeriodeMinLama).HasColumnName("TI1_PeriodeMinLama");

                entity.Property(e => e.Ti1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Rumus");

                entity.Property(e => e.Ti1RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("TI1_RumusLama");

                entity.Property(e => e.Ti2PeriodeMax).HasColumnName("TI2_PeriodeMax");

                entity.Property(e => e.Ti2PeriodeMaxLama).HasColumnName("TI2_PeriodeMaxLama");

                entity.Property(e => e.Ti2PeriodeMin).HasColumnName("TI2_PeriodeMin");

                entity.Property(e => e.Ti2PeriodeMinLama).HasColumnName("TI2_PeriodeMinLama");

                entity.Property(e => e.Ti2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Rumus");

                entity.Property(e => e.Ti2RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("TI2_RumusLama");

                entity.Property(e => e.Ti3PeriodeMax).HasColumnName("TI3_PeriodeMax");

                entity.Property(e => e.Ti3PeriodeMaxLama).HasColumnName("TI3_PeriodeMaxLama");

                entity.Property(e => e.Ti3PeriodeMin).HasColumnName("TI3_PeriodeMin");

                entity.Property(e => e.Ti3PeriodeMinLama).HasColumnName("TI3_PeriodeMinLama");

                entity.Property(e => e.Ti3Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI3_Rumus");

                entity.Property(e => e.Ti3RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("TI3_RumusLama");

                entity.HasOne(d => d.ASPGJ)
                    .WithMany(p => p.ASPGJLogs)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_ASPGJLog_ASPGJ");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.ASPGJLogs)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ASPGJLog_CharProductCategory");
            });

            modelBuilder.Entity<ASPLD>(entity =>
            {
                entity.ToTable("ASPLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.MeperiodeMax).HasColumnName("MEPeriodeMax");

                entity.Property(e => e.MeperiodeMin).HasColumnName("MEPeriodeMin");

                entity.Property(e => e.Merumus)
                    .HasColumnType("money")
                    .HasColumnName("MERumus");

                entity.Property(e => e.R1PeriodeMax).HasColumnName("R1_PeriodeMax");

                entity.Property(e => e.R1PeriodeMin).HasColumnName("R1_PeriodeMin");

                entity.Property(e => e.R1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R1_Rumus");

                entity.Property(e => e.R2PeriodeMax).HasColumnName("R2_PeriodeMax");

                entity.Property(e => e.R2PeriodeMin).HasColumnName("R2_PeriodeMin");

                entity.Property(e => e.R2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R2_Rumus");

                entity.Property(e => e.Ti1PeriodeMax).HasColumnName("TI1_PeriodeMax");

                entity.Property(e => e.Ti1PeriodeMin).HasColumnName("TI1_PeriodeMin");

                entity.Property(e => e.Ti1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Rumus");

                entity.Property(e => e.Ti2PeriodeMax).HasColumnName("TI2_PeriodeMax");

                entity.Property(e => e.Ti2PeriodeMin).HasColumnName("TI2_PeriodeMin");

                entity.Property(e => e.Ti2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Rumus");

                entity.Property(e => e.Ti3PeriodeMax).HasColumnName("TI3_PeriodeMax");

                entity.Property(e => e.Ti3PeriodeMin).HasColumnName("TI3_PeriodeMin");

                entity.Property(e => e.Ti3Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI3_Rumus");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.ASPLDs)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ASPLD_CharProductCategory");
            });

            modelBuilder.Entity<ASPLDLog>(entity =>
            {
                entity.ToTable("ASPLDLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.MeperiodeMax).HasColumnName("MEPeriodeMax");

                entity.Property(e => e.MeperiodeMaxLama).HasColumnName("MEPeriodeMaxLama");

                entity.Property(e => e.MeperiodeMin).HasColumnName("MEPeriodeMin");

                entity.Property(e => e.MeperiodeMinLama).HasColumnName("MEPeriodeMinLama");

                entity.Property(e => e.Merumus)
                    .HasColumnType("money")
                    .HasColumnName("MERumus");

                entity.Property(e => e.MerumusLama)
                    .HasColumnType("money")
                    .HasColumnName("MERumusLama");

                entity.Property(e => e.R1PeriodeMax).HasColumnName("R1_PeriodeMax");

                entity.Property(e => e.R1PeriodeMaxLama).HasColumnName("R1_PeriodeMaxLama");

                entity.Property(e => e.R1PeriodeMin).HasColumnName("R1_PeriodeMin");

                entity.Property(e => e.R1PeriodeMinLama).HasColumnName("R1_PeriodeMinLama");

                entity.Property(e => e.R1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R1_Rumus");

                entity.Property(e => e.R1RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("R1_RumusLama");

                entity.Property(e => e.R2PeriodeMax).HasColumnName("R2_PeriodeMax");

                entity.Property(e => e.R2PeriodeMaxLama).HasColumnName("R2_PeriodeMaxLama");

                entity.Property(e => e.R2PeriodeMin).HasColumnName("R2_PeriodeMin");

                entity.Property(e => e.R2PeriodeMinLama).HasColumnName("R2_PeriodeMinLama");

                entity.Property(e => e.R2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R2_Rumus");

                entity.Property(e => e.R2RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("R2_RumusLama");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.Property(e => e.Ti1PeriodeMax).HasColumnName("TI1_PeriodeMax");

                entity.Property(e => e.Ti1PeriodeMaxLama).HasColumnName("TI1_PeriodeMaxLama");

                entity.Property(e => e.Ti1PeriodeMin).HasColumnName("TI1_PeriodeMin");

                entity.Property(e => e.Ti1PeriodeMinLama).HasColumnName("TI1_PeriodeMinLama");

                entity.Property(e => e.Ti1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Rumus");

                entity.Property(e => e.Ti1RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("TI1_RumusLama");

                entity.Property(e => e.Ti2PeriodeMax).HasColumnName("TI2_PeriodeMax");

                entity.Property(e => e.Ti2PeriodeMaxLama).HasColumnName("TI2_PeriodeMaxLama");

                entity.Property(e => e.Ti2PeriodeMin).HasColumnName("TI2_PeriodeMin");

                entity.Property(e => e.Ti2PeriodeMinLama).HasColumnName("TI2_PeriodeMinLama");

                entity.Property(e => e.Ti2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Rumus");

                entity.Property(e => e.Ti2RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("TI2_RumusLama");

                entity.Property(e => e.Ti3PeriodeMax).HasColumnName("TI3_PeriodeMax");

                entity.Property(e => e.Ti3PeriodeMaxLama).HasColumnName("TI3_PeriodeMaxLama");

                entity.Property(e => e.Ti3PeriodeMin).HasColumnName("TI3_PeriodeMin");

                entity.Property(e => e.Ti3PeriodeMinLama).HasColumnName("TI3_PeriodeMinLama");

                entity.Property(e => e.Ti3Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI3_Rumus");

                entity.Property(e => e.Ti3RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("TI3_RumusLama");

                entity.HasOne(d => d.ASPLD)
                    .WithMany(p => p.ASPLDLogs)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_ASPLDLog_ASPLD");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.ASPLDLogs)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ASPLDLog_CharProductCategory");
            });

            modelBuilder.Entity<ASPPG>(entity =>
            {
                entity.ToTable("ASPPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.MeperiodeMax).HasColumnName("MEPeriodeMax");

                entity.Property(e => e.MeperiodeMin).HasColumnName("MEPeriodeMin");

                entity.Property(e => e.Merumus)
                    .HasColumnType("money")
                    .HasColumnName("MERumus");

                entity.Property(e => e.RPeriodeMin).HasColumnName("R_PeriodeMin");

                entity.Property(e => e.RRumus)
                    .HasColumnType("money")
                    .HasColumnName("R_Rumus");

                entity.Property(e => e.Ti1PeriodeMin).HasColumnName("TI1_PeriodeMin");

                entity.Property(e => e.Ti1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Rumus");

                entity.Property(e => e.Ti2PeriodeMin).HasColumnName("TI2_PeriodeMin");

                entity.Property(e => e.Ti2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Rumus");
            });

            modelBuilder.Entity<ASPPGLog>(entity =>
            {
                entity.ToTable("ASPPGLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.MeperiodeMax).HasColumnName("MEPeriodeMax");

                entity.Property(e => e.MeperiodeMaxLama).HasColumnName("MEPeriodeMaxLama");

                entity.Property(e => e.MeperiodeMin).HasColumnName("MEPeriodeMin");

                entity.Property(e => e.MeperiodeMinLama).HasColumnName("MEPeriodeMinLama");

                entity.Property(e => e.Merumus)
                    .HasColumnType("money")
                    .HasColumnName("MERumus");

                entity.Property(e => e.MerumusLama)
                    .HasColumnType("money")
                    .HasColumnName("MERumusLama");

                entity.Property(e => e.RPeriodeMin).HasColumnName("R_PeriodeMin");

                entity.Property(e => e.RPeriodeMinLama).HasColumnName("R_PeriodeMinLama");

                entity.Property(e => e.RRumus)
                    .HasColumnType("money")
                    .HasColumnName("R_Rumus");

                entity.Property(e => e.RRumusLama)
                    .HasColumnType("money")
                    .HasColumnName("R_RumusLama");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.Property(e => e.Ti1PeriodeMin).HasColumnName("TI1_PeriodeMin");

                entity.Property(e => e.Ti1PeriodeMinLama).HasColumnName("TI1_PeriodeMinLama");

                entity.Property(e => e.Ti1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Rumus");

                entity.Property(e => e.Ti1RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("TI1_RumusLama");

                entity.Property(e => e.Ti2PeriodeMin).HasColumnName("TI2_PeriodeMin");

                entity.Property(e => e.Ti2PeriodeMinLama).HasColumnName("TI2_PeriodeMinLama");

                entity.Property(e => e.Ti2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Rumus");

                entity.Property(e => e.Ti2RumusLama)
                    .HasColumnType("money")
                    .HasColumnName("TI2_RumusLama");

                entity.HasOne(d => d.ASPPG)
                    .WithMany(p => p.ASPPGLogs)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_ASPPGLog_ASPPG");
            });

            modelBuilder.Entity<BankIssuer>(entity =>
            {
                entity.ToTable("BankIssuer");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BudgetStock>(entity =>
            {
                entity.ToTable("BudgetStock");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApprovalNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.TargetQty).HasColumnType("money");

                entity.Property(e => e.TargetRupiah).HasColumnType("money");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.BudgetStocks)
                    .HasForeignKey(d => d.ProductCategory)
                    .HasConstraintName("FK_BudgetStock_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.BudgetStocks)
                    .HasForeignKey(d => d.ProductItem)
                    .HasConstraintName("FK_BudgetStock_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.BudgetStocks)
                    .HasForeignKey(d => d.ProductLevel)
                    .HasConstraintName("FK_BudgetStock_CharProductLevel");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.BudgetStocks)
                    .HasForeignKey(d => d.Segmen)
                    .HasConstraintName("FK_BudgetStock_CharProductSegmen");
            });

            modelBuilder.Entity<BundleItem>(entity =>
            {
                entity.ToTable("BundleItem");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApprovalNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.TglExpire).HasColumnType("date");

                entity.Property(e => e.TglStart).HasColumnType("date");
            });

            modelBuilder.Entity<BundleItemMaster>(entity =>
            {
                entity.ToTable("Bundle_ItemMaster");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.HasOne(d => d.BundleItem)
                    .WithMany(p => p.BundleItemMasters)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bundle_ItemMaster_BundleItem");
            });

            modelBuilder.Entity<BundleItemPasangan>(entity =>
            {
                entity.ToTable("Bundle_ItemPasangan");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.HasOne(d => d.BundleItem)
                    .WithMany(p => p.BundleItemPasangans)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bundle_ItemPasangan_BundleItem");
            });

            modelBuilder.Entity<BungaBank>(entity =>
            {
                entity.ToTable("BungaBank");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Persen).HasColumnType("money");
            });

            modelBuilder.Entity<BuybackCalculator>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BuybackCalculator");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.TransctionType)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CalculatorProductDJ>(entity =>
            {
                entity.ToTable("CalculatorProductDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<CalculatorProductDJ_CharProduct>(entity =>
            {
                entity.ToTable("CalculatorProductDJ_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.CalculatorProductDJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.CalculatorProductDJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.CalculatorProductDJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.CalculatorProductDJ)
                    .WithOne(p => p.CalculatorProductDJ_CharProduct)
                    .HasForeignKey<CalculatorProductDJ_CharProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_CharProduct_CalculatorProductDJ");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.CalculatorProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.CalculatorProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.CalculatorProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.CalculatorProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.CalculatorProductDJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<CalculatorProductDJ_Finishing>(entity =>
            {
                entity.ToTable("CalculatorProductDJ_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaModal).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.CalculatorProductDJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.CalculatorProductDJ)
                    .WithMany(p => p.CalculatorProductDJ_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_CalculatorProductDJ_Finishing_CalculatorProductDJ");
            });

            modelBuilder.Entity<CalculatorProductDJ_PricingBiaya>(entity =>
            {
                entity.ToTable("CalculatorProductDJ_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.CalculatorProductDJ)
                    .WithOne(p => p.CalculatorProductDJ_PricingBiaya)
                    .HasForeignKey<CalculatorProductDJ_PricingBiaya>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_PricingBiaya_CalculatorProductDJ");
            });

            modelBuilder.Entity<CalculatorProductDJ_PricingMU>(entity =>
            {
                entity.ToTable("CalculatorProductDJ_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CalculatorProductDJ)
                    .WithOne(p => p.CalculatorProductDJ_PricingMU)
                    .HasForeignKey<CalculatorProductDJ_PricingMU>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_PricingMU_CalculatorProductDJ");
            });

            modelBuilder.Entity<CalculatorProductDJPricingProduct>(entity =>
            {
                entity.ToTable("CalculatorProductDJ_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.CalculatorProductDJ)
                    .WithOne(p => p.CalculatorProductDJ_PricingProduct)
                    .HasForeignKey<CalculatorProductDJPricingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalculatorProductDJ_PricingProduct_CalculatorProductDJ");
            });

            modelBuilder.Entity<CalculatorProductDJ_Stone1A>(entity =>
            {
                entity.ToTable("CalculatorProductDJ_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.CalculatorProductDJ)
                    .WithMany(p => p.CalculatorProductDJ_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_CalculatorProductDJ_Stone1A_CalculatorProductDJ");
            });

            modelBuilder.Entity<CalculatorProductDJ_Stone1B>(entity =>
            {
                entity.ToTable("CalculatorProductDJ_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.CalculatorProductDJ)
                    .WithMany(p => p.CalculatorProductDJ_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_CalculatorProductDJ_Stone1B_CalculatorProductDJ");
            });

            modelBuilder.Entity<CalculatorProductDJ_Stone2>(entity =>
            {
                entity.ToTable("CalculatorProductDJ_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.CalculatorProductDJ)
                    .WithMany(p => p.CalculatorProductDJ_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_CalculatorProductDJ_Stone2_CalculatorProductDJ");
            });

            modelBuilder.Entity<CalculatorProductDJ_Stone3>(entity =>
            {
                entity.ToTable("CalculatorProductDJ_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.CalculatorProductDJ)
                    .WithMany(p => p.CalculatorProductDJ_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_CalculatorProductDJ_Stone3_CalculatorProductDJ");
            });

            modelBuilder.Entity<CalculatorProductDJ_Stone4>(entity =>
            {
                entity.ToTable("CalculatorProductDJ_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.CalculatorProductDJ)
                    .WithMany(p => p.CalculatorProductDJ_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_CalculatorProductDJ_Stone4_CalculatorProductDJ");
            });

            modelBuilder.Entity<CalculatorProductDJ_Stone5>(entity =>
            {
                entity.ToTable("CalculatorProductDJ_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.CalculatorProductDJ)
                    .WithMany(p => p.CalculatorProductDJ_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_CalculatorProductDJ_Stone5_CalculatorProductDJ");
            });

            modelBuilder.Entity<CardType>(entity =>
            {
                entity.ToTable("CardType");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CharDesignCategory>(entity =>
            {
                entity.ToTable("CharDesignCategory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharDesignConcept>(entity =>
            {
                entity.ToTable("CharDesignConcept");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharDesignProcess>(entity =>
            {
                entity.ToTable("CharDesignProcess");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharFrameColor>(entity =>
            {
                entity.ToTable("CharFrameColor");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeLama)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharFrameFinishing>(entity =>
            {
                entity.ToTable("CharFrameFinishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharFrameMaterial>(entity =>
            {
                entity.ToTable("CharFrameMaterial");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharGoldLevel>(entity =>
            {
                entity.ToTable("CharGoldLevel");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharGoldModel>(entity =>
            {
                entity.ToTable("CharGoldModel");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Margin).HasColumnType("money");

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharProcessCon>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharProcessFinishing>(entity =>
            {
                entity.ToTable("CharProcessFinishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharProcessRepair>(entity =>
            {
                entity.ToTable("CharProcessRepair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharProductCategory>(entity =>
            {
                entity.ToTable("CharProductCategory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeProto)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharProductItem>(entity =>
            {
                entity.ToTable("CharProductItem");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharProductLevel>(entity =>
            {
                entity.ToTable("CharProductLevel");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharProductSegmen>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharStoneDist>(entity =>
            {
                entity.ToTable("CharStoneDist");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharStoneFluor>(entity =>
            {
                entity.ToTable("CharStoneFluor");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharStoneSetting>(entity =>
            {
                entity.ToTable("CharStoneSetting");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharTargetAge>(entity =>
            {
                entity.ToTable("CharTargetAge");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CharTargetGender>(entity =>
            {
                entity.ToTable("CharTargetGender");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.ToTable("Company");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.AddrWebsite).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ImgLogo).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<CompanyBrand>(entity =>
            {
                entity.ToTable("CompanyBrand");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idcompany).HasColumnName("IDCompany");

                entity.Property(e => e.ImgLogo).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CompanyBrands)
                    .HasForeignKey(d => d.Idcompany)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CompanyBrand_Company");
            });

            modelBuilder.Entity<CompanyDiv>(entity =>
            {
                entity.ToTable("CompanyDiv");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idcompany).HasColumnName("IDCompany");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CompanyDivs)
                    .HasForeignKey(d => d.Idcompany)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CompanyDiv_Company");
            });

            modelBuilder.Entity<CrossBrand_StockIncomingDJ>(entity =>
            {
                entity.ToTable("CrossBrand_StockIncomingDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idoutgoing).HasColumnName("IDOutgoing");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.CrossBrand_StockOutgoingDJ)
                    .WithMany(p => p.CrossBrand_StockIncomingDJ)
                    .HasForeignKey(d => d.Idoutgoing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockIncomingDJ_StockOutgoingDJ");

            });

            modelBuilder.Entity<CrossBrand_StockIncomingDJ_Product>(entity =>
            {
                entity.HasKey(e => new { e.Idform, e.Idproduct });

                entity.ToTable("CrossBrand_StockIncomingDJ_Product");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.CrossBrand_StockIncomingDJ)
                    .WithMany(p => p.CrossBrand_StockIncomingDJ_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockIncomingDJ_Product_StockIncomingDJ");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.CrossBrand_StockIncomingDJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockIncomingDJ_Product_StockProductDJ");

                entity.HasOne(d => d.StockActualDJ)
                    .WithMany(p => p.CrossBrand_StockIncomingDJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockIncomingDJ_Product_StockActualDJ");
            });

            modelBuilder.Entity<CrossBrand_StockIncomingPG>(entity =>
            {
                entity.ToTable("CrossBrand_StockIncomingPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idoutgoing).HasColumnName("IDOutgoing");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.CrossBrand_StockOutgoingPG)
                    .WithMany(p => p.CrossBrand_StockIncomingPG)
                    .HasForeignKey(d => d.Idoutgoing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockIncomingPG_StockOutgoingPG");
            });

            modelBuilder.Entity<CrossBrand_StockIncomingPG_Product>(entity =>
            {

                entity.HasKey(e => new { e.Idform, e.Idproduct });

                entity.ToTable("CrossBrand_StockIncomingPG_Product");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.CrossBrand_StockIncomingPG)
                    .WithMany(p => p.CrossBrand_StockIncomingPG_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockIncomingPG_Product_StockIncomingPG");

                entity.HasOne(d => d.StockProductPG)
                    .WithMany(p => p.CrossBrand_StockIncomingPG_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockIncomingPG_Product_StockProductPG");

                entity.HasOne(d => d.StockActualPG)
                    .WithMany(p => p.CrossBrand_StockIncomingPG_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockIncomingPG_Product_StockActualPG");
            });

            modelBuilder.Entity<CrossBrand_StockIncomingLD>(entity =>
            {
                entity.ToTable("CrossBrand_StockIncomingLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idoutgoing).HasColumnName("IDOutgoing");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.CrossBrand_StockOutgoingLD)
                    .WithMany(p => p.CrossBrand_StockIncomingLD)
                    .HasForeignKey(d => d.Idoutgoing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockIncomingDJ_StockOutgoingLD");

            });

            modelBuilder.Entity<CrossBrand_StockIncomingLD_Product>(entity =>
            {
                entity.HasKey(e => new { e.Idform, e.Idproduct });

                entity.ToTable("CrossBrand_StockIncomingLD_Product");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.CrossBrand_StockIncomingLD)
                    .WithMany(p => p.CrossBrand_StockIncomingLD_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockIncomingLD_Product_StockIncomingLD");

                entity.HasOne(d => d.StockProductLD_Stone1B)
                    .WithMany(p => p.CrossBrand_StockIncomingLD_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockIncomingLD_Product_StockProductLD");

                entity.HasOne(d => d.StockActualLD_Stone1B)
                    .WithMany(p => p.CrossBrand_StockIncomingLD_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockIncomingLD_Product_StockActualLD");
            });

            modelBuilder.Entity<CrossBrand_StockOutgoingDJ>(entity =>
            {
                entity.ToTable("CrossBrand_StockOutgoingDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idasal).HasColumnName("IDAsal");

                entity.Property(e => e.IdbrandAsal).HasColumnName("IDBrandAsal");

                entity.Property(e => e.IdbrandTujuan).HasColumnName("IDBrandTujuan");

                entity.Property(e => e.Idtujuan).HasColumnName("IDTujuan");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaAsal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaTujuan)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglEta)
                    .HasColumnType("date")
                    .HasColumnName("TglETA");

                entity.HasOne(d => d.BrandAsal)
                    .WithMany(p => p.CrossBrandStockOutgoingDJ_BrarandAsals)
                    .HasForeignKey(d => d.IdbrandAsal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingDJAsal_CompanyBrand");

                entity.HasOne(d => d.BrandTujuan)
                    .WithMany(p => p.CrossBrandStockOutgoingDJ_BrandTujuans)
                    .HasForeignKey(d => d.IdbrandTujuan)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingDJTujuan_CompanyBrand");
            });

            modelBuilder.Entity<CrossBrand_StockOutgoingDJ_Product>(entity =>
            {

                entity.HasKey(e => new { e.Idform, e.Idproduct });

                entity.ToTable("CrossBrand_StockOutgoingDJ_Product");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CrossBrand_StockOutgoingDJ)
                    .WithMany(p => p.CrossBrand_StockOutgoingDJ_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingDJ_Product_StockOutgoingDJ");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.CrossBrand_StockOutgoingDJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingDJ_Product_StockProductDJ");

                entity.HasOne(d => d.StockActualDJ)
                    .WithMany(p => p.CrossBrand_StockOutgoingDJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingDJ_Product_StockActualDJ");
            });

            modelBuilder.Entity<CrossBrand_StockOutgoingPG>(entity =>
            {
                entity.ToTable("CrossBrand_StockOutgoingPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idasal).HasColumnName("IDAsal");

                entity.Property(e => e.IdbrandAsal).HasColumnName("IDBrandAsal");

                entity.Property(e => e.IdbrandTujuan).HasColumnName("IDBrandTujuan");

                entity.Property(e => e.Idtujuan).HasColumnName("IDTujuan");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaAsal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaTujuan)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglEta)
                    .HasColumnType("date")
                    .HasColumnName("TglETA");

                entity.HasOne(d => d.BrandAsal)
                    .WithMany(p => p.CrossBrandStockOutgoingPG_BrandAsals)
                    .HasForeignKey(d => d.IdbrandAsal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingPGAsal_CompanyBrand");

                entity.HasOne(d => d.BrandTujuan)
                    .WithMany(p => p.CrossBrandStockOutgoingPG_BrandTujuans)
                    .HasForeignKey(d => d.IdbrandTujuan)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingPGTujuan_CompanyBrand");
            });

            modelBuilder.Entity<CrossBrand_StockOutgoingPG_Product>(entity =>
            {
                entity.HasKey(e => new { e.Idform, e.Idproduct });

                entity.ToTable("CrossBrand_StockOutgoingPG_Product");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CrossBrand_StockOutgoingPG)
                    .WithMany(p => p.CrossBrand_StockOutgoingPG_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingPG_Product_StockOutgoingPG");

                entity.HasOne(d => d.StockProductPG)
                    .WithMany(p => p.CrossBrand_StockOutgoingPG_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingPG_Product_StockProductPG");

                entity.HasOne(d => d.StockActualPG)
                    .WithMany(p => p.CrossBrand_StockOutgoingPG_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingPG_Product_StockActualPG");
            });

            modelBuilder.Entity<CrossBrand_StockOutgoingLD>(entity =>
            {
                entity.ToTable("CrossBrand_StockOutgoingLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idasal).HasColumnName("IDAsal");

                entity.Property(e => e.IdbrandAsal).HasColumnName("IDBrandAsal");

                entity.Property(e => e.IdbrandTujuan).HasColumnName("IDBrandTujuan");

                entity.Property(e => e.Idtujuan).HasColumnName("IDTujuan");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaAsal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaTujuan)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglEta)
                    .HasColumnType("date")
                    .HasColumnName("TglETA");

                entity.HasOne(d => d.BrandAsal)
                    .WithMany(p => p.CrossBrandStockOutgoingLD_BrandAsals)
                    .HasForeignKey(d => d.IdbrandAsal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingLDAsal_CompanyBrand");

                entity.HasOne(d => d.BrandTujuan)
                    .WithMany(p => p.CrossBrandStockOutgoingLD_BrandTujuans )
                    .HasForeignKey(d => d.IdbrandTujuan)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingLDTujuan_CompanyBrand");
            });

            modelBuilder.Entity<CrossBrand_StockOutgoingLD_Product>(entity =>
            {

                entity.HasKey(e => new { e.Idform, e.Idproduct });

                entity.ToTable("CrossBrand_StockOutgoingLD_Product");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CrossBrand_StockOutgoingLD)
                    .WithMany(p => p.CrossBrand_StockOutgoingLD_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingLD_Product_StockOutgoingLD");

                entity.HasOne(d => d.StockProductLD_Stone1B)
                    .WithMany(p => p.CrossBrand_StockOutgoingLD_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingLD_Product_StockProductLD");

                entity.HasOne(d => d.StockActualLD_Stone1B)
                    .WithMany(p => p.CrossBrand_StockOutgoingLD_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBrand_StockOutgoingLD_Product_StockActualLD");
            });

            modelBuilder.Entity<DataAccounting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataAccounting");

                entity.Property(e => e.AddrEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Nama)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NIK");
            });

            modelBuilder.Entity<DataAdminSale>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Iduser).HasColumnName("IDUser");

                entity.Property(e => e.IdNew).HasColumnName("IDNew");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");
            });

            modelBuilder.Entity<DataAreaManager>(entity =>
            {
                entity.ToTable("DataAreaManager");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Iduser).HasColumnName("IDUser");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");
            });

            modelBuilder.Entity<DataAreaManagerLokasi>(entity =>
            {
                entity.ToTable("DataAreaManager_Lokasi");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.HasOne(d => d.DataAreaManager)
                    .WithMany(p => p.DataAreaManagerLokasis)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataAreaManager_Lokasi_DataAreaManager");
            });

            modelBuilder.Entity<DataCustomer>(entity =>
            {
                entity.ToTable("DataCustomer");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrMobile).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp2).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp3).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaPasangan)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoCustomer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoMember)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoNpwp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoNPWP");

                entity.Property(e => e.PinBb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PinBB");

                entity.Property(e => e.RewardRemaining).HasColumnType("money");

                entity.Property(e => e.RewardTaken).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglLahir).HasColumnType("date");

                entity.Property(e => e.TglLahirPasangan).HasColumnType("date");

                entity.Property(e => e.TotalPurchase).HasColumnType("money");

                entity.Property(e => e.TotalReward).HasColumnType("money");

                entity.Property(e => e.WeddingAnniversarry).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.DataCustomers)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataCustomer_CompanyBrand");
            });

            modelBuilder.Entity<DataCustomerSalesOrder>(entity =>
            {
                entity.ToTable("DataCustomerSalesOrder");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdsalesOrder).HasColumnName("IDSalesOrder");

                entity.Property(e => e.Nama).HasMaxLength(2500);
            });

            modelBuilder.Entity<DataHuman>(entity =>
            {
                entity.ToTable("DataHuman");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idgroup).HasColumnName("IDGroup");

                entity.Property(e => e.Iduser).HasColumnName("IDUser");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.NoNpwp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoNPWP");

                entity.Property(e => e.Point).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.DataHumans)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataHuman_CompanyBrand");

                entity.HasOne(d => d.DataHumanGroup)
                    .WithMany(p => p.DataHumans)
                    .HasForeignKey(d => d.Idgroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataHuman_DataHumanGroup");
            });

            modelBuilder.Entity<DataHumanGroup>(entity =>
            {
                entity.ToTable("DataHumanGroup");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<DataProcurement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataProcurement");

                entity.Property(e => e.AddrEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Nama)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NIK");
            });

            modelBuilder.Entity<DataSales>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idgroup).HasColumnName("IDGroup");

                entity.Property(e => e.Iduser).HasColumnName("IDUser");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.DataSales)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataSales_CompanyBrand");

                entity.HasOne(d => d.DataSalesGroup)
                    .WithMany(p => p.DataSales)
                    .HasForeignKey(d => d.Idgroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataSales_DataSalesGroup");
            });

            modelBuilder.Entity<DataSalesGroup>(entity =>
            {
                entity.ToTable("DataSalesGroup");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<DataSK>(entity =>
            {
                entity.ToTable("DataSK");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idgroup).HasColumnName("IDGroup");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Iduser).HasColumnName("IDUser");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.DataSKGroup)
                    .WithMany(p => p.DataSKs)
                    .HasForeignKey(d => d.Idgroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataSK_DataSKGroup");
            });

            modelBuilder.Entity<DataSKGroup>(entity =>
            {
                entity.ToTable("DataSKGroup");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<DataSupplier>(entity =>
            {
                entity.ToTable("DataSupplier");

                entity.HasIndex(e => e.Idbrand, "IX_DataSupplier");

                entity.HasIndex(e => e.Idgroup, "IX_DataSupplier_1");

                entity.HasIndex(e => e.Iduser, "IX_DataSupplier_2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idgroup).HasColumnName("IDGroup");

                entity.Property(e => e.Iduser).HasColumnName("IDUser");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Point).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.DataSuppliers)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataSupplier_CompanyBrand");

                entity.HasOne(d => d.DataSupplierGroup)
                    .WithMany(p => p.DataSuppliers)
                    .HasForeignKey(d => d.Idgroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataSupplier_DataSupplierGroup");
            });

            modelBuilder.Entity<DataSupplierGroup>(entity =>
            {
                entity.ToTable("DataSupplierGroup");

                entity.HasIndex(e => e.Nama, "IX_DataSupplierGroup");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<DataVoucher>(entity =>
            {
                entity.ToTable("DataVoucher");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CustomerNama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idcustomer).HasColumnName("IDCustomer");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nominal).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglExpired).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.DataVouchers)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataVoucher_CompanyBrand");
            });

            modelBuilder.Entity<DocQCDJ>(entity =>
            {
                entity.ToTable("DocQCDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Blemish).IsUnicode(false);

                entity.Property(e => e.Cz)
                    .IsUnicode(false)
                    .HasColumnName("CZ");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.FisikKeseluruhan).IsUnicode(false);

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.JumlahButir).IsUnicode(false);

                entity.Property(e => e.KadarEmas).IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Logo).IsUnicode(false);

                entity.Property(e => e.Merk).IsUnicode(false);

                entity.Property(e => e.NetWeight).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NonCz)
                    .IsUnicode(false)
                    .HasColumnName("NonCZ");

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Qcnama)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QCNama");

                entity.Property(e => e.Sertifikat).IsUnicode(false);

                entity.Property(e => e.WarnaEmas).IsUnicode(false);

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.DocQCDJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_StockProductDJ");
            });

            modelBuilder.Entity<DocQCDJ_Stone1A>(entity =>
            {
                entity.ToTable("DocQCDJ_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TotalButirActual).HasColumnType("money");

                entity.Property(e => e.TotalCaratActual).HasColumnType("money");

                entity.HasOne(d => d.DocQCDJ)
                    .WithMany(p => p.DocQCDJ_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_Stone1A_DocQCDJ");

                entity.HasOne(d => d.StockProductDJ_Stone1A)
                    .WithMany(p => p.DocQCDJ_Stone1As)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_Stone1A_StockProductDJ_Stone1A");
            });

            modelBuilder.Entity<DocQCDJ_Stone1B>(entity =>
            {
                entity.ToTable("DocQCDJ_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TotalButirActual).HasColumnType("money");

                entity.Property(e => e.TotalCaratActual).HasColumnType("money");

                entity.HasOne(d => d.DocQCDJ)
                    .WithMany(p => p.DocQCDJ_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_Stone1B_DocQCDJ");

                entity.HasOne(d => d.StockProductDJ_Stone1B)
                    .WithMany(p => p.DocQCDJ_Stone1Bs)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_Stone1B_StockProductDJ_Stone1A");
            });

            modelBuilder.Entity<DocQCDJ_Stone2>(entity =>
            {
                entity.ToTable("DocQCDJ_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TotalButirActual).HasColumnType("money");

                entity.Property(e => e.TotalCaratActual).HasColumnType("money");

                entity.HasOne(d => d.DocQCDJ)
                    .WithMany(p => p.DocQCDJ_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_Stone2_DocQCDJ");

                entity.HasOne(d => d.StockProductDJ_Stone2)
                    .WithMany(p => p.DocQCDJ_Stone2s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_Stone2_StockProductDJ_Stone1A");
            });

            modelBuilder.Entity<DocQCDJ_Stone3>(entity =>
            {
                entity.ToTable("DocQCDJ_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TotalButirActual).HasColumnType("money");

                entity.Property(e => e.TotalCaratActual).HasColumnType("money");

                entity.HasOne(d => d.DocQCDJ)
                    .WithMany(p => p.DocQCDJ_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_Stone3_DocQCDJ");

                entity.HasOne(d => d.StockProductDJ_Stone3)
                    .WithMany(p => p.DocQCDJ_Stone3s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_Stone3_StockProductDJ_Stone1A");
            });

            modelBuilder.Entity<DocQCDJ_Stone4>(entity =>
            {
                entity.ToTable("DocQCDJ_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TotalButirActual).HasColumnType("money");

                entity.Property(e => e.TotalCaratActual).HasColumnType("money");

                entity.HasOne(d => d.DocQCDJ)
                    .WithMany(p => p.DocQCDJ_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_Stone4_DocQCDJ");

                entity.HasOne(d => d.StockProductDJ_Stone4)
                    .WithMany(p => p.DocQCDJ_Stone4s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_Stone4_StockProductDJ_Stone1A");
            });

            modelBuilder.Entity<DocQCDJ_Stone5>(entity =>
            {
                entity.ToTable("DocQCDJ_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TotalButirActual).HasColumnType("money");

                entity.Property(e => e.TotalCaratActual).HasColumnType("money");

                entity.HasOne(d => d.DocQCDJ)
                    .WithMany(p => p.DocQCDJ_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_Stone5_DocQCDJ");

                entity.HasOne(d => d.StockProductDJ_Stone5)
                    .WithMany(p => p.DocQCDJ_Stone5s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJ_Stone5_StockProductDJ_Stone1A");
            });

            modelBuilder.Entity<DocQCDJCustomer>(entity =>
            {
                entity.ToTable("DocQCDJCustomer");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Blemish).IsUnicode(false);

                entity.Property(e => e.Cz)
                    .IsUnicode(false)
                    .HasColumnName("CZ");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.FisikKeseluruhan).IsUnicode(false);

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.IdproductTitipan).HasColumnName("IDProductTitipan");

                entity.Property(e => e.JumlahButir).IsUnicode(false);

                entity.Property(e => e.KadarEmas).IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Logo).IsUnicode(false);

                entity.Property(e => e.Merk).IsUnicode(false);

                entity.Property(e => e.NetWeight).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NonCz)
                    .IsUnicode(false)
                    .HasColumnName("NonCZ");

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Qcnama)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QCNama");

                entity.Property(e => e.Sertifikat).IsUnicode(false);

                entity.Property(e => e.WarnaEmas).IsUnicode(false);

                entity.HasOne(d => d.StockProductDJCustomer)
                    .WithMany(p => p.DocQCDJCustomers)
                    .HasForeignKey(d => d.IdproductTitipan)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_StockProductDJCustomer");
            });

            modelBuilder.Entity<DocQCDJCustomer_Stone1A>(entity =>
            {
                entity.ToTable("DocQCDJCustomer_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.DocQCDJCustomer)
                    .WithMany(p => p.DocQCDJCustomer_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_Stone1A_DocQCDJCustomer");

                entity.HasOne(d => d.StockProductDJCustomer_Stone1A)
                    .WithMany(p => p.DocQCDJCustomer_Stone1As)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_Stone1A_StockProductDJCustomer_Stone1A");
            });

            modelBuilder.Entity<DocQCDJCustomer_Stone1B>(entity =>
            {
                entity.ToTable("DocQCDJCustomer_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.DocQCDJCustomer)
                    .WithMany(p => p.DocQCDJCustomer_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_Stone1B_DocQCDJCustomer");

                entity.HasOne(d => d.StockProductDJCustomer_Stone1B)
                    .WithMany(p => p.DocQCDJCustomer_Stone1Bs)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_Stone1B_StockProductDJCustomer_Stone1B");
            });

            modelBuilder.Entity<DocQCDJCustomer_Stone2>(entity =>
            {
                entity.ToTable("DocQCDJCustomer_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.DocQCDJCustomer)
                    .WithMany(p => p.DocQCDJCustomer_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_Stone2_DocQCDJCustomer");

                entity.HasOne(d => d.StockProductDJCustomer_Stone2)
                    .WithMany(p => p.DocQCDJCustomer_Stone2s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_Stone2_StockProductDJCustomer_Stone2");
            });

            modelBuilder.Entity<DocQCDJCustomer_Stone3>(entity =>
            {
                entity.ToTable("DocQCDJCustomer_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.DocQCDJCustomer)
                    .WithMany(p => p.DocQCDJCustomer_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_Stone3_DocQCDJCustomer");

                entity.HasOne(d => d.StockProductDJCustomer_Stone3)
                    .WithMany(p => p.DocQCDJCustomer_Stone3s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_Stone3_StockProductDJCustomer_Stone3");
            });

            modelBuilder.Entity<DocQCDJCustomer_Stone4>(entity =>
            {
                entity.ToTable("DocQCDJCustomer_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.DocQCDJCustomer)
                    .WithMany(p => p.DocQCDJCustomer_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_Stone4_DocQCDJCustomer");

                entity.HasOne(d => d.StockProductDJCustomer_Stone4)
                    .WithMany(p => p.DocQCDJCustomer_Stone4s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_Stone4_StockProductDJCustomer_Stone4");
            });

            modelBuilder.Entity<DocQCDJCustomer_Stone5>(entity =>
            {
                entity.ToTable("DocQCDJCustomer_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.DocQCDJCustomer)
                    .WithMany(p => p.DocQCDJCustomer_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_Stone5_DocQCDJCustomer");

                entity.HasOne(d => d.StockProductDJCustomer_Stone5)
                    .WithMany(p => p.DocQCDJCustomer_Stone5s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCDJCustomer_Stone5_StockProductDJCustomer_Stone5");
            });

            modelBuilder.Entity<DocQCGJ>(entity =>
            {
                entity.ToTable("DocQCGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Blemish).IsUnicode(false);

                entity.Property(e => e.Cz)
                    .IsUnicode(false)
                    .HasColumnName("CZ");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.FisikKeseluruhan).IsUnicode(false);

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.JumlahButir).IsUnicode(false);

                entity.Property(e => e.KadarEmas).IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Logo).IsUnicode(false);

                entity.Property(e => e.Merk).IsUnicode(false);

                entity.Property(e => e.NetWeight).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NonCz)
                    .IsUnicode(false)
                    .HasColumnName("NonCZ");

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Qcnama)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QCNama");

                entity.Property(e => e.Sertifikat).IsUnicode(false);

                entity.Property(e => e.WarnaEmas).IsUnicode(false);

                entity.HasOne(d => d.StockProductGJ)
                    .WithMany(p => p.DocQCGJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCGJ_StockProductGJ");
            });

            modelBuilder.Entity<DocQCLD>(entity =>
            {
                entity.ToTable("DocQCLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Blemish).IsUnicode(false);

                entity.Property(e => e.Brand)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Carat).HasColumnType("decimal(36, 4)");

                entity.Property(e => e.Clarity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colour)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cutting)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cz)
                    .IsUnicode(false)
                    .HasColumnName("CZ");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.FisikKeseluruhan).IsUnicode(false);

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.HargaJualCustomer).HasColumnType("money");

                entity.Property(e => e.IdformResellLd).HasColumnName("IDFormResellLD");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Item)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.JumlahButir).IsUnicode(false);

                entity.Property(e => e.KadarEmas).IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Logo).IsUnicode(false);

                entity.Property(e => e.Merk).IsUnicode(false);

                entity.Property(e => e.NetWeight).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NonCz)
                    .IsUnicode(false)
                    .HasColumnName("NonCZ");

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Qcnama)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QCNama");

                entity.Property(e => e.Sertifikat).IsUnicode(false);

                entity.Property(e => e.Shape)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WarnaEmas).IsUnicode(false);

                entity.HasOne(d => d.StockProductLD_Stone1B)
                    .WithMany(p => p.DocQCLDs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCLD_StockProductLD_Stone1B");
            });

            modelBuilder.Entity<DocQCPG>(entity =>
            {
                entity.ToTable("DocQCPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.FisikKeseluruhan).IsUnicode(false);

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.KadarKaratimeter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KadarLogam).IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Logo).IsUnicode(false);

                entity.Property(e => e.Merk).IsUnicode(false);

                entity.Property(e => e.NetWeight).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Qcnama)
                    .IsUnicode(false)
                    .HasColumnName("QCNama");

                entity.Property(e => e.WarnaEmas).IsUnicode(false);

                entity.HasOne(d => d.StockProductPG)
                    .WithMany(p => p.DocQCPGs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocQCPG_StockProductPG");
            });

            modelBuilder.Entity<DocRepair>(entity =>
            {
                entity.ToTable("DocRepair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.EstimasiHarga).HasColumnType("money");

                entity.Property(e => e.GrossWeightReceive).HasColumnType("money");

                entity.Property(e => e.GrossWeightReceiveOperator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GrossWeightReceiveOperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Idcustomer).HasColumnName("IDCustomer");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdproductTitipan).HasColumnName("IDProductTitipan");

                entity.Property(e => e.Idqc).HasColumnName("IDQC");

                entity.Property(e => e.Idqctitipan).HasColumnName("IDQCTitipan");

                entity.Property(e => e.Idsales).HasColumnName("IDSales");

                entity.Property(e => e.ImgPicture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KodeCustomerLama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.ReceiveNomor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiveNote)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SalesNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglSelesai).HasColumnType("date");

                entity.HasOne(d => d.DataCustomer)
                    .WithMany(p => p.DocRepairs)
                    .HasForeignKey(d => d.Idcustomer)
                    .HasConstraintName("FK_DocRepair_DataCustomer");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.DocRepairs)
                    .HasForeignKey(d => d.Idproduct)
                    .HasConstraintName("FK_DocRepair_StockProductDJ");

                entity.HasOne(d => d.StockProductDJCustomer)
                    .WithMany(p => p.DocRepairs)
                    .HasForeignKey(d => d.IdproductTitipan)
                    .HasConstraintName("FK_DocRepair_StockProductDJCustomer");

                entity.HasOne(d => d.DataSales)
                    .WithMany(p => p.DocRepairs)
                    .HasForeignKey(d => d.Idsales)
                    .HasConstraintName("FK_DocRepair_DataSales");
            });

            modelBuilder.Entity<DocRepair_CharProduct>(entity =>
            {
                entity.ToTable("DocRepair_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.DocRepair_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .HasConstraintName("FK_DocRepair_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.DocRepair_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .HasConstraintName("FK_DocRepair_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.DocRepair_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .HasConstraintName("FK_DocRepair_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.DocRepair)
                    .WithOne(p => p.DocRepair_CharProduct)
                    .HasForeignKey<DocRepair_CharProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocRepair_CharProduct_DocRepair");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.DocRepair_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .HasConstraintName("FK_DocRepair_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.DocRepair_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .HasConstraintName("FK_DocRepair_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.DocRepair_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocRepair_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.DocRepair_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .HasConstraintName("FK_DocRepair_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.DocRepair_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .HasConstraintName("FK_DocRepair_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<DocRepairLog_Stone1A>(entity =>
            {
                entity.ToTable("DocRepairLog_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepairLog_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairLog_Stone1A_DocRepair");
            });

            modelBuilder.Entity<DocRepairLog_Stone1B>(entity =>
            {
                entity.ToTable("DocRepairLog_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepairLog_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairLog_Stone1B_DocRepair");
            });

            modelBuilder.Entity<DocRepairLog_Stone2>(entity =>
            {
                entity.ToTable("DocRepairLog_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepairLog_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairLog_Stone2_DocRepairResult");
            });

            modelBuilder.Entity<DocRepairLog_Stone3>(entity =>
            {
                entity.ToTable("DocRepairLog_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepairLog_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairLog_Stone3_DocRepair");
            });

            modelBuilder.Entity<DocRepairLog_Stone4>(entity =>
            {
                entity.ToTable("DocRepairLog_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepairResult)
                    .WithMany(p => p.DocRepairLog_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairLog_Stone4_DocRepairResult");
            });

            modelBuilder.Entity<DocRepairLog_Stone5>(entity =>
            {
                entity.ToTable("DocRepairLog_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepairLog_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairLog_Stone5_DocRepair");
            });

            modelBuilder.Entity<DocRepair_Repair>(entity =>
            {
                entity.ToTable("DocRepair_Repair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idrepair).HasColumnName("IDRepair");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepair_Repairs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepair_Repair_DocRepair");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepair_Repairs)
                    .HasForeignKey(d => d.Idrepair)
                    .HasConstraintName("FK_DocRepair_Repair_CharProcessRepair");
            });

            modelBuilder.Entity<DocRepairResult>(entity =>
            {
                entity.ToTable("DocRepairResult");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idcustomer).HasColumnName("IDCustomer");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.IdnoteRepair).HasColumnName("IDNoteRepair");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdproductTitipan).HasColumnName("IDProductTitipan");

                entity.Property(e => e.Idsales).HasColumnName("IDSales");

                entity.Property(e => e.IdworkOrder).HasColumnName("IDWorkOrder");

                entity.Property(e => e.ImgPicture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomorTerima)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.SalesNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglSelesai).HasColumnType("date");

                entity.Property(e => e.TotalHarga).HasColumnType("money");

                entity.HasOne(d => d.DataCustomer)
                    .WithMany(p => p.DocRepairResults)
                    .HasForeignKey(d => d.Idcustomer)
                    .HasConstraintName("FK_DocRepairResult_DataCustomer");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.DocRepairResults)
                    .HasForeignKey(d => d.Idproduct)
                    .HasConstraintName("FK_DocRepairResult_StockProductDJ");

                entity.HasOne(d => d.StockProductDJCustomer)
                    .WithMany(p => p.DocRepairResults)
                    .HasForeignKey(d => d.IdproductTitipan)
                    .HasConstraintName("FK_DocRepairResult_StockProductDJCustomer");

                entity.HasOne(d => d.DataSales)
                    .WithMany(p => p.DocRepairResults)
                    .HasForeignKey(d => d.Idsales)
                    .HasConstraintName("FK_DocRepairResult_DataSales");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepairResults)
                    .HasForeignKey(d => d.IdworkOrder)
                    .HasConstraintName("FK_DocRepairResult_DocRepair");
            });

            modelBuilder.Entity<DocRepairResult_CharProduct>(entity =>
            {
                entity.ToTable("DocRepairResult_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiDold)
                    .HasColumnType("money")
                    .HasColumnName("DimensiDOld");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiLold)
                    .HasColumnType("money")
                    .HasColumnName("DimensiLOld");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiPold)
                    .HasColumnType("money")
                    .HasColumnName("DimensiPOld");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.DimensiRold)
                    .HasColumnType("money")
                    .HasColumnName("DimensiROld");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.GrossWeightOld).HasColumnType("money");

                entity.Property(e => e.HargaEmas).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarLogamOld).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.NettoWeightOld).HasColumnType("money");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.Property(e => e.SelisihBerat).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneCaratOld).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneQtyOld).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.Property(e => e.StoneWeightOld).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.DocRepairResult_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .HasConstraintName("FK_DocRepairResult_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.DocRepairResult_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .HasConstraintName("FK_DocRepairResult_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.DocRepairResult_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .HasConstraintName("FK_DocRepairResult_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.DocRepairResult)
                    .WithOne(p => p.DocRepairResult_CharProduct)
                    .HasForeignKey<DocRepairResult_CharProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocRepairResult_CharProduct_DocRepairResult");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.DocRepairResult_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .HasConstraintName("FK_DocRepairResult_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.DocRepairResult_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .HasConstraintName("FK_DocRepairResult_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.DocRepairResult_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocRepairResult_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.DocRepairResult_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .HasConstraintName("FK_DocRepairResult_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.DocRepairResult_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .HasConstraintName("FK_DocRepairResult_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<DocRepairResult_Repair>(entity =>
            {
                entity.ToTable("DocRepairResult_Repair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idrepair).HasColumnName("IDRepair");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.HasOne(d => d.DocRepairResult)
                    .WithMany(p => p.DocRepairResult_Repairs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairResult_Repair_DocRepairResult");

                entity.HasOne(d => d.CharProcessRepair)
                    .WithMany(p => p.DocRepairResult_Repairs)
                    .HasForeignKey(d => d.Idrepair)
                    .HasConstraintName("FK_DocRepairResult_Repair_CharProcessRepair");
            });

            modelBuilder.Entity<DocRepairResult_Stone1A>(entity =>
            {
                entity.ToTable("DocRepairResult_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepairResult)
                    .WithMany(p => p.DocRepairResult_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairResult_Stone1A_DocRepairResult");
            });

            modelBuilder.Entity<DocRepairResult_Stone1B>(entity =>
            {
                entity.ToTable("DocRepairResult_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.StatusTerpasang).HasDefaultValueSql("((1))");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepairResult)
                    .WithMany(p => p.DocRepairResult_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairResult_Stone1B_DocRepairResult");
            });

            modelBuilder.Entity<DocRepairResult_Stone2>(entity =>
            {
                entity.ToTable("DocRepairResult_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepairResult)
                    .WithMany(p => p.DocRepairResult_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairResult_Stone2_DocRepairResult");
            });

            modelBuilder.Entity<DocRepairResult_Stone3>(entity =>
            {
                entity.ToTable("DocRepairResult_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepairResult)
                    .WithMany(p => p.DocRepairResult_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairResult_Stone3_DocRepairResult");
            });

            modelBuilder.Entity<DocRepairResult_Stone4>(entity =>
            {
                entity.ToTable("DocRepairResult_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepairResult)
                    .WithMany(p => p.DocRepairResult_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairResult_Stone4_DocRepairResult");
            });

            modelBuilder.Entity<DocRepairResult_Stone5>(entity =>
            {
                entity.ToTable("DocRepairResult_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepairResult)
                    .WithMany(p => p.DocRepairResult_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairResult_Stone5_DocRepairResult");
            });

            modelBuilder.Entity<DocRepairResult_StoneRepair>(entity =>
            {
                entity.ToTable("DocRepairResult_StoneRepair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepairResult)
                    .WithMany(p => p.DocRepairResult_StoneRepairs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepairResult_StoneRepair_DocRepairResult");

                entity.HasOne(d => d.StoneRepair)
                    .WithMany(p => p.DocRepairResult_StoneRepairs)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocRepairResult_StoneRepair_StoneRepair");
            });

            modelBuilder.Entity<DocRepair_Stone1A>(entity =>
            {
                entity.ToTable("DocRepair_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepair_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepair_Stone1A_DocRepair");
            });

            modelBuilder.Entity<DocRepair_Stone1B>(entity =>
            {
                entity.ToTable("DocRepair_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.StatusTerpasang).HasDefaultValueSql("((1))");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepair_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepair_Stone1B_DocRepair");
            });

            modelBuilder.Entity<DocRepair_Stone2>(entity =>
            {
                entity.ToTable("DocRepair_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepair_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepair_Stone2_DocRepair");
            });

            modelBuilder.Entity<DocRepair_Stone3>(entity =>
            {
                entity.ToTable("DocRepair_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepair_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepair_Stone3_DocRepair");
            });

            modelBuilder.Entity<DocRepair_Stone4>(entity =>
            {
                entity.ToTable("DocRepair_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepair_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepair_Stone4_DocRepair");
            });

            modelBuilder.Entity<DocRepair_Stone5>(entity =>
            {
                entity.ToTable("DocRepair_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepair_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepair_Stone5_DocRepair");
            });

            modelBuilder.Entity<DocRepair_StoneRepair>(entity =>
            {
                entity.ToTable("DocRepair_StoneRepair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepair_StoneRepairs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_DocRepair_StoneRepair_DocRepair");

                entity.HasOne(d => d.DocRepair)
                    .WithMany(p => p.DocRepair_StoneRepairs)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocRepair_StoneRepair_StoneRepair");
            });

            modelBuilder.Entity<DocTitipan>(entity =>
            {
                entity.ToTable("DocTitipan");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idcustomer).HasColumnName("IDCustomer");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idsales).HasColumnName("IDSales");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.SalesNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglSelesai).HasColumnType("date");

                entity.HasOne(d => d.DataCustomer)
                    .WithMany(p => p.DocTitipans)
                    .HasForeignKey(d => d.Idcustomer)
                    .HasConstraintName("FK_DocTitipan_DataCustomer");

                entity.HasOne(d => d.DataSales)
                    .WithMany(p => p.DocTitipans)
                    .HasForeignKey(d => d.Idsales)
                    .HasConstraintName("FK_DocTitipan_DataSales");
            });

            modelBuilder.Entity<DocTitipan_Product>(entity =>
            {
                entity.ToTable("DocTitipan_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IddocQc).HasColumnName("IDDocQC");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdproductTitipan).HasColumnName("IDProductTitipan");

                entity.Property(e => e.ImgPicture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.HasOne(d => d.DocQCDJ)
                    .WithMany(p => p.DocTitipan_Products)
                    .HasForeignKey(d => d.IddocQc)
                    .HasConstraintName("FK_DocTitipan_Product_DocQCDJ");

                entity.HasOne(d => d.DocTitipan)
                    .WithMany(p => p.DocTitipan_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocTitipan_Product_DocTitipan");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.DocTitipan_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .HasConstraintName("FK_DocTitipan_Product_StockProductDJ");

                entity.HasOne(d => d.StockProductDJCustomer)
                    .WithMany(p => p.DocTitipan_Products)
                    .HasForeignKey(d => d.IdproductTitipan)
                    .HasConstraintName("FK_DocTitipan_Product_StockProductDJCustomer");
            });

            modelBuilder.Entity<EDCList>(entity =>
            {
                entity.ToTable("EDCList");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FCFEBRUARI>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FCFEBRUARI");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.NamaCustomer)
                    .HasMaxLength(255)
                    .HasColumnName("NAMA CUSTOMER");

                entity.Property(e => e.No).HasColumnName("NO");

                entity.Property(e => e.NomorSo)
                    .HasMaxLength(255)
                    .HasColumnName("NOMOR SO");

                entity.Property(e => e.NomorSoRevisi)
                    .HasMaxLength(255)
                    .HasColumnName("NOMOR SO REVISI");

                entity.Property(e => e.Tanggal)
                    .HasMaxLength(255)
                    .HasColumnName("TANGGAL");

                entity.Property(e => e.TglRevisi)
                    .HasMaxLength(255)
                    .HasColumnName("TGL REVISI");

                entity.Property(e => e.Toko)
                    .HasMaxLength(255)
                    .HasColumnName("TOKO");
            });

            modelBuilder.Entity<FCMARET>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FCMARET");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.NamaCustomer)
                    .HasMaxLength(255)
                    .HasColumnName("NAMA CUSTOMER");

                entity.Property(e => e.No).HasColumnName("NO");

                entity.Property(e => e.NomorSo)
                    .HasMaxLength(255)
                    .HasColumnName("NOMOR SO");

                entity.Property(e => e.NomorSoRevisi)
                    .HasMaxLength(255)
                    .HasColumnName("NOMOR SO REVISI");

                entity.Property(e => e.Tanggal)
                    .HasMaxLength(255)
                    .HasColumnName("TANGGAL");

                entity.Property(e => e.TglRevisi)
                    .HasMaxLength(255)
                    .HasColumnName("TGL REVISI");

                entity.Property(e => e.Toko)
                    .HasMaxLength(255)
                    .HasColumnName("TOKO");
            });

            modelBuilder.Entity<FontType>(entity =>
            {
                entity.ToTable("FontType");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FormResellLd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FormResellLD");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovedNik)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ApprovedNIK");

                entity.Property(e => e.BeratPerhiasan).HasColumnType("decimal(36, 2)");

                entity.Property(e => e.BeratPerhiasanP).HasColumnType("decimal(36, 2)");

                entity.Property(e => e.Carat).HasColumnType("decimal(36, 4)");

                entity.Property(e => e.CaratP).HasColumnType("decimal(36, 4)");

                entity.Property(e => e.Clarity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClarityP)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colour)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ColourP)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cutting)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CuttingP)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Gia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.Giap)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GIAP");

                entity.Property(e => e.Gram).HasColumnType("decimal(36, 2)");

                entity.Property(e => e.GramP).HasColumnType("decimal(36, 2)");

                entity.Property(e => e.HargaBeliCustomer).HasColumnType("money");

                entity.Property(e => e.HargaJualCustomer).HasColumnType("money");

                entity.Property(e => e.HargaJualCustomerP).HasColumnType("money");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Idcustomer).HasColumnName("IDCustomer");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.IdlokasiP).HasColumnName("IDLokasiP");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Item)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ItemP)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kategori)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KategoriP)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LaserIncription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LaserIncriptionP)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Measurement)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MeasurementP)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNik)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OperatorNIK");

                entity.Property(e => e.Rapaport)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RapaportJual)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RapaportJualP)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RapaportP)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RejectedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RejectedNik)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RejectedNIK");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<ImageDJPrototypeChange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ImageDJPrototypeChange");

                entity.Property(e => e.KodeBaru)
                    .HasMaxLength(255)
                    .HasColumnName("KODE BARU");

                entity.Property(e => e.No).HasColumnName("No#");

                entity.Property(e => e.Plu)
                    .HasMaxLength(255)
                    .HasColumnName("PLU");
            });

            modelBuilder.Entity<IT_ErrorLog>(entity =>
            {
                entity.HasKey(e => e.PkErrorHandlingId)
                    .HasName("PK__IT_Error__520223CB39813D12");

                entity.ToTable("IT_ErrorLog");

                entity.Property(e => e.PkErrorHandlingId).HasColumnName("pkErrorHandlingID");

                entity.Property(e => e.ErrorLine).HasColumnName("Error_Line");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("Error_Message");

                entity.Property(e => e.ErrorNumber).HasColumnName("Error_Number");

                entity.Property(e => e.ErrorProcedure)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Error_Procedure");

                entity.Property(e => e.ErrorSeverity).HasColumnName("Error_Severity");

                entity.Property(e => e.ErrorState)
                    .HasColumnName("Error_State")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.HostName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("Time_Stamp");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<IT_SMS_Blast>(entity =>
            {
                entity.ToTable("IT_SMS_Blast");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ExecuteDateTime).HasColumnType("datetime");

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NoCustomer)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NoDocument)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RequestUrl)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("RequestURL");

                entity.Property(e => e.ResponseDateTime).HasColumnType("datetime");

                entity.Property(e => e.ResponseUrl)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("ResponseURL");

                entity.Property(e => e.Result)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VoidDateTime).HasColumnType("datetime");

                entity.Property(e => e.VoidDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IT_SP_Audit>(entity =>
            {
                entity.ToTable("IT_SP_Audit");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LastTriggerBy)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LastTriggerDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nama)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreProcedure)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TriggerBy)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TriggerDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<JenisKartuKredit>(entity =>
            {
                entity.ToTable("JenisKartuKredit");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KodeKaretCleansing>(entity =>
            {
                entity.ToTable("KodeKaretCleansing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Reject)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RejectReason)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RejectTgl).HasColumnType("datetime");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.KodeKaretCleansings)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretCleansing_CharProductItem");
            });

            modelBuilder.Entity<KodeKaretCleansing_Detail>(entity =>
            {
                entity.ToTable("KodeKaretCleansing_Detail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.ImgPictureBrj)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ImgPictureBRJ");

                entity.Property(e => e.ImgPictureSpk)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ImgPictureSPK");

                entity.Property(e => e.KodeKaret)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKaretRev)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.ProtoNomor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KodeKaret_Detail>(entity =>
            {
                entity.ToTable("KodeKaret_Detail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdkodeKaret).HasColumnName("IDKodeKaret");

                entity.Property(e => e.IdproductOrder).HasColumnName("IDProductOrder");

                entity.Property(e => e.KodeKaretDetail1)
                    .IsUnicode(false)
                    .HasColumnName("KodeKaretDetail");

                entity.Property(e => e.NoSpk)
                    .IsUnicode(false)
                    .HasColumnName("NoSPK");

                entity.HasOne(d => d.KodeKaretDJ)
                    .WithMany(p => p.KodeKaret_Details)
                    .HasForeignKey(d => d.IdkodeKaret)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaret_Detail_KodeKaretDJ");

                entity.HasOne(d => d.ProductOrder)
                    .WithMany(p => p.KodeKaret_Details)
                    .HasForeignKey(d => d.IdproductOrder)
                    .HasConstraintName("FK_KodeKaret_Detail_ProductOrder");
            });

            modelBuilder.Entity<KodeKaretDJ>(entity =>
            {
                entity.ToTable("KodeKaretDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Iddesigner).HasColumnName("IDDesigner");

                entity.Property(e => e.IdproductOrder).HasColumnName("IDProductOrder");

                entity.Property(e => e.Idsegmen).HasColumnName("IDSegmen");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeKaretLama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.KodeKaretDjs)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_KodeKaretDJ_CompanyBrand");

                entity.HasOne(d => d.DataHuman)
                    .WithMany(p => p.KodeKaretDJs)
                    .HasForeignKey(d => d.Iddesigner)
                    .HasConstraintName("FK_KodeKaretDJ_DataHuman");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.KodeKaretDJs)
                    .HasForeignKey(d => d.Idsegmen)
                    .HasConstraintName("FK_KodeKaretDJ_CharProductSegmen");
            });

            modelBuilder.Entity<KodeKaretDJ_CharDesign>(entity =>
            {
                entity.ToTable("KodeKaretDJ_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.KodeKaretDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.KodeKaretDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.KodeKaretDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.KodeKaretDJ)
                    .WithOne(p => p.KodeKaretDJ_CharDesign)
                    .HasForeignKey<KodeKaretDJ_CharDesign>(d => d.Id)
                    .HasConstraintName("FK_KodeKaretDJ_CharDesign_KodeKaretDJ");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.KodeKaretDJ_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.KodeKaretDJ_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<KodeKaretDJ_CharProduct>(entity =>
            {
                entity.ToTable("KodeKaretDJ_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.BebanSusut).HasColumnType("money");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.JlhKomponen1).HasColumnType("money");

                entity.Property(e => e.JlhKomponen2).HasColumnType("money");

                entity.Property(e => e.JlhKomponen3).HasColumnType("money");

                entity.Property(e => e.JlhKomponen4).HasColumnType("money");

                entity.Property(e => e.JlhKomponen5).HasColumnType("money");

                entity.Property(e => e.JlhKomponen6).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.KodeKomponen1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Komponen).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.PoinKomponen).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.KodeKaretDJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.KodeKaretDJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.KodeKaretDJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.KodeKaretDJ)
                    .WithOne(p => p.KodeKaretDJ_CharProduct)
                    .HasForeignKey<KodeKaretDJ_CharProduct>(d => d.Id)
                    .HasConstraintName("FK_KodeKaretDJ_CharProduct_KodeKaretDJ");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.KodeKaretDJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.KodeKaretDJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.KodeKaretDJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.KodeKaretDJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.KodeKaretDJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<KodeKaretDJ_Finishing>(entity =>
            {
                entity.ToTable("KodeKaretDJ_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.KodeKaretDJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretDJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.KodeKaretDJ)
                    .WithMany(p => p.KodeKaretDJ_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_KodeKaretDJ_Finishing_KodeKaretDJ");
            });

            modelBuilder.Entity<KodeKaretDJ_Stone1A>(entity =>
            {
                entity.ToTable("KodeKaretDJ_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.CertificateNumber).HasMaxLength(50);

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.KodeKaretDJ)
                    .WithMany(p => p.KodeKaretDJ_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_KodeKaretDJ_Stone1A_KodeKaretDJ");
            });

            modelBuilder.Entity<KodeKaretDJ_Stone1B>(entity =>
            {
                entity.ToTable("KodeKaretDJ_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.KodeKaretDJ)
                    .WithMany(p => p.KodeKaretDJ_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_KodeKaretDJ_Stone1B_KodeKaretDJ");
            });

            modelBuilder.Entity<KodeKaretDJ_Stone2>(entity =>
            {
                entity.ToTable("KodeKaretDJ_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.KodeKaretDJ)
                    .WithMany(p => p.KodeKaretDJ_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_KodeKaretDJ_Stone2_KodeKaretDJ");
            });

            modelBuilder.Entity<KodeKaretDJ_Stone3>(entity =>
            {
                entity.ToTable("KodeKaretDJ_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Gia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.KodeKaretDJ)
                    .WithMany(p => p.KodeKaretDJ_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_KodeKaretDJ_Stone3_KodeKaretDJ");
            });

            modelBuilder.Entity<KodeKaretDJ_Stone4>(entity =>
            {
                entity.ToTable("KodeKaretDJ_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.KodeKaretDJ)
                    .WithMany(p => p.KodeKaretDJ_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_KodeKaretDJ_Stone4_KodeKaretDJ");
            });

            modelBuilder.Entity<KodeKaretDJ_Stone5>(entity =>
            {
                entity.ToTable("KodeKaretDJ_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.KodeKaretDJ)
                    .WithMany(p => p.KodeKaretDJ_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_KodeKaretDJ_Stone5_KodeKaretDJ");
            });

            modelBuilder.Entity<KodeKaretGJ>(entity =>
            {
                entity.ToTable("KodeKaretGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Iddesigner).HasColumnName("IDDesigner");

                entity.Property(e => e.IdproductOrder).HasColumnName("IDProductOrder");

                entity.Property(e => e.Idsegmen).HasColumnName("IDSegmen");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeKaretLama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.KodeKaretGjs)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_KodeKaretGJ_CompanyBrand");

                entity.HasOne(d => d.DataHuman)
                    .WithMany(p => p.KodeKaretGJs)
                    .HasForeignKey(d => d.Iddesigner)
                    .HasConstraintName("FK_KodeKaretGJ_DataHuman");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.KodeKaretGJs)
                    .HasForeignKey(d => d.Idsegmen)
                    .HasConstraintName("FK_KodeKaretGJ_CharProductSegmen");
            });

            modelBuilder.Entity<KodeKaretGJ_CharDesign>(entity =>
            {
                entity.ToTable("KodeKaretGJ_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.KodeKaretGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.KodeKaretGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.KodeKaretGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.KodeKaretGJ)
                    .WithOne(p => p.KodeKaretGJ_CharDesign)
                    .HasForeignKey<KodeKaretGJ_CharDesign>(d => d.Id)
                    .HasConstraintName("FK_KodeKaretGJ_CharDesign_KodeKaretGJ");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.KodeKaretGJ_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.KodeKaretGJ_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<KodeKaretGJ_CharProduct>(entity =>
            {
                entity.ToTable("KodeKaretGJ_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.BebanSusut).HasColumnType("money");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.JlhKomponen1).HasColumnType("money");

                entity.Property(e => e.JlhKomponen2).HasColumnType("money");

                entity.Property(e => e.JlhKomponen3).HasColumnType("money");

                entity.Property(e => e.JlhKomponen4).HasColumnType("money");

                entity.Property(e => e.JlhKomponen5).HasColumnType("money");

                entity.Property(e => e.JlhKomponen6).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.KodeKomponen1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Komponen).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.PoinKomponen).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.KodeKaretGJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.KodeKaretGJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.KodeKaretGJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.KodeKaretGJ)
                    .WithOne(p => p.KodeKaretGJ_CharProduct)
                    .HasForeignKey<KodeKaretGJ_CharProduct>(d => d.Id)
                    .HasConstraintName("FK_KodeKaretGJ_CharProduct_KodeKaretGJ");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.KodeKaretGJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.KodeKaretGJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.KodeKaretGJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.KodeKaretGJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.KodeKaretGJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<KodeKaretGJ_Detail>(entity =>
            {
                entity.ToTable("KodeKaretGJ_Detail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdkodeKaret).HasColumnName("IDKodeKaret");

                entity.Property(e => e.IdproductOrder).HasColumnName("IDProductOrder");

                entity.Property(e => e.KodeKaretDetail).IsUnicode(false);

                entity.Property(e => e.NoSpk)
                    .IsUnicode(false)
                    .HasColumnName("NoSPK");

                entity.HasOne(d => d.KodeKaretGJ)
                    .WithMany(p => p.KodeKaretGJ_Details)
                    .HasForeignKey(d => d.IdkodeKaret)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_Detail_KodeKaretGJ");

                entity.HasOne(d => d.ProductOrderGJ)
                    .WithMany(p => p.KodeKaretGJ_Details)
                    .HasForeignKey(d => d.IdproductOrder)
                    .HasConstraintName("FK_KodeKaretGJ_Detail_ProductOrderGJ");
            });

            modelBuilder.Entity<KodeKaretGJ_Finishing>(entity =>
            {
                entity.ToTable("KodeKaretGJ_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.KodeKaretGJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KodeKaretGJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.KodeKaretGJ)
                    .WithMany(p => p.KodeKaretGJ_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_KodeKaretGJ_Finishing_KodeKaretGJ");
            });

            modelBuilder.Entity<LetterWR>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LetterWR");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdsalesReceiptDppo).HasColumnName("IDSalesReceiptDPPO");

                entity.Property(e => e.Letter).HasMaxLength(100);
            });

            modelBuilder.Entity<ListUploadEDC>(entity =>
            {
                entity.ToTable("ListUploadEDC");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idbank).HasColumnName("IDBank");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Keterangan).HasMaxLength(500);

                entity.Property(e => e.Mid).HasColumnName("MID");

                entity.Property(e => e.Nominal).HasColumnType("money");

                entity.Property(e => e.NomorEdc)
                    .HasMaxLength(100)
                    .HasColumnName("NomorEDC");

                entity.Property(e => e.NomorSo)
                    .HasMaxLength(100)
                    .HasColumnName("NomorSO");

                entity.Property(e => e.Operator).HasMaxLength(100);

                entity.Property(e => e.StatusPostGl).HasColumnName("StatusPostGL");

                entity.Property(e => e.TanggalCair).HasColumnType("date");

                entity.Property(e => e.TanggalUpdate).HasColumnType("datetime");

                entity.Property(e => e.TanggalUpload).HasColumnType("datetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(100);
            });

            modelBuilder.Entity<LocExhibition>(entity =>
            {
                entity.ToTable("LocExhibition");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idgroup).HasColumnName("IDGroup");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.IsUsePpn)
                    .HasColumnName("IsUsePPN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Kode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.LocExhibitions)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocExhibition_CompanyBrand");

                entity.HasOne(d => d.LocExhibitionGroup)
                    .WithMany(p => p.LocExhibitions)
                    .HasForeignKey(d => d.Idgroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocExhibition_LocExhibitionGroup");
            });

            modelBuilder.Entity<LocExhibition_AllBrand>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LocExhibition_AllBrand");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idgroup).HasColumnName("IDGroup");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Kode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocGroup)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocExhibition_AllBrand_CompanyBrand");
            });

            modelBuilder.Entity<LocExhibitionGroup>(entity =>
            {
                entity.ToTable("LocExhibitionGroup");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<LocOutlet>(entity =>
            {
                entity.ToTable("LocOutlet");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idgroup).HasColumnName("IDGroup");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.IsUsePpn)
                    .HasColumnName("IsUsePPN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Kode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.LocOutlets)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocOutlet_CompanyBrand");

                entity.HasOne(d => d.LocOutletGroup)
                    .WithMany(p => p.LocOutlets)
                    .HasForeignKey(d => d.Idgroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocOutlet_LocOutletGroup");
            });

            modelBuilder.Entity<LocOutlet_AllBrand>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LocOutlet_AllBrand");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idgroup).HasColumnName("IDGroup");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Kode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocGroup)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocOutlet_AllBrand_CompanyBrand");
            });

            modelBuilder.Entity<LocOutletGroup>(entity =>
            {
                entity.ToTable("LocOutletGroup");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<LocWarehouse>(entity =>
            {
                entity.ToTable("LocWarehouse");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idgroup).HasColumnName("IDGroup");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.LocWarehouses)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocWarehouse_CompanyBrand");

                entity.HasOne(d => d.LocWarehouseGroup)
                    .WithMany(p => p.LocWarehouses)
                    .HasForeignKey(d => d.Idgroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocWarehouse_LocWarehouseGroup");
            });

            modelBuilder.Entity<LocWarehouse_AllBrand>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LocWarehouse_AllBrand");

                entity.Property(e => e.AddrAlamat).IsUnicode(false);

                entity.Property(e => e.AddrEmail).IsUnicode(false);

                entity.Property(e => e.AddrNoFax).IsUnicode(false);

                entity.Property(e => e.AddrNoTelp).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idgroup).HasColumnName("IDGroup");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LocGroup)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocWarehouse_AllBrand_CompanyBrand");
            });

            modelBuilder.Entity<LocWarehouseGroup>(entity =>
            {
                entity.ToTable("LocWarehouseGroup");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Lokasi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lokasi");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MasterMeltingReason>(entity =>
            {
                entity.ToTable("MasterMeltingReason");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Kode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MasterStatusBarangSPK>(entity =>
            {
                entity.ToTable("MasterStatusBarangSPK");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Kode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MDRRate>(entity =>
            {
                entity.ToTable("MDRRate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idbank).HasColumnName("IDBank");

                entity.Property(e => e.IdjenisKartuKredit)
                    .HasColumnName("IDJenisKartuKredit")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Idprogram).HasColumnName("IDProgram");

                entity.Property(e => e.Mdrrate1)
                    .HasColumnType("money")
                    .HasColumnName("MDRRate");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<MemberTiering>(entity =>
            {
                entity.ToTable("MemberTiering");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.BirthdayRupiah).HasColumnType("money");

                entity.Property(e => e.BirthdayRupiahPending).HasColumnType("money");

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.DiscountPending).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Rupiah).HasColumnType("money");

                entity.Property(e => e.RupiahPending).HasColumnType("money");
            });

            modelBuilder.Entity<MemberTieringLog>(entity =>
            {
                entity.ToTable("MemberTieringLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BirthdayBaru).HasColumnType("money");

                entity.Property(e => e.BirthdayLama).HasColumnType("money");

                entity.Property(e => e.DiscountBaru).HasColumnType("money");

                entity.Property(e => e.DiscountLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.RupiahBaru).HasColumnType("money");

                entity.Property(e => e.RupiahLama).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<NoteRepair>(entity =>
            {
                entity.ToTable("NoteRepair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BalikEmas).HasColumnType("money");

                entity.Property(e => e.BalikEmasIdr)
                    .HasColumnType("money")
                    .HasColumnName("BalikEmasIDR");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.GrandTotalHarga).HasColumnType("money");

                entity.Property(e => e.Idreference).HasColumnName("IDReference");

                entity.Property(e => e.IdworkOrder).HasColumnName("IDWorkOrder");

                entity.Property(e => e.JatahSusut).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NomorKirim)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Susut).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.Property(e => e.TglBerlakuEmas).HasColumnType("datetime");

                entity.Property(e => e.TglBerlakuJatahSusut).HasColumnType("datetime");

                entity.Property(e => e.TotalHargaEmas).HasColumnType("money");

                entity.Property(e => e.TotalHargaJasa).HasColumnType("money");

                entity.Property(e => e.TotalHargaStone).HasColumnType("money");
            });

            modelBuilder.Entity<NoteRepair_CharProduct>(entity =>
            {
                entity.ToTable("NoteRepair_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.NoteRepair)
                    .WithOne(p => p.NoteRepair_CharProduct)
                    .HasForeignKey<NoteRepair_CharProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_CharProduct_NoteRepair");
            });

            modelBuilder.Entity<NoteRepair_Repair>(entity =>
            {
                entity.ToTable("NoteRepair_Repair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idrepair).HasColumnName("IDRepair");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.NoteRepair)
                    .WithMany(p => p.NoteRepair_Repairs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Repair_NoteRepair");

                entity.HasOne(d => d.CharProcessRepair)
                    .WithMany(p => p.NoteRepair_Repairs)
                    .HasForeignKey(d => d.Idrepair)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Repair_CharProcessRepair");
            });

            modelBuilder.Entity<NoteRepair_Stone1A>(entity =>
            {
                entity.ToTable("NoteRepair_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RevisiKeterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RevisiOperator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RevisiOperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.NoteRepair)
                    .WithMany(p => p.NoteRepair_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Stone1A_NoteRepair");

                entity.HasOne(d => d.Stone1A)
                    .WithMany(p => p.NoteRepair_Stone1As)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Stone1A_Stone1A");
            });

            modelBuilder.Entity<NoteRepair_Stone1B>(entity =>
            {
                entity.ToTable("NoteRepair_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RevisiKeterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RevisiOperator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RevisiOperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.StatusTerpasang).HasDefaultValueSql("((1))");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.NoteRepair)
                    .WithMany(p => p.NoteRepair_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Stone1B_NoteRepair");

                entity.HasOne(d => d.Stone1B)
                    .WithMany(p => p.NoteRepair_Stone1Bs)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Stone1B_NoteRepair_Stone1B");
            });

            modelBuilder.Entity<NoteRepair_Stone2>(entity =>
            {
                entity.ToTable("NoteRepair_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RevisiKeterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RevisiOperator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RevisiOperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.NoteRepair)
                    .WithMany(p => p.NoteRepair_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Stone2_NoteRepair");

                entity.HasOne(d => d.Stone2)
                    .WithMany(p => p.NoteRepair_Stone2s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Stone2_Stone2");
            });

            modelBuilder.Entity<NoteRepair_Stone3>(entity =>
            {
                entity.ToTable("NoteRepair_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RevisiKeterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RevisiOperator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RevisiOperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.NoteRepair)
                    .WithMany(p => p.NoteRepair_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Stone3_NoteRepair");

                entity.HasOne(d => d.Stone3)
                    .WithMany(p => p.NoteRepair_Stone3s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Stone3_Stone3");
            });

            modelBuilder.Entity<NoteRepair_Stone4>(entity =>
            {
                entity.ToTable("NoteRepair_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RevisiKeterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RevisiOperator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RevisiOperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.NoteRepair)
                    .WithMany(p => p.NoteRepair_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Stone4_NoteRepair");

                entity.HasOne(d => d.Stone4)
                    .WithMany(p => p.NoteRepair_Stone4s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Stone4_Stone4");
            });

            modelBuilder.Entity<NoteRepair_Stone5>(entity =>
            {
                entity.ToTable("NoteRepair_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RevisiKeterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RevisiOperator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RevisiOperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.NoteRepair)
                    .WithMany(p => p.NoteRepair_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Stone5_NoteRepair");

                entity.HasOne(d => d.Stone5)
                    .WithMany(p => p.NoteRepair_Stone5s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoteRepair_Stone5_Stone5");
            });

            modelBuilder.Entity<Packaging>(entity =>
            {
                entity.ToTable("Packaging");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.ImgPicture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Kode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Satuan)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.Packagings)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Packaging_CompanyBrand");
            });

            modelBuilder.Entity<Parcel101>(entity =>
            {
                entity.ToTable("Parcel101");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel102>(entity =>
            {
                entity.ToTable("Parcel102");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SizeMax).HasColumnType("money");

                entity.Property(e => e.SizeMin).HasColumnType("money");

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel103>(entity =>
            {
                entity.ToTable("Parcel103");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel104>(entity =>
            {
                entity.ToTable("Parcel104");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel105>(entity =>
            {
                entity.ToTable("Parcel105");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel106>(entity =>
            {
                entity.ToTable("Parcel106");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsBranded).HasDefaultValueSql("((1))");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel107>(entity =>
            {
                entity.ToTable("Parcel107");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel201>(entity =>
            {
                entity.ToTable("Parcel201");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel202>(entity =>
            {
                entity.ToTable("Parcel202");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel203>(entity =>
            {
                entity.ToTable("Parcel203");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SizeMax).HasColumnType("money");

                entity.Property(e => e.SizeMin).HasColumnType("money");

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel204>(entity =>
            {
                entity.ToTable("Parcel204");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel205>(entity =>
            {
                entity.ToTable("Parcel205");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel206>(entity =>
            {
                entity.ToTable("Parcel206");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel207>(entity =>
            {
                entity.ToTable("Parcel207");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel301>(entity =>
            {
                entity.ToTable("Parcel301");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel302>(entity =>
            {
                entity.ToTable("Parcel302");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel303>(entity =>
            {
                entity.ToTable("Parcel303");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SizeMax).HasColumnType("money");

                entity.Property(e => e.SizeMin).HasColumnType("money");

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel304>(entity =>
            {
                entity.ToTable("Parcel304");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel305>(entity =>
            {
                entity.ToTable("Parcel305");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeGrade)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel306>(entity =>
            {
                entity.ToTable("Parcel306");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel307>(entity =>
            {
                entity.ToTable("Parcel307");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel308>(entity =>
            {
                entity.ToTable("Parcel308");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel309>(entity =>
            {
                entity.ToTable("Parcel309");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel310>(entity =>
            {
                entity.ToTable("Parcel310");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel311>(entity =>
            {
                entity.ToTable("Parcel311");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel312>(entity =>
            {
                entity.ToTable("Parcel312");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel401>(entity =>
            {
                entity.ToTable("Parcel401");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel402>(entity =>
            {
                entity.ToTable("Parcel402");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel403>(entity =>
            {
                entity.ToTable("Parcel403");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SizeMax).HasColumnType("money");

                entity.Property(e => e.SizeMin).HasColumnType("money");

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel501>(entity =>
            {
                entity.ToTable("Parcel501");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel502>(entity =>
            {
                entity.ToTable("Parcel502");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel503>(entity =>
            {
                entity.ToTable("Parcel503");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel504>(entity =>
            {
                entity.ToTable("Parcel504");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel505>(entity =>
            {
                entity.ToTable("Parcel505");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel506>(entity =>
            {
                entity.ToTable("Parcel506");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel507>(entity =>
            {
                entity.ToTable("Parcel507");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel508>(entity =>
            {
                entity.ToTable("Parcel508");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Parcel509>(entity =>
            {
                entity.ToTable("Parcel509");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<ParcelRepair01>(entity =>
            {
                entity.ToTable("ParcelRepair01");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<ParcelRepair02>(entity =>
            {
                entity.ToTable("ParcelRepair02");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SizeMax).HasColumnType("money");

                entity.Property(e => e.SizeMin).HasColumnType("money");

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<PaymentType>(entity =>
            {
                entity.ToTable("PaymentType");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLUFrankValentine>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLUFrankValentine");

                entity.Property(e => e.Brand)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLUPromoValentineDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLUPromoValentineDay");

                entity.Property(e => e.Brand)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Nomor)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.Property(e => e.TglEnd).HasColumnType("datetime");

                entity.Property(e => e.TglStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<PointRedeem>(entity =>
            {
                entity.ToTable("PointRedeem");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Point).HasColumnType("money");

                entity.Property(e => e.PointPending).HasColumnType("money");

                entity.Property(e => e.Rupiah).HasColumnType("money");

                entity.Property(e => e.RupiahPending).HasColumnType("money");
            });

            modelBuilder.Entity<PointRewardDJ>(entity =>
            {
                entity.ToTable("PointRewardDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idcategory).HasColumnName("IDCategory");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Rupiah).HasColumnType("money");

                entity.Property(e => e.RupiahPending).HasColumnType("money");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.PointRewardDJs)
                    .HasForeignKey(d => d.Idcategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PointRewardDJ_CharProductCategory");
            });

            modelBuilder.Entity<PointRewardGJ>(entity =>
            {
                entity.ToTable("PointRewardGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idcategory).HasColumnName("IDCategory");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Rupiah).HasColumnType("money");

                entity.Property(e => e.RupiahPending).HasColumnType("money");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.PointRewardGJs)
                    .HasForeignKey(d => d.Idcategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PointRewardGJ_CharProductCategory");
            });

            modelBuilder.Entity<PointRewardLogDJ>(entity =>
            {
                entity.ToTable("PointRewardLogDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.RupiahBaru).HasColumnType("money");

                entity.Property(e => e.RupiahLama).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.PointRewardDJ)
                    .WithMany(p => p.PointRewardLogDJs)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_PointRewardLogDJ_PointRewardDJ");
            });

            modelBuilder.Entity<PointRewardLogGJ>(entity =>
            {
                entity.ToTable("PointRewardLogGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.RupiahBaru).HasColumnType("money");

                entity.Property(e => e.RupiahLama).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.PointRewardGJ)
                    .WithMany(p => p.PointRewardLogGJs)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_PointRewardLogGJ_PointRewardGJ");
            });

            modelBuilder.Entity<PricingLogFS>(entity =>
            {
                entity.ToTable("PricingLogFS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BiayaBaru).HasColumnType("money");

                entity.Property(e => e.BiayaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.PricingTableFS)
                    .WithMany(p => p.PricingLogFSes)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_PricingLogFS_PricingTableFS");
            });

            modelBuilder.Entity<PricingLogFB>(entity =>
            {
                entity.ToTable("PricingLogFB");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.HargaCogsbaru)
                    .HasColumnType("money")
                    .HasColumnName("HargaCOGSBaru");

                entity.Property(e => e.HargaCogslama)
                    .HasColumnType("money")
                    .HasColumnName("HargaCOGSLama");

                entity.Property(e => e.HargaJualBaru).HasColumnType("money");

                entity.Property(e => e.HargaJualLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");
            });

            modelBuilder.Entity<PricingLogFF>(entity =>
            {
                entity.ToTable("PricingLogFF");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BiayaBaru).HasColumnType("money");

                entity.Property(e => e.BiayaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.PricingTableFF)
                    .WithMany(p => p.PricingLogFFs)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_PricingLogFF_PricingTableFF");
            });

            modelBuilder.Entity<PricingLogFM>(entity =>
            {
                entity.ToTable("PricingLogFM");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BiayaBaru).HasColumnType("money");

                entity.Property(e => e.BiayaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.PembagiBaru).HasColumnType("money");

                entity.Property(e => e.PembagiLama).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.PricingTableFM)
                    .WithMany(p => p.PricingLogFMs)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_PricingLogFM_PricingTableFM");
            });

            modelBuilder.Entity<PricingLogMU>(entity =>
            {
                entity.ToTable("PricingLogMU");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.PersenBaru).HasColumnType("money");

                entity.Property(e => e.PersenLama).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.PricingTableMU)
                    .WithMany(p => p.PricingLogMUs)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_PricingLogMU_PricingTableMU");
            });

            modelBuilder.Entity<PricingLogRepair>(entity =>
            {
                entity.ToTable("PricingLogRepair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BiayaBaru).HasColumnType("money");

                entity.Property(e => e.BiayaLama).HasColumnType("money");

                entity.Property(e => e.CostingBaru).HasColumnType("money");

                entity.Property(e => e.CostingLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.PricingTableRepair)
                    .WithMany(p => p.PricingLogRepairs)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_PricingLogRepair_PricingTableRepair");
            });

            modelBuilder.Entity<PricingLogResellMU>(entity =>
            {
                entity.ToTable("PricingLogResellMU");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.PersenBaru).HasColumnType("money");

                entity.Property(e => e.PersenLama).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.PricingTableResellMU)
                    .WithMany(p => p.PricingLogResellMUs)
                    .HasForeignKey(d => d.Idmaster)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PricingLogResellMU_PricingTableResellMU");
            });

            modelBuilder.Entity<PricingLogSS>(entity =>
            {
                entity.ToTable("PricingLogSS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.MinimumBaru).HasColumnType("money");

                entity.Property(e => e.MinimumLama).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.PricingTableSS)
                    .WithMany(p => p.PricingLogSSes)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_PricingLogSS_PricingTableSS");
            });

            modelBuilder.Entity<PricingLogTG>(entity =>
            {
                entity.ToTable("PricingLogTG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.PricingTableTG)
                    .WithMany(p => p.PricingLogTGs)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_PricingLogTG_PricingTableTG");
            });

            modelBuilder.Entity<PricingLogUS>(entity =>
            {
                entity.ToTable("PricingLogUS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.PricingTableUS)
                    .WithMany(p => p.PricingLogUSes)
                    .HasForeignKey(d => d.Idmaster)
                    .HasConstraintName("FK_PricingLogUS_PricingTableUS");
            });

            modelBuilder.Entity<PricingTableFS>(entity =>
            {
                entity.ToTable("PricingTableFS");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaPending).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<PricingTableFB>(entity =>
            {
                entity.ToTable("PricingTableFB");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.HargaCogs)
                    .HasColumnType("money")
                    .HasColumnName("HargaCOGS");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<PricingTableFF>(entity =>
            {
                entity.ToTable("PricingTableFF");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaPending).HasColumnType("money");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Iditem).HasColumnName("IDItem");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.PricingTableFFs)
                    .HasForeignKey(d => d.Idfinishing)
                    .HasConstraintName("FK_PricingTableFF_CharProcessFinishing");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.PricingTableFFs)
                    .HasForeignKey(d => d.Iditem)
                    .HasConstraintName("FK_PricingTableFF_CharProductItem");
            });

            modelBuilder.Entity<PricingTableFM>(entity =>
            {
                entity.ToTable("PricingTableFM");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaPending).HasColumnType("money");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idcons).HasColumnName("IDCons");

                entity.Property(e => e.Iditem).HasColumnName("IDItem");

                entity.Property(e => e.InputNo)
                    .HasColumnType("money")
                    .HasColumnName("InputNO");

                entity.Property(e => e.InputRo)
                    .HasColumnType("money")
                    .HasColumnName("InputRO");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Pembagi).HasColumnType("money");

                entity.Property(e => e.PembagiR).HasColumnType("money");

                entity.Property(e => e.PendingNo)
                    .HasColumnType("money")
                    .HasColumnName("PendingNO");

                entity.Property(e => e.PendingPembagi).HasColumnType("money");

                entity.Property(e => e.PendingPembagiR).HasColumnType("money");

                entity.Property(e => e.PendingRo)
                    .HasColumnType("money")
                    .HasColumnName("PendingRO");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.PricingTableFMs)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_PricingTableFM_CompanyBrand");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.PricingTableFMs)
                    .HasForeignKey(d => d.Idcons)
                    .HasConstraintName("FK_PricingTableFM_CharProcessCons");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.PricingTableFMs)
                    .HasForeignKey(d => d.Iditem)
                    .HasConstraintName("FK_PricingTableFM_CharProductItem");
            });

            modelBuilder.Entity<PricingTableMU>(entity =>
            {
                entity.ToTable("PricingTableMU");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idcategory).HasColumnName("IDCategory");

                entity.Property(e => e.Iddist).HasColumnName("IDDist");

                entity.Property(e => e.Idlevel).HasColumnName("IDLevel");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Persen).HasColumnType("money");

                entity.Property(e => e.PersenPending).HasColumnType("money");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.PricingTableMUs)
                    .HasForeignKey(d => d.Idcategory)
                    .HasConstraintName("FK_PricingTableMU_CharProductCategory");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.PricingTableMUs)
                    .HasForeignKey(d => d.Iddist)
                    .HasConstraintName("FK_PricingTableMU_CharStoneDist");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.PricingTableMUs)
                    .HasForeignKey(d => d.Idlevel)
                    .HasConstraintName("FK_PricingTableMU_CharProductLevel");
            });

            modelBuilder.Entity<PricingTableRepair>(entity =>
            {
                entity.ToTable("PricingTableRepair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaPending).HasColumnType("money");

                entity.Property(e => e.Costing).HasColumnType("money");

                entity.Property(e => e.CostingPending).HasColumnType("money");

                entity.Property(e => e.Idrepair).HasColumnName("IDRepair");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.CharProcessRepair)
                    .WithMany(p => p.PricingTableRepairs)
                    .HasForeignKey(d => d.Idrepair)
                    .HasConstraintName("FK_PricingTableRepair_CharProcessRepair");
            });

            modelBuilder.Entity<PricingTableResellMU>(entity =>
            {
                entity.ToTable("PricingTableResellMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Persen).HasColumnType("money");

                entity.Property(e => e.PersenPending).HasColumnType("money");
            });

            modelBuilder.Entity<PricingTableRO>(entity =>
            {
                entity.ToTable("PricingTableRO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.KelasHarga)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MinValue).HasColumnType("money");

                entity.Property(e => e.OngkosRo)
                    .HasColumnType("money")
                    .HasColumnName("OngkosRO");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<PricingTableSS>(entity =>
            {
                entity.ToTable("PricingTableSS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idcategory).HasColumnName("IDCategory");

                entity.Property(e => e.Iddist).HasColumnName("IDDist");

                entity.Property(e => e.Idlevel).HasColumnName("IDLevel");

                entity.Property(e => e.Idsegmen).HasColumnName("IDSegmen");

                entity.Property(e => e.Minimum).HasColumnType("money");

                entity.Property(e => e.MinimumPending).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.PricingTableSSes)
                    .HasForeignKey(d => d.Idcategory)
                    .HasConstraintName("FK_PricingTableSS_CharProductCategory");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.PricingTableSSes)
                    .HasForeignKey(d => d.Iddist)
                    .HasConstraintName("FK_PricingTableSS_CharStoneDist");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.PricingTableSSes)
                    .HasForeignKey(d => d.Idlevel)
                    .HasConstraintName("FK_PricingTableSS_CharProductLevel");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.PricingTableSSes)
                    .HasForeignKey(d => d.Idsegmen)
                    .HasConstraintName("FK_PricingTableSS_CharProductSegmen");
            });

            modelBuilder.Entity<PricingTableTG>(entity =>
            {
                entity.ToTable("PricingTableTG");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<PricingTableUS>(entity =>
            {
                entity.ToTable("PricingTableUS");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<PrintCertificate>(entity =>
            {
                entity.ToTable("PrintCertificate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.Property(e => e.TglExpire).HasColumnType("datetime");
            });

            modelBuilder.Entity<PrintCertificate_Detail>(entity =>
            {
                entity.ToTable("PrintCertificate_Detail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Plu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PLU")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Url)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("URL");

                entity.HasOne(d => d.PrintCertificate)
                    .WithMany(p => p.PrintCertificate_Details)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_PrintCertificate_Detail_PrintCertificate");
            });

            modelBuilder.Entity<ProductDesign>(entity =>
            {
                entity.ToTable("ProductDesign");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DesignKode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.HumanDesignerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Iddesigner).HasColumnName("IDDesigner");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusSpk).HasColumnName("StatusSPK");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.DataHuman)
                    .WithMany(p => p.ProductDesigns)
                    .HasForeignKey(d => d.Iddesigner)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_DataHuman");
            });

            modelBuilder.Entity<ProductDesign_CharDesign>(entity =>
            {
                entity.ToTable("ProductDesign_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.ProductDesign_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.ProductDesign_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.ProductDesign_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.ProductDesign)
                    .WithOne(p => p.ProductDesign_CharDesign)
                    .HasForeignKey<ProductDesign_CharDesign>(d => d.Id)
                    .HasConstraintName("FK_ProductDesign_CharDesign_ProductDesign");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.ProductDesign_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.ProductDesign_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<ProductDesign_CharProduct>(entity =>
            {
                entity.ToTable("ProductDesign_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.ProductDesign_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.ProductDesign_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.ProductDesign_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.ProductDesign)
                    .WithOne(p => p.ProductDesign_CharProduct)
                    .HasForeignKey<ProductDesign_CharProduct>(d => d.Id)
                    .HasConstraintName("FK_ProductDesign_CharProduct_ProductDesign");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.ProductDesign_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.ProductDesign_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.ProductDesign_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.ProductDesign_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.ProductDesign_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<ProductDesign_Finishing>(entity =>
            {
                entity.ToTable("ProductDesign_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.ProductDesign_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.ProductDesign)
                    .WithMany(p => p.ProductDesign_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductDesign_Finishing_ProductDesign");
            });

            modelBuilder.Entity<ProductDesignGJ>(entity =>
            {
                entity.ToTable("ProductDesignGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DesignKode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.HumanDesignerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Iddesigner).HasColumnName("IDDesigner");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusSpk).HasColumnName("StatusSPK");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.DataHuman)
                    .WithMany(p => p.ProductDesignGJs)
                    .HasForeignKey(d => d.Iddesigner)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_DataHuman");
            });

            modelBuilder.Entity<ProductDesignGJ_CharDesign>(entity =>
            {
                entity.ToTable("ProductDesignGJ_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.ProductDesignGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.ProductDesignGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.ProductDesignGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.ProductDesignGJ)
                    .WithOne(p => p.ProductDesignGJ_CharDesign)
                    .HasForeignKey<ProductDesignGJ_CharDesign>(d => d.Id)
                    .HasConstraintName("FK_ProductDesignGJ_CharDesign_ProductDesignGJ");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.ProductDesignGJ_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.ProductDesignGJ_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<ProductDesignGJ_CharProduct>(entity =>
            {
                entity.ToTable("ProductDesignGJ_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.ProductDesignGJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.ProductDesignGJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.ProductDesignGJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.ProductDesignGJ)
                    .WithOne(p => p.ProductDesignGJ_CharProduct)
                    .HasForeignKey<ProductDesignGJ_CharProduct>(d => d.Id)
                    .HasConstraintName("FK_ProductDesignGJ_CharProduct_ProductDesignGJ");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.ProductDesignGJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.ProductDesignGJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.ProductDesignGJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.ProductDesignGJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.ProductDesignGJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<ProductDesignGJ_Finishing>(entity =>
            {
                entity.ToTable("ProductDesignGJ_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.ProductDesignGJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.ProductDesignGJ)
                    .WithMany(p => p.ProductDesignGJ_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductDesignGJ_Finishing_ProductDesignGJ");
            });

            modelBuilder.Entity<ProductDesignGJ_PricingBiaya>(entity =>
            {
                entity.ToTable("ProductDesignGJ_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.ProductDesignGJ)
                    .WithOne(p => p.ProductDesignGJ_PricingBiaya)
                    .HasForeignKey<ProductDesignGJ_PricingBiaya>(d => d.Id)
                    .HasConstraintName("FK_ProductDesignGJ_PricingBiaya_ProductDesignGJ");
            });

            modelBuilder.Entity<ProductDesignGJ_PricingMU>(entity =>
            {
                entity.ToTable("ProductDesignGJ_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ProductDesignGJ)
                    .WithOne(p => p.ProductDesignGJ_PricingMU)
                    .HasForeignKey<ProductDesignGJ_PricingMU>(d => d.Id)
                    .HasConstraintName("FK_ProductDesignGJ_PricingMU_ProductDesignGJ");
            });

            modelBuilder.Entity<ProductDesignGJ_PricingProduct>(entity =>
            {
                entity.ToTable("ProductDesignGJ_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.ProductDesignGJ)
                    .WithOne(p => p.ProductDesignGJ_PricingProduct)
                    .HasForeignKey<ProductDesignGJ_PricingProduct>(d => d.Id)
                    .HasConstraintName("FK_ProductDesignGJ_PricingProduct_ProductDesignGJ");
            });

            modelBuilder.Entity<ProductDesignGJ_PricingSegmen>(entity =>
            {
                entity.ToTable("ProductDesignGJ_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductDesignGJ)
                    .WithOne(p => p.ProductDesignGJ_PricingSegmen)
                    .HasForeignKey<ProductDesignGJ_PricingSegmen>(d => d.Id)
                    .HasConstraintName("FK_ProductDesignGJ_PricingSegmen_ProductDesignGJ");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.ProductDesignGJ_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesignGJ_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<ProductDesign_PricingBiaya>(entity =>
            {
                entity.ToTable("ProductDesign_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.ProductDesign)
                    .WithOne(p => p.ProductDesign_PricingBiaya)
                    .HasForeignKey<ProductDesign_PricingBiaya>(d => d.Id)
                    .HasConstraintName("FK_ProductDesign_PricingBiaya_ProductDesign");
            });

            modelBuilder.Entity<ProductDesign_PricingMU>(entity =>
            {
                entity.ToTable("ProductDesign_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ProductDesign)
                    .WithOne(p => p.ProductDesign_PricingMU)
                    .HasForeignKey<ProductDesign_PricingMU>(d => d.Id)
                    .HasConstraintName("FK_ProductDesign_PricingMU_ProductDesign");
            });

            modelBuilder.Entity<ProductDesign_PricingProduct>(entity =>
            {
                entity.ToTable("ProductDesign_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.ProductDesign)
                    .WithOne(p => p.ProductDesign_PricingProduct)
                    .HasForeignKey<ProductDesign_PricingProduct>(d => d.Id)
                    .HasConstraintName("FK_ProductDesign_PricingProduct_ProductDesign");
            });

            modelBuilder.Entity<ProductDesign_PricingSegmen>(entity =>
            {
                entity.ToTable("ProductDesign_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductDesign)
                    .WithOne(p => p.ProductDesign_PricingSegmen)
                    .HasForeignKey<ProductDesign_PricingSegmen>(d => d.Id)
                    .HasConstraintName("FK_ProductDesign_PricingSegmen_ProductDesign");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.ProductDesign_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDesign_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<ProductDesign_Stone1A>(entity =>
            {
                entity.ToTable("ProductDesign_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.IdformNavigation)
                    .WithMany(p => p.ProductDesign_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductDesign_Stone1A_ProductDesign");
            });

            modelBuilder.Entity<ProductDesign_Stone1B>(entity =>
            {
                entity.ToTable("ProductDesign_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductDesign)
                    .WithMany(p => p.ProductDesign_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductDesign_Stone1B_ProductDesign");
            });

            modelBuilder.Entity<ProductDesign_Stone2>(entity =>
            {
                entity.ToTable("ProductDesign_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductDesign)
                    .WithMany(p => p.ProductDesign_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductDesign_Stone2_ProductDesign");
            });

            modelBuilder.Entity<ProductDesign_Stone3>(entity =>
            {
                entity.ToTable("ProductDesign_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductDesign)
                    .WithMany(p => p.ProductDesign_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductDesign_Stone3_ProductDesign");
            });

            modelBuilder.Entity<ProductDesign_Stone4>(entity =>
            {
                entity.ToTable("ProductDesign_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductDesign)
                    .WithMany(p => p.ProductDesign_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductDesign_Stone4_ProductDesign");
            });

            modelBuilder.Entity<ProductDesign_Stone5>(entity =>
            {
                entity.ToTable("ProductDesign_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductDesign)
                    .WithMany(p => p.ProductDesign_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductDesign_Stone5_ProductDesign");
            });

            modelBuilder.Entity<ProductOrder>(entity =>
            {
                entity.ToTable("ProductOrder");

                entity.HasIndex(e => e.NoSpk, "IX_ProductOrder_NoSPK")
                    .IsUnique()
                    .HasFilter("([NoSPK] IS NOT NULL)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalGm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ApprovalGM");

                entity.Property(e => e.ApprovalGmtanggal)
                    .HasColumnType("datetime")
                    .HasColumnName("ApprovalGMTanggal");

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DesignKode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.HumanDesignerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Iddesigner).HasColumnName("IDDesigner");

                entity.Property(e => e.Idfps).HasColumnName("IDFPS");

                entity.Property(e => e.IdkodeKaret).HasColumnName("IDKodeKaret");

                entity.Property(e => e.IdproductDesign).HasColumnName("IDProductDesign");

                entity.Property(e => e.Idsegmen).HasColumnName("IDSegmen");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.JenisSpk).HasColumnName("JenisSPK");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeKaret)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKaretLama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKaretRepeat).HasDefaultValueSql("((0))");

                entity.Property(e => e.NoInvoice)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoLdkp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoLDKP");

                entity.Property(e => e.NoPo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoPO");

                entity.Property(e => e.NoSpk)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoSPK");

                entity.Property(e => e.NoTitipan)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestExhibitionNama)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusBarang)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StatusBarangId).HasColumnName("StatusBarangID");

                entity.Property(e => e.StatusBarangKeterangan)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StatusFps).HasColumnName("StatusFPS");

                entity.Property(e => e.TanggalJatuhTempoDj)
                    .HasColumnType("datetime")
                    .HasColumnName("TanggalJatuhTempoDJ");

                entity.Property(e => e.TanggalJatuhTempoKonsumen).HasColumnType("datetime");

                entity.Property(e => e.TanggalJatuhTempoRangka).HasColumnType("datetime");

                entity.Property(e => e.TanggalJatuhTempoSetting).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglLdkp)
                    .HasColumnType("date")
                    .HasColumnName("TglLDKP");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.ProductOrders)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_ProductOrder_CompanyBrand");

                entity.HasOne(d => d.DataHuman)
                    .WithMany(p => p.ProductOrders)
                    .HasForeignKey(d => d.Iddesigner)
                    .HasConstraintName("FK_ProductOrder_DataHuman");

                entity.HasOne(d => d.KodeKaretDJ)
                    .WithMany(p => p.ProductOrders)
                    .HasForeignKey(d => d.IdkodeKaret)
                    .HasConstraintName("FK_ProductOrder_KodeKaretDJ");

                entity.HasOne(d => d.ProductDesign)
                    .WithMany(p => p.ProductOrders)
                    .HasForeignKey(d => d.IdproductDesign)
                    .HasConstraintName("FK_ProductOrder_DesignDJ");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.ProductOrders)
                    .HasForeignKey(d => d.Idsegmen)
                    .HasConstraintName("FK_ProductOrder_CharProductSegmen");
            });

            modelBuilder.Entity<ProductOrder_CharDesign>(entity =>
            {
                entity.ToTable("ProductOrder_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Grafir2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.GrafirType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.ProductOrder_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.ProductOrder_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.ProductOrder_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.ProductOrder)
                    .WithOne(p => p.ProductOrder_CharDesign)
                    .HasForeignKey<ProductOrder_CharDesign>(d => d.Id)
                    .HasConstraintName("FK_ProductOrder_CharDesign_ProductOrder");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.ProductOrder_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.ProductOrder_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<ProductOrder_CharProduct>(entity =>
            {
                entity.ToTable("ProductOrder_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.BebanSusut).HasColumnType("money");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.DimensiR2).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.JlhKomponen1).HasColumnType("money");

                entity.Property(e => e.JlhKomponen2).HasColumnType("money");

                entity.Property(e => e.JlhKomponen3).HasColumnType("money");

                entity.Property(e => e.JlhKomponen4).HasColumnType("money");

                entity.Property(e => e.JlhKomponen5).HasColumnType("money");

                entity.Property(e => e.JlhKomponen6).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.KodeKomponen1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Komponen).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.PoinKomponen).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.ProductOrder_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.ProductOrder_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.ProductOrder_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.ProductOrder)
                    .WithOne(p => p.ProductOrder_CharProduct)
                    .HasForeignKey<ProductOrder_CharProduct>(d => d.Id)
                    .HasConstraintName("FK_ProductOrder_CharProduct_ProductOrder");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.ProductOrder_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.ProductOrder_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.ProductOrder_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.ProductOrder_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.ProductOrder_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<ProductOrder_Costing>(entity =>
            {
                entity.ToTable("ProductOrder_Costing");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Frame).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.OngkosLain).HasColumnType("money");

                entity.Property(e => e.OngkosLainCogs)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGS");

                entity.Property(e => e.Pembagi).HasColumnType("money");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalBiaya).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.ProductOrder)
                    .WithOne(p => p.ProductOrder_Costing)
                    .HasForeignKey<ProductOrder_Costing>(d => d.Id)
                    .HasConstraintName("FK_ProductOrder_Costing_ProductOrder");
            });

            modelBuilder.Entity<ProductOrder_CostingProduct>(entity =>
            {
                entity.ToTable("ProductOrder_CostingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.ProductOrder)
                    .WithOne(p => p.ProductOrder_CostingProduct)
                    .HasForeignKey<ProductOrder_CostingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_CostingProduct_ProductOrder");
            });

            modelBuilder.Entity<ProductOrder_Finishing>(entity =>
            {
                entity.ToTable("ProductOrder_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.ProductOrder_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.ProductOrder)
                    .WithMany(p => p.ProductOrder_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductOrder_Finishing_ProductOrder");
            });

            modelBuilder.Entity<ProductOrderGJ>(entity =>
            {
                entity.ToTable("ProductOrderGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DesignKode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.HumanDesignerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Iddesigner).HasColumnName("IDDesigner");

                entity.Property(e => e.Idfps).HasColumnName("IDFPS");

                entity.Property(e => e.IdkodeKaret).HasColumnName("IDKodeKaret");

                entity.Property(e => e.IdproductDesign).HasColumnName("IDProductDesign");

                entity.Property(e => e.Idsegmen).HasColumnName("IDSegmen");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeKaret)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKaretLama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKaretRepeat).HasDefaultValueSql("((0))");

                entity.Property(e => e.NoInvoice)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoLdkp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoLDKP");

                entity.Property(e => e.NoPo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoPO");

                entity.Property(e => e.NoSpk)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoSPK");

                entity.Property(e => e.NoTitipan)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusBarangId).HasColumnName("StatusBarangID");

                entity.Property(e => e.StatusFps).HasColumnName("StatusFPS");

                entity.Property(e => e.TanggalJatuhTempoDj)
                    .HasColumnType("datetime")
                    .HasColumnName("TanggalJatuhTempoDJ");

                entity.Property(e => e.TanggalJatuhTempoKonsumen).HasColumnType("datetime");

                entity.Property(e => e.TanggalJatuhTempoRangka).HasColumnType("datetime");

                entity.Property(e => e.TanggalJatuhTempoSetting).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.ProductOrderGJs)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_ProductOrderGJ_CompanyBrand");

                entity.HasOne(d => d.DataHuman)
                    .WithMany(p => p.ProductOrderGJs)
                    .HasForeignKey(d => d.Iddesigner)
                    .HasConstraintName("FK_ProductOrderGJ_DataHuman");

                entity.HasOne(d => d.KodeKaretGJ)
                    .WithMany(p => p.ProductOrderGJs)
                    .HasForeignKey(d => d.IdkodeKaret)
                    .HasConstraintName("FK_ProductOrderGJ_KodeKaretDJ");

                entity.HasOne(d => d.ProductDesignGJ)
                    .WithMany(p => p.ProductOrderGJs)
                    .HasForeignKey(d => d.IdproductDesign)
                    .HasConstraintName("FK_ProductOrderGJ_DesignDJ");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.ProductOrderGJs)
                    .HasForeignKey(d => d.Idsegmen)
                    .HasConstraintName("FK_ProductOrderGJ_CharProductSegmen");
            });

            modelBuilder.Entity<ProductOrderGJ_CharDesign>(entity =>
            {
                entity.ToTable("ProductOrderGJ_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.ProductOrderGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.ProductOrderGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.ProductOrderGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.ProductOrderGJ)
                    .WithOne(p => p.ProductOrderGJ_CharDesign)
                    .HasForeignKey<ProductOrderGJ_CharDesign>(d => d.Id)
                    .HasConstraintName("FK_ProductOrderGJ_CharDesign_ProductOrderGJ");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.ProductOrderGJ_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.ProductOrderGJ_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<ProductOrderGJ_CharProduct>(entity =>
            {
                entity.ToTable("ProductOrderGJ_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.BebanSusut).HasColumnType("money");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.JlhKomponen1).HasColumnType("money");

                entity.Property(e => e.JlhKomponen2).HasColumnType("money");

                entity.Property(e => e.JlhKomponen3).HasColumnType("money");

                entity.Property(e => e.JlhKomponen4).HasColumnType("money");

                entity.Property(e => e.JlhKomponen5).HasColumnType("money");

                entity.Property(e => e.JlhKomponen6).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.KodeKomponen1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KodeKomponen6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Komponen).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.PoinKomponen).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.ProductOrderGJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.ProductOrderGJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.ProductOrderGJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.ProductOrderGJ)
                    .WithOne(p => p.ProductOrderGJ_CharProduct)
                    .HasForeignKey<ProductOrderGJ_CharProduct>(d => d.Id)
                    .HasConstraintName("FK_ProductOrderGJ_CharProduct_ProductOrderGJ");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.ProductOrderGJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.ProductOrderGJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.ProductOrderGJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.ProductOrderGJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.ProductOrderGJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<ProductOrderGJ_Finishing>(entity =>
            {
                entity.ToTable("ProductOrderGJ_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.ProductOrderGJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderGJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.ProductOrderGJ)
                    .WithMany(p => p.ProductOrderGJ_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductOrderGJ_Finishing_ProductOrderGJ");
            });

            modelBuilder.Entity<ProductOrder_PricingBiaya>(entity =>
            {
                entity.ToTable("ProductOrder_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.ProductOrder)
                    .WithOne(p => p.ProductOrder_PricingBiaya)
                    .HasForeignKey<ProductOrder_PricingBiaya>(d => d.Id)
                    .HasConstraintName("FK_ProductOrder_PricingBiaya_ProductOrder");
            });

            modelBuilder.Entity<ProductOrder_PricingMU>(entity =>
            {
                entity.ToTable("ProductOrder_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ProductOrder)
                    .WithOne(p => p.ProductOrder_PricingMU)
                    .HasForeignKey<ProductOrder_PricingMU>(d => d.Id)
                    .HasConstraintName("FK_ProductOrder_PricingMU_ProductOrder");
            });

            modelBuilder.Entity<ProductOrder_PricingProduct>(entity =>
            {
                entity.ToTable("ProductOrder_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.ProductOrder)
                    .WithOne(p => p.ProductOrder_PricingProduct)
                    .HasForeignKey<ProductOrder_PricingProduct>(d => d.Id)
                    .HasConstraintName("FK_ProductOrder_PricingProduct_ProductOrder");
            });

            modelBuilder.Entity<ProductOrder_PricingSegmen>(entity =>
            {
                entity.ToTable("ProductOrder_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductOrder)
                    .WithOne(p => p.ProductOrder_PricingSegmen)
                    .HasForeignKey<ProductOrder_PricingSegmen>(d => d.Id)
                    .HasConstraintName("FK_ProductOrder_PricingSegmen_ProductOrder");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.ProductOrder_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<ProductOrder_Stone1A>(entity =>
            {
                entity.ToTable("ProductOrder_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.CertificateNumber).HasMaxLength(50);

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductOrder)
                    .WithMany(p => p.ProductOrder_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductOrder_Stone1A_ProductOrder");
            });

            modelBuilder.Entity<ProductOrder_Stone1B>(entity =>
            {
                entity.ToTable("ProductOrder_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductOrder)
                    .WithMany(p => p.ProductOrder_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductOrder_Stone1B_ProductOrder");
            });

            modelBuilder.Entity<ProductOrder_Stone2>(entity =>
            {
                entity.ToTable("ProductOrder_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductOrder)
                    .WithMany(p => p.ProductOrder_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductOrder_Stone2_ProductOrder");
            });

            modelBuilder.Entity<ProductOrder_Stone3>(entity =>
            {
                entity.ToTable("ProductOrder_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductOrder)
                    .WithMany(p => p.ProductOrder_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductOrder_Stone3_ProductOrder");
            });

            modelBuilder.Entity<ProductOrder_Stone4>(entity =>
            {
                entity.ToTable("ProductOrder_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductOrder)
                    .WithMany(p => p.ProductOrder_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductOrder_Stone4_ProductOrder");
            });

            modelBuilder.Entity<ProductOrder_Stone5>(entity =>
            {
                entity.ToTable("ProductOrder_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.ProductOrder)
                    .WithMany(p => p.ProductOrder_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_ProductOrder_Stone5_ProductOrder");
            });

            modelBuilder.Entity<ProductStoneRequest>(entity =>
            {
                entity.ToTable("ProductStoneRequest");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NomorDokumen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.Property(e => e.TglJatuhTempo).HasColumnType("datetime");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.ProductStoneRequests)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_ProductStoneRequest_CompanyBrand");
            });

            modelBuilder.Entity<ProductStoneRequest_Detail>(entity =>
            {
                entity.ToTable("ProductStoneRequest_Detail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdproductOrder).HasColumnName("IDProductOrder");

                entity.Property(e => e.IdproductStoneRequest).HasColumnName("IDProductStoneRequest");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ProductOrder)
                    .WithMany(p => p.ProductStoneRequest_Details)
                    .HasForeignKey(d => d.IdproductOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductStoneRequest_Detail_ProductOrder");

                entity.HasOne(d => d.ProductStoneRequest)
                    .WithMany(p => p.ProductStoneRequest_Details)
                    .HasForeignKey(d => d.IdproductStoneRequest)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductStoneRequest_Detail_ProductStoneRequest_Detail");
            });

            modelBuilder.Entity<ProgramCicilan>(entity =>
            {
                entity.ToTable("ProgramCicilan");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Promo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Promo");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdateBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<PromoDJ>(entity =>
            {
                entity.ToTable("PromoDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApprovalNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DiscountNominal).HasColumnType("money");

                entity.Property(e => e.DiscountPersen).HasColumnType("money");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.PoinReward).HasColumnType("money");

                entity.Property(e => e.PromoHarga).HasColumnType("money");

                entity.Property(e => e.StatusAsp).HasColumnName("StatusASP");

                entity.Property(e => e.StatusDiscMembership).HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusDiscNormal).HasDefaultValueSql("((1))");

                entity.Property(e => e.TglExpire).HasColumnType("date");

                entity.Property(e => e.TglStart).HasColumnType("date");
            });

            modelBuilder.Entity<PromoDJ_Detail>(entity =>
            {
                entity.ToTable("PromoDJ_Detail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idcategory).HasColumnName("IDCategory");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Iditem).HasColumnName("IDItem");

                entity.Property(e => e.Idlevel).HasColumnName("IDLevel");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.PromoDJ_Details)
                    .HasForeignKey(d => d.Idcategory)
                    .HasConstraintName("FK_PromoDJ_Detail_CharProductCategory");

                entity.HasOne(d => d.PromoDJ)
                    .WithMany(p => p.PromoDJ_Details)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PromoDJ_Detail_Promo");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.PromoDJ_Details)
                    .HasForeignKey(d => d.Iditem)
                    .HasConstraintName("FK_PromoDJ_Detail_StockProductDJ1");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.PromoDJ_Details)
                    .HasForeignKey(d => d.Idlevel)
                    .HasConstraintName("FK_PromoDJ_Detail_CharProductLevel");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.PromoDJ_Details)
                    .HasForeignKey(d => d.Idproduct)
                    .HasConstraintName("FK_PromoDJ_Detail_StockProductDJ");
            });

            modelBuilder.Entity<PromoGJ>(entity =>
            {
                entity.ToTable("PromoGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApprovalNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DiscountNominal).HasColumnType("money");

                entity.Property(e => e.DiscountPersen).HasColumnType("money");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.PoinReward).HasColumnType("money");

                entity.Property(e => e.PromoHarga).HasColumnType("money");

                entity.Property(e => e.StatusAsp).HasColumnName("StatusASP");

                entity.Property(e => e.StatusDiscMembership).HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusDiscNormal).HasDefaultValueSql("((1))");

                entity.Property(e => e.TglExpire).HasColumnType("date");

                entity.Property(e => e.TglStart).HasColumnType("date");
            });

            modelBuilder.Entity<PromoGJ_Detail>(entity =>
            {
                entity.ToTable("PromoGJ_Detail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idcategory).HasColumnName("IDCategory");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Iditem).HasColumnName("IDItem");

                entity.Property(e => e.Idlevel).HasColumnName("IDLevel");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.PromoGJ_Details)
                    .HasForeignKey(d => d.Idcategory)
                    .HasConstraintName("FK_PromoGJ_Detail_CharProductCategory");

                entity.HasOne(d => d.PromoGJ)
                    .WithMany(p => p.PromoGJ_Details)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PromoGJ_Detail_Promo");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.PromoGJ_Details)
                    .HasForeignKey(d => d.Iditem)
                    .HasConstraintName("FK_PromoGJ_Detail_StockProductGJ1");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.PromoGJ_Details)
                    .HasForeignKey(d => d.Idlevel)
                    .HasConstraintName("FK_PromoGJ_Detail_CharProductLevel");

                entity.HasOne(d => d.StockProductGJ)
                    .WithMany(p => p.PromoGJ_Details)
                    .HasForeignKey(d => d.Idproduct)
                    .HasConstraintName("FK_PromoGJ_Detail_StockProductGJ");
            });

            modelBuilder.Entity<PromoPG>(entity =>
            {
                entity.ToTable("PromoPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApprovalNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DiscountNominal).HasColumnType("money");

                entity.Property(e => e.DiscountPersen).HasColumnType("money");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.PoinReward).HasColumnType("money");

                entity.Property(e => e.PromoHarga).HasColumnType("money");

                entity.Property(e => e.StatusAsp).HasColumnName("StatusASP");

                entity.Property(e => e.StatusDiscMembership).HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusDiscNormal).HasDefaultValueSql("((1))");

                entity.Property(e => e.TglExpire).HasColumnType("date");

                entity.Property(e => e.TglStart).HasColumnType("date");
            });

            modelBuilder.Entity<PromoPG_Detail>(entity =>
            {
                entity.ToTable("PromoPG_Detail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Iditem).HasColumnName("IDItem");

                entity.Property(e => e.Idlevel).HasColumnName("IDLevel");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idmodel).HasColumnName("IDModel");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.HasOne(d => d.PromoPG)
                    .WithMany(p => p.PromoPG_Details)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PromoPG_Detail_Promo");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.PromoPG_Details)
                    .HasForeignKey(d => d.Iditem)
                    .HasConstraintName("FK_PromoPG_Detail_CharProductItem");

                entity.HasOne(d => d.CharGoldLevel)
                    .WithMany(p => p.PromoPG_Details)
                    .HasForeignKey(d => d.Idlevel)
                    .HasConstraintName("FK_PromoPG_Detail_CharGoldLevel");

                entity.HasOne(d => d.CharGoldModel)
                    .WithMany(p => p.PromoPG_Details)
                    .HasForeignKey(d => d.Idmodel)
                    .HasConstraintName("FK_PromoPG_Detail_CharGoldModel");

                entity.HasOne(d => d.StockProductPG)
                    .WithMany(p => p.PromoPG_Details)
                    .HasForeignKey(d => d.Idproduct)
                    .HasConstraintName("FK_PromoPG_Detail_StockProductPG");
            });

            modelBuilder.Entity<CharProductCategory2>(entity =>
            {
                entity.ToTable("CharProductCategory2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sn).HasColumnName("SN");
            });

            modelBuilder.Entity<Resell>(entity =>
            {
                entity.ToTable("Resell");

                entity.HasIndex(e => e.Nomor, "IX_Resell_Nomor")
                    .IsUnique()
                    .HasFilter("([Nomor] IS NOT NULL)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.GroupResell)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('CMK')");

                entity.Property(e => e.Idcustomer).HasColumnName("IDCustomer");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idsales).HasColumnName("IDSales");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KodeCustomerLama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.SalesNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.Property(e => e.TotalHarga).HasColumnType("money");

                entity.Property(e => e.VoidKeterangan)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdcustomerNavigation)
                    .WithMany(p => p.Resells)
                    .HasForeignKey(d => d.Idcustomer)
                    .HasConstraintName("FK_Resell_DataCustomer");

                entity.HasOne(d => d.IdsalesNavigation)
                    .WithMany(p => p.Resells)
                    .HasForeignKey(d => d.Idsales)
                    .HasConstraintName("FK_Resell_DataSales");
            });

            modelBuilder.Entity<ResellAPILEPLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ResellAPILEPGLog");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Idresell).HasColumnName("IDResell");

                entity.Property(e => e.IdtransactionLe)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDTransactionLE");

                entity.Property(e => e.KodeCustomer)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCustomer)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Plu)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PLU");

                entity.Property(e => e.Weight).HasColumnType("decimal(36, 2)");
            });

            modelBuilder.Entity<ResellDJ>(entity =>
            {
                entity.ToTable("ResellDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaAcuan).HasColumnType("money");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.IddocQc).HasColumnName("IDDocQC");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdsalesOrder).HasColumnName("IDSalesOrder");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.NilaiTradeIn).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.TglResell).HasColumnType("datetime");

                entity.HasOne(d => d.IddocQcNavigation)
                    .WithMany(p => p.ResellDJs)
                    .HasForeignKey(d => d.IddocQc)
                    .HasConstraintName("FK_ResellDJ_DocQCDJ");

                entity.HasOne(d => d.IdformNavigation)
                    .WithMany(p => p.ResellDjs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResellDJ_Resell");

                entity.HasOne(d => d.IdproductNavigation)
                    .WithMany(p => p.ResellDJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResellDJ_StockProductDJ");

                entity.HasOne(d => d.IdsalesOrderNavigation)
                    .WithMany(p => p.ResellDJs)
                    .HasForeignKey(d => d.IdsalesOrder)
                    .HasConstraintName("FK_ResellDJ_SalesOrder");
            });

            modelBuilder.Entity<ResellDJ_BackUp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Resell_DJBackUp");

                entity.Property(e => e.HargaAcuan).HasColumnType("money");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IddocQc).HasColumnName("IDDocQC");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdsalesOrder).HasColumnName("IDSalesOrder");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.NilaiTradeIn).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.TglResell).HasColumnType("datetime");
            });

            modelBuilder.Entity<ResellGJ>(entity =>
            {
                entity.ToTable("ResellGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BeratTimbang).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HargaAcuan).HasColumnType("money");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.IddocQc).HasColumnName("IDDocQC");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdsalesOrder).HasColumnName("IDSalesOrder");

                entity.Property(e => e.NilaiTradeIn).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.TglResell).HasColumnType("datetime");

                entity.Property(e => e.Tgp)
                    .HasColumnType("money")
                    .HasColumnName("TGP");

                entity.HasOne(d => d.IddocQcNavigation)
                    .WithMany(p => p.ResellGJs)
                    .HasForeignKey(d => d.IddocQc)
                    .HasConstraintName("FK_ResellGJ_DocQCGJ");

                entity.HasOne(d => d.IdformNavigation)
                    .WithMany(p => p.ResellGjs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResellGJ_Resell");

                entity.HasOne(d => d.IdproductNavigation)
                    .WithMany(p => p.ResellGJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResellGJ_StockProductGJ");

                entity.HasOne(d => d.IdsalesOrderNavigation)
                    .WithMany(p => p.ResellGJs)
                    .HasForeignKey(d => d.IdsalesOrder)
                    .HasConstraintName("FK_ResellGJ_SalesOrder");
            });

            modelBuilder.Entity<ResellLD>(entity =>
            {
                entity.ToTable("ResellLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaAcuan).HasColumnType("money");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.IddocQc).HasColumnName("IDDocQC");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdsalesOrder).HasColumnName("IDSalesOrder");

                entity.Property(e => e.NilaiTradeIn).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.TglResell).HasColumnType("datetime");

                entity.HasOne(d => d.IddocQcNavigation)
                    .WithMany(p => p.ResellLDs)
                    .HasForeignKey(d => d.IddocQc)
                    .HasConstraintName("FK_ResellLD_DocQCLD");

                entity.HasOne(d => d.IdformNavigation)
                    .WithMany(p => p.ResellLds)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResellLD_Resell");

                entity.HasOne(d => d.IdproductNavigation)
                    .WithMany(p => p.ResellLDs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResellLD_StockProductLD_Stone1B");

                entity.HasOne(d => d.IdsalesOrderNavigation)
                    .WithMany(p => p.ResellLDs)
                    .HasForeignKey(d => d.IdsalesOrder)
                    .HasConstraintName("FK_ResellLD_SalesOrder");
            });

            modelBuilder.Entity<ResellPG>(entity =>
            {
                entity.ToTable("ResellPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BeratTimbang).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HargaAcuan).HasColumnType("money");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.IddocQc).HasColumnName("IDDocQC");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdsalesOrder).HasColumnName("IDSalesOrder");

                entity.Property(e => e.NilaiTradeIn).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.TglResell).HasColumnType("datetime");

                entity.Property(e => e.Tgp)
                    .HasColumnType("money")
                    .HasColumnName("TGP");

                entity.HasOne(d => d.IddocQcNavigation)
                    .WithMany(p => p.ResellPGs)
                    .HasForeignKey(d => d.IddocQc)
                    .HasConstraintName("FK_ResellPG_DocQCPG");

                entity.HasOne(d => d.IdformNavigation)
                    .WithMany(p => p.ResellPgs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResellPG_Resell");

                entity.HasOne(d => d.IdproductNavigation)
                    .WithMany(p => p.ResellPGs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResellPG_StockProductPG");

                entity.HasOne(d => d.IdsalesOrderNavigation)
                    .WithMany(p => p.ResellPGs)
                    .HasForeignKey(d => d.IdsalesOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResellPG_SalesOrder");
            });

            modelBuilder.Entity<ResellReceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ResellReceipt");

                entity.Property(e => e.CashBox)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CCName");

                entity.Property(e => e.Ccnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CCNumber");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdbankIssuer).HasColumnName("IDBankIssuer");

                entity.Property(e => e.Idcard).HasColumnName("IDCard");

                entity.Property(e => e.Idedc).HasColumnName("IDEDC");

                entity.Property(e => e.IdjenisKartuKredit).HasColumnName("IDJenisKartuKredit");

                entity.Property(e => e.IdpaymentType).HasColumnName("IDPaymentType");

                entity.Property(e => e.Idprogram).HasColumnName("IDProgram");

                entity.Property(e => e.Idresell).HasColumnName("IDResell");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nominal).HasColumnType("decimal(36, 2)");

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<RevalItemDJ>(entity =>
            {
                entity.ToTable("RevalItemDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.HasOne(d => d.IdproductNavigation)
                    .WithMany(p => p.RevalItemDJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalItemDJ_StockProductDJ");
            });

            modelBuilder.Entity<RevalItemGJ>(entity =>
            {
                entity.ToTable("RevalItemGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.HasOne(d => d.IdproductNavigation)
                    .WithMany(p => p.RevalItemGJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalItemGJ_StockProductGJ");
            });

            modelBuilder.Entity<RevalLogProductDJ>(entity =>
            {
                entity.ToTable("RevalLogProductDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<RevalLogProductDJ_CharProduct>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.RevalLogProductDJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.RevalLogProductDJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.RevalLogProductDJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithOne(p => p.RevalLogProductDJ_CharProduct)
                    .HasForeignKey<RevalLogProductDJ_CharProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_CharProduct_RevalLogProductDJ");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.RevalLogProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.RevalLogProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.RevalLogProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.RevalLogProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.RevalLogProductDJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<RevalLogProductDJ_Costing>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_Costing");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.FinishingOld).HasColumnType("money");

                entity.Property(e => e.Frame).HasColumnType("money");

                entity.Property(e => e.FrameOld).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingNoold)
                    .HasColumnType("money")
                    .HasColumnName("MountingNOOld");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.MountingRoold)
                    .HasColumnType("money")
                    .HasColumnName("MountingROOld");

                entity.Property(e => e.OngkosLain).HasColumnType("money");

                entity.Property(e => e.OngkosLainCogs)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGS");

                entity.Property(e => e.OngkosLainCogsold)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGSOld");

                entity.Property(e => e.OngkosLainOld).HasColumnType("money");

                entity.Property(e => e.Pembagi).HasColumnType("money");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.SettingOld).HasColumnType("money");

                entity.Property(e => e.TotalBiaya).HasColumnType("money");

                entity.Property(e => e.TotalBiayaOld).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRateOld).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.TotalRupiahOld).HasColumnType("money");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.Property(e => e.UnitPriceOld).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithOne(p => p.RevalLogProductDJ_Costing)
                    .HasForeignKey<RevalLogProductDJ_Costing>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_Costing_RevalLogProductDJ");
            });

            modelBuilder.Entity<RevalLogProductDJ_CostingProduct>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_CostingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.EfektifGoldOld).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.GoldRateOld).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalOld).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalProductOld).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1Aold)
                    .HasColumnType("money")
                    .HasColumnName("TotalStone1AOld");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone1Bold)
                    .HasColumnType("money")
                    .HasColumnName("TotalStone1BOld");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone2Old).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone3Old).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone4Old).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.Property(e => e.TotalStone5Old).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithOne(p => p.RevalLogProductDJ_CostingProduct)
                    .HasForeignKey<RevalLogProductDJ_CostingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_CostingProduct_RevalLogProductDJ");
            });

            modelBuilder.Entity<RevalLogProductDJ_Finishing>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaModal).HasColumnType("money");

                entity.Property(e => e.BiayaModalOld).HasColumnType("money");

                entity.Property(e => e.BiayaOld).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.EfektifOld).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.RevalLogProductDJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithMany(p => p.RevalLogProductDJ_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalLogProductDJ_Finishing_RevalLogProductDJ");
            });

            modelBuilder.Entity<RevalLogProductDJ_PricingBiaya>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifMountingOld).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifRateOld).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.EfektifSettingOld).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.FinishingOld).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingNoold)
                    .HasColumnType("money")
                    .HasColumnName("MountingNOOld");

                entity.Property(e => e.MountingOld).HasColumnType("money");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.MountingRoold)
                    .HasColumnType("money")
                    .HasColumnName("MountingROOld");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.SettingOld).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalOld).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRateOld).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.TotalRupiahOld).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithOne(p => p.RevalLogProductDJ_PricingBiaya)
                    .HasForeignKey<RevalLogProductDJ_PricingBiaya>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_PricingBiaya_RevalLogProductDJ");
            });

            modelBuilder.Entity<RevalLogProductDJ_PricingMU>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifRateOld).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahOld).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRoundOld).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.HargaUsdold)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSDOld");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRateOld).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalRupiahOld).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.ModalUsdold)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSDOld");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.Muold)
                    .HasColumnType("money")
                    .HasColumnName("MUOld");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithOne(p => p.RevalLogProductDJ_PricingMU)
                    .HasForeignKey<RevalLogProductDJ_PricingMU>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_PricingMU_RevalLogProductDJ");
            });

            modelBuilder.Entity<RevalLogProductDJ_PricingProduct>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.EfektifGoldOld).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.GoldRateOld).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalOld).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalProductOld).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1Aold)
                    .HasColumnType("money")
                    .HasColumnName("TotalStone1AOld");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone1Bold)
                    .HasColumnType("money")
                    .HasColumnName("TotalStone1BOld");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone2Old).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone3Old).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone4Old).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.Property(e => e.TotalStone5Old).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithOne(p => p.RevalLogProductDJ_PricingProduct)
                    .HasForeignKey<RevalLogProductDJ_PricingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_PricingProduct_RevalLogProductDJ");
            });

            modelBuilder.Entity<RevalLogProductDJ_PricingSegmen>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.EfektifSegmenOld).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.HargaUsdold)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSDOld");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.SegmenMinimumOld).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithOne(p => p.RevalLogProductDJ_PricingSegmen)
                    .HasForeignKey<RevalLogProductDJ_PricingSegmen>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_PricingSegmen_RevalLogProductDJ");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.RevalLogProductDJ_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductDJ_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<RevalLogProductDJ_Stone1A>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.EfektifOld).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaSatuanMold)
                    .HasColumnType("money")
                    .HasColumnName("HargaSatuanMOld");

                entity.Property(e => e.HargaSatuanOld).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalMold)
                    .HasColumnType("money")
                    .HasColumnName("HargaTotalMOld");

                entity.Property(e => e.HargaTotalOld).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.SettingOld).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithMany(p => p.RevalLogProductDJ_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalLogProductDJ_Stone1A_RevalLogProductDJ");
            });

            modelBuilder.Entity<RevalLogProductDJ_Stone1B>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.EfektifOld).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputHold)
                    .HasColumnType("money")
                    .HasColumnName("HargaInputHOld");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaInputPold)
                    .HasColumnType("money")
                    .HasColumnName("HargaInputPOld");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaSatuanMold)
                    .HasColumnType("money")
                    .HasColumnName("HargaSatuanMOld");

                entity.Property(e => e.HargaSatuanOld).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalMold)
                    .HasColumnType("money")
                    .HasColumnName("HargaTotalMOld");

                entity.Property(e => e.HargaTotalOld).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.SettingOld).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithMany(p => p.RevalLogProductDJ_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalLogProductDJ_Stone1B_RevalLogProductDJ");
            });

            modelBuilder.Entity<RevalLogProductDJ_Stone2>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.EfektifOld).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaSatuanMold)
                    .HasColumnType("money")
                    .HasColumnName("HargaSatuanMOld");

                entity.Property(e => e.HargaSatuanOld).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalMold)
                    .HasColumnType("money")
                    .HasColumnName("HargaTotalMOld");

                entity.Property(e => e.HargaTotalOld).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.SettingOld).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithMany(p => p.RevalLogProductDJ_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalLogProductDJ_Stone2_RevalLogProductDJ");
            });

            modelBuilder.Entity<RevalLogProductDJ_Stone3>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.EfektifOld).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaSatuanMold)
                    .HasColumnType("money")
                    .HasColumnName("HargaSatuanMOld");

                entity.Property(e => e.HargaSatuanOld).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalMold)
                    .HasColumnType("money")
                    .HasColumnName("HargaTotalMOld");

                entity.Property(e => e.HargaTotalOld).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.SettingOld).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithMany(p => p.RevalLogProductDJ_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalLogProductDJ_Stone3_RevalLogProductDJ");
            });

            modelBuilder.Entity<RevalLogProductDJ_Stone4>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.EfektifOld).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaSatuanMold)
                    .HasColumnType("money")
                    .HasColumnName("HargaSatuanMOld");

                entity.Property(e => e.HargaSatuanOld).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalMold)
                    .HasColumnType("money")
                    .HasColumnName("HargaTotalMOld");

                entity.Property(e => e.HargaTotalOld).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.SettingOld).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithMany(p => p.RevalLogProductDJ_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalLogProductDJ_Stone4_RevalLogProductDJ");
            });

            modelBuilder.Entity<RevalLogProductDJ_Stone5>(entity =>
            {
                entity.ToTable("RevalLogProductDJ_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.EfektifOld).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaSatuanMold)
                    .HasColumnType("money")
                    .HasColumnName("HargaSatuanMOld");

                entity.Property(e => e.HargaSatuanOld).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.HargaTotalMold)
                    .HasColumnType("money")
                    .HasColumnName("HargaTotalMOld");

                entity.Property(e => e.HargaTotalOld).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.SettingOld).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductDJ)
                    .WithMany(p => p.RevalLogProductDJ_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalLogProductDJ_Stone5_RevalLogProductDJ");
            });

            modelBuilder.Entity<RevalLogProductGJ>(entity =>
            {
                entity.ToTable("RevalLogProductGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<RevalLogProductGJ_CharProduct>(entity =>
            {
                entity.ToTable("RevalLogProductGJ_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.RevalLogProductGJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.RevalLogProductGJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.RevalLogProductGJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.RevalLogProductGJ)
                    .WithOne(p => p.RevalLogProductGJ_CharProduct)
                    .HasForeignKey<RevalLogProductGJ_CharProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_CharProduct_RevalLogProductGJ");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.RevalLogProductGJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.RevalLogProductGJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.RevalLogProductGJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.RevalLogProductGJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.RevalLogProductGJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<RevalLogProductGJ_Costing>(entity =>
            {
                entity.ToTable("RevalLogProductGJ_Costing");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.FinishingOld).HasColumnType("money");

                entity.Property(e => e.Frame).HasColumnType("money");

                entity.Property(e => e.FrameOld).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingNoold)
                    .HasColumnType("money")
                    .HasColumnName("MountingNOOld");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.MountingRoold)
                    .HasColumnType("money")
                    .HasColumnName("MountingROOld");

                entity.Property(e => e.OngkosLain).HasColumnType("money");

                entity.Property(e => e.OngkosLainCogs)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGS");

                entity.Property(e => e.OngkosLainCogsold)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGSOld");

                entity.Property(e => e.OngkosLainOld).HasColumnType("money");

                entity.Property(e => e.Pembagi).HasColumnType("money");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.SettingOld).HasColumnType("money");

                entity.Property(e => e.TotalBiaya).HasColumnType("money");

                entity.Property(e => e.TotalBiayaOld).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRateOld).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.TotalRupiahOld).HasColumnType("money");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.Property(e => e.UnitPriceOld).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductGJ)
                    .WithOne(p => p.RevalLogProductGJ_Costing)
                    .HasForeignKey<RevalLogProductGJ_Costing>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_Costing_RevalLogProductGJ");
            });

            modelBuilder.Entity<RevalLogProductGJ_CostingProduct>(entity =>
            {
                entity.ToTable("RevalLogProductGJ_CostingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.EfektifGoldOld).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.GoldRateOld).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalOld).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalProductOld).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1Aold)
                    .HasColumnType("money")
                    .HasColumnName("TotalStone1AOld");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone1Bold)
                    .HasColumnType("money")
                    .HasColumnName("TotalStone1BOld");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone2Old).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone3Old).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone4Old).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.Property(e => e.TotalStone5Old).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductGJ)
                    .WithOne(p => p.RevalLogProductGJ_CostingProduct)
                    .HasForeignKey<RevalLogProductGJ_CostingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_CostingProduct_RevalLogProductGJ");
            });

            modelBuilder.Entity<RevalLogProductGJ_Finishing>(entity =>
            {
                entity.ToTable("RevalLogProductGJ_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaModal).HasColumnType("money");

                entity.Property(e => e.BiayaModalOld).HasColumnType("money");

                entity.Property(e => e.BiayaOld).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.EfektifOld).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.RevalLogProductGJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.RevalLogProductGJ)
                    .WithMany(p => p.RevalLogProductGJ_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalLogProductGJ_Finishing_RevalLogProductGJ");
            });

            modelBuilder.Entity<RevalLogProductGJ_PricingBiaya>(entity =>
            {
                entity.ToTable("RevalLogProductGJ_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifMountingOld).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifRateOld).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.EfektifSettingOld).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.FinishingOld).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingNoold)
                    .HasColumnType("money")
                    .HasColumnName("MountingNOOld");

                entity.Property(e => e.MountingOld).HasColumnType("money");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.MountingRoold)
                    .HasColumnType("money")
                    .HasColumnName("MountingROOld");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.SettingOld).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalOld).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRateOld).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.TotalRupiahOld).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductGJ)
                    .WithOne(p => p.RevalLogProductGJ_PricingBiaya)
                    .HasForeignKey<RevalLogProductGJ_PricingBiaya>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_PricingBiaya_RevalLogProductGJ");
            });

            modelBuilder.Entity<RevalLogProductGJ_PricingMU>(entity =>
            {
                entity.ToTable("RevalLogProductGJ_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifRateOld).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahOld).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRoundOld).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.HargaUsdold)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSDOld");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRateOld).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalRupiahOld).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.ModalUsdold)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSDOld");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.Muold)
                    .HasColumnType("money")
                    .HasColumnName("MUOld");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.RevalLogProductGJ)
                    .WithOne(p => p.RevalLogProductGJ_PricingMU)
                    .HasForeignKey<RevalLogProductGJ_PricingMU>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_PricingMU_RevalLogProductGJ");
            });

            modelBuilder.Entity<RevalLogProductGJ_PricingProduct>(entity =>
            {
                entity.ToTable("RevalLogProductGJ_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.EfektifGoldOld).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.GoldRateOld).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalOld).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalProductOld).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1Aold)
                    .HasColumnType("money")
                    .HasColumnName("TotalStone1AOld");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone1Bold)
                    .HasColumnType("money")
                    .HasColumnName("TotalStone1BOld");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone2Old).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone3Old).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone4Old).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.Property(e => e.TotalStone5Old).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductGJ)
                    .WithOne(p => p.RevalLogProductGJ_PricingProduct)
                    .HasForeignKey<RevalLogProductGJ_PricingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_PricingProduct_RevalLogProductGJ");
            });

            modelBuilder.Entity<RevalLogProductGJ_PricingSegmen>(entity =>
            {
                entity.ToTable("RevalLogProductGJ_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.EfektifSegmenOld).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.HargaUsdold)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSDOld");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.SegmenMinimumOld).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalLogProductGJ)
                    .WithOne(p => p.RevalLogProductGJ_PricingSegmen)
                    .HasForeignKey<RevalLogProductGJ_PricingSegmen>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_PricingSegmen_RevalLogProductGJ");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.RevalLogProductGJ_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogProductGJ_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<RevalLogReceiveDJ_CharDesign>(entity =>
            {
                entity.ToTable("RevalLogReceiveDJ_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.RevalLogReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogReceiveDJ_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.RevalLogReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogReceiveDJ_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.RevalLogReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogReceiveDJ_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.RevalLogReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogReceiveDJ_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.RevalLogReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalLogReceiveDJ_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<RevalProductDJ>(entity =>
            {
                entity.ToTable("RevalProductDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiredProduct).HasColumnType("date");

                entity.Property(e => e.ExpiredRequest).HasColumnType("date");

                entity.Property(e => e.HumanDesginerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HumanStockNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idreval).HasColumnName("IDReval");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.ProductOrderNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProtoNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.RevalItemDJ)
                    .WithMany(p => p.RevalProductDjs)
                    .HasForeignKey(d => d.Idreval)
                    .HasConstraintName("FK_RevalProductDJ_RevalItemDJ");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.RevalProductDJs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .HasConstraintName("FK_RevalProductDJ_LocWarehouse");
            });

            modelBuilder.Entity<RevalProductDJ_CharDesign>(entity =>
            {
                entity.ToTable("RevalProductDJ_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.RevalProductDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.RevalProductDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.RevalProductDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithOne(p => p.RevalProductDJ_CharDesign)
                    .HasForeignKey<RevalProductDJ_CharDesign>(d => d.Id)
                    .HasConstraintName("FK_RevalProductDJ_CharDesign_RevalProductDJ");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.RevalProductDJ_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.RevalProductDJ_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<RevalProductDJ_CharProduct>(entity =>
            {
                entity.ToTable("RevalProductDJ_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.RevalProductDJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.RevalProductDJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.RevalProductDJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithOne(p => p.RevalProductDJ_CharProduct)
                    .HasForeignKey<RevalProductDJ_CharProduct>(d => d.Id)
                    .HasConstraintName("FK_RevalProductDJ_CharProduct_RevalProductDJ");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.RevalProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.RevalProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.RevalProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.RevalProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.RevalProductDJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<RevalProductDJ_Costing>(entity =>
            {
                entity.ToTable("RevalProductDJ_Costing");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Frame).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.OngkosLain).HasColumnType("money");

                entity.Property(e => e.OngkosLainCogs)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGS");

                entity.Property(e => e.Pembagi).HasColumnType("money");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalBiaya).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithOne(p => p.RevalProductDJ_Costing)
                    .HasForeignKey<RevalProductDJ_Costing>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_Costing_RevalProductDJ");
            });

            modelBuilder.Entity<RevalProductDJ_CostingProduct>(entity =>
            {
                entity.ToTable("RevalProductDJ_CostingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithOne(p => p.RevalProductDJ_CostingProduct)
                    .HasForeignKey<RevalProductDJ_CostingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_CostingProduct_RevalProductDJ");
            });

            modelBuilder.Entity<RevalProductDJ_Finishing>(entity =>
            {
                entity.ToTable("RevalProductDJ_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaModal).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.RevalProductDJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithMany(p => p.RevalProductDJ_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalProductDJ_Finishing_RevalProductDJ");
            });

            modelBuilder.Entity<RevalProductDJ_PricingBiaya>(entity =>
            {
                entity.ToTable("RevalProductDJ_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithOne(p => p.RevalProductDJ_PricingBiaya)
                    .HasForeignKey<RevalProductDJ_PricingBiaya>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_PricingBiaya_RevalProductDJ");
            });

            modelBuilder.Entity<RevalProductDJ_PricingMU>(entity =>
            {
                entity.ToTable("RevalProductDJ_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.RevalProductDJ)
                    .WithOne(p => p.RevalProductDJ_PricingMU)
                    .HasForeignKey<RevalProductDJ_PricingMU>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_PricingMU_RevalProductDJ");
            });

            modelBuilder.Entity<RevalProductDJ_PricingProduct>(entity =>
            {
                entity.ToTable("RevalProductDJ_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithOne(p => p.RevalProductDJ_PricingProduct)
                    .HasForeignKey<RevalProductDJ_PricingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_PricingProduct_RevalProductDJ");
            });

            modelBuilder.Entity<RevalProductDJ_PricingSegmen>(entity =>
            {
                entity.ToTable("RevalProductDJ_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithOne(p => p.RevalProductDJ_PricingSegmen)
                    .HasForeignKey<RevalProductDJ_PricingSegmen>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_PricingSegmen_RevalProductDJ");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.RevalProductDJ_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductDJ_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<RevalProductDJ_Stone1A>(entity =>
            {
                entity.ToTable("RevalProductDJ_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithMany(p => p.RevalProductDJ_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalProductDJ_Stone1A_RevalProductDJ");
            });

            modelBuilder.Entity<RevalProductDJ_Stone1B>(entity =>
            {
                entity.ToTable("RevalProductDJ_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithMany(p => p.RevalProductDJ_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalProductDJ_Stone1B_RevalProductDJ");
            });

            modelBuilder.Entity<RevalProductDJ_Stone2>(entity =>
            {
                entity.ToTable("RevalProductDJ_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithMany(p => p.RevalProductDJ_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalProductDJ_Stone2_RevalProductDJ");
            });

            modelBuilder.Entity<RevalProductDJ_Stone3>(entity =>
            {
                entity.ToTable("RevalProductDJ_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithMany(p => p.RevalProductDJ_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalProductDJ_Stone3_RevalProductDJ");
            });

            modelBuilder.Entity<RevalProductDJ_Stone4>(entity =>
            {
                entity.ToTable("RevalProductDJ_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithMany(p => p.RevalProductDJ_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalProductDJ_Stone4_RevalProductDJ");
            });

            modelBuilder.Entity<RevalProductDJ_Stone5>(entity =>
            {
                entity.ToTable("RevalProductDJ_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalProductDJ)
                    .WithMany(p => p.RevalProductDJ_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalProductDJ_Stone5_RevalProductDJ");
            });

            modelBuilder.Entity<RevalProductGJ>(entity =>
            {
                entity.ToTable("RevalProductGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiredProduct).HasColumnType("date");

                entity.Property(e => e.ExpiredRequest).HasColumnType("date");

                entity.Property(e => e.HumanDesginerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HumanStockNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idreval).HasColumnName("IDReval");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.ProductOrderNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProtoNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.RevalItemGJ)
                    .WithMany(p => p.RevalProductGjs)
                    .HasForeignKey(d => d.Idreval)
                    .HasConstraintName("FK_RevalProductGJ_RevalItemGJ");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.RevalProductGJs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .HasConstraintName("FK_RevalProductGJ_LocWarehouse");
            });

            modelBuilder.Entity<RevalProductGJ_CharDesign>(entity =>
            {
                entity.ToTable("RevalProductGJ_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.RevalProductGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.RevalProductGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.RevalProductGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.RevalProductGJ)
                    .WithOne(p => p.RevalProductGJ_CharDesign)
                    .HasForeignKey<RevalProductGJ_CharDesign>(d => d.Id)
                    .HasConstraintName("FK_RevalProductGJ_CharDesign_RevalProductGJ");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.RevalProductGJ_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.RevalProductGJ_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<RevalProductGJ_CharProduct>(entity =>
            {
                entity.ToTable("RevalProductGJ_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.RevalProductGJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.RevalProductGJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.RevalProductGJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.RevalProductGJ)
                    .WithOne(p => p.RevalProductGJ_CharProduct)
                    .HasForeignKey<RevalProductGJ_CharProduct>(d => d.Id)
                    .HasConstraintName("FK_RevalProductGJ_CharProduct_RevalProductGJ");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.RevalProductGJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.RevalProductGJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.RevalProductGJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.RevalProductGJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.RevalProductGJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<RevalProductGJ_Costing>(entity =>
            {
                entity.ToTable("RevalProductGJ_Costing");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Frame).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.OngkosLain).HasColumnType("money");

                entity.Property(e => e.OngkosLainCogs)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGS");

                entity.Property(e => e.Pembagi).HasColumnType("money");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalBiaya).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.RevalProductGJ)
                    .WithOne(p => p.RevalProductGJ_Costing)
                    .HasForeignKey<RevalProductGJ_Costing>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_Costing_RevalProductGJ");
            });

            modelBuilder.Entity<RevalProductGJ_CostingProduct>(entity =>
            {
                entity.ToTable("RevalProductGJ_CostingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.RevalProductGJ)
                    .WithOne(p => p.RevalProductGJ_CostingProduct)
                    .HasForeignKey<RevalProductGJ_CostingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_CostingProduct_RevalProductGJ");
            });

            modelBuilder.Entity<RevalProductGJ_Finishing>(entity =>
            {
                entity.ToTable("RevalProductGJ_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaModal).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.RevalProductGJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.RevalProductGJ)
                    .WithMany(p => p.RevalProductGJ_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_RevalProductGJ_Finishing_RevalProductGJ");
            });

            modelBuilder.Entity<RevalProductGJ_PricingBiaya>(entity =>
            {
                entity.ToTable("RevalProductGJ_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.RevalProductGJ)
                    .WithOne(p => p.RevalProductGJ_PricingBiaya)
                    .HasForeignKey<RevalProductGJ_PricingBiaya>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_PricingBiaya_RevalProductGJ");
            });

            modelBuilder.Entity<RevalProductGJ_PricingMU>(entity =>
            {
                entity.ToTable("RevalProductGJ_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.RevalProductGJ)
                    .WithOne(p => p.RevalProductGJ_PricingMU)
                    .HasForeignKey<RevalProductGJ_PricingMU>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_PricingMU_RevalProductGJ");
            });

            modelBuilder.Entity<RevalProductGJ_PricingProduct>(entity =>
            {
                entity.ToTable("RevalProductGJ_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.RevalProductGJ)
                    .WithOne(p => p.RevalProductGJ_PricingProduct)
                    .HasForeignKey<RevalProductGJ_PricingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_PricingProduct_RevalProductGJ");
            });

            modelBuilder.Entity<RevalProductGJ_PricingSegmen>(entity =>
            {
                entity.ToTable("RevalProductGJ_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.RevalProductGJ)
                    .WithOne(p => p.RevalProductGJ_PricingSegmen)
                    .HasForeignKey<RevalProductGJ_PricingSegmen>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_PricingSegmen_RevalProductGJ");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.RevalProductGJ_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalProductGJ_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<RevalReceiveDJ_CharDesign>(entity =>
            {
                entity.ToTable("RevalReceiveDJ_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.RevalReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalReceiveDJ_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.RevalReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalReceiveDJ_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.RevalReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalReceiveDJ_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.RevalReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalReceiveDJ_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.RevalReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevalReceiveDJ_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<SaldoStockDJ>(entity =>
            {
                entity.ToTable("SaldoStockDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Butir).HasColumnType("money");

                entity.Property(e => e.Carat).HasColumnType("money");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NetWeight).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.SaldoStockDJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoStockDJ_StockProductDJ");
            });

            modelBuilder.Entity<SaldoStockGJ>(entity =>
            {
                entity.ToTable("SaldoStockGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NetWeight).HasColumnType("money");

                entity.HasOne(d => d.StockProductGJ)
                    .WithMany(p => p.SaldoStockGJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoStockGJ_StockProductGJ");
            });

            modelBuilder.Entity<SaldoStockLD>(entity =>
            {
                entity.ToTable("SaldoStockLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Carat).HasColumnType("money");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.StockProductLD_Stone1B)
                    .WithMany(p => p.SaldoStockLDs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoStockLD_StockProductLD_Stone1B");
            });

            modelBuilder.Entity<SaldoStockPG>(entity =>
            {
                entity.ToTable("SaldoStockPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NetWeight).HasColumnType("money");

                entity.HasOne(d => d.StockProductPG)
                    .WithMany(p => p.SaldoStockPGs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoStockPG_StockProductPG");
            });

            modelBuilder.Entity<SalesFee>(entity =>
            {
                entity.ToTable("SalesFee");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ae)
                    .HasColumnType("money")
                    .HasColumnName("AE");

                entity.Property(e => e.ApprovalNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Dj)
                    .HasColumnType("money")
                    .HasColumnName("DJ");

                entity.Property(e => e.FullMoney).HasColumnType("money");

                entity.Property(e => e.Inc1).HasColumnType("money");

                entity.Property(e => e.Inc2).HasColumnType("money");

                entity.Property(e => e.Inc3).HasColumnType("money");

                entity.Property(e => e.Inc4).HasColumnType("money");

                entity.Property(e => e.Kom1).HasColumnType("money");

                entity.Property(e => e.Kom2).HasColumnType("money");

                entity.Property(e => e.Lm)
                    .HasColumnType("money")
                    .HasColumnName("LM");

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Pc1)
                    .HasColumnType("money")
                    .HasColumnName("PC1");

                entity.Property(e => e.Pc2)
                    .HasColumnType("money")
                    .HasColumnName("PC2");

                entity.Property(e => e.Pc3)
                    .HasColumnType("money")
                    .HasColumnName("PC3");

                entity.Property(e => e.Pc4)
                    .HasColumnType("money")
                    .HasColumnName("PC4");

                entity.Property(e => e.Pg)
                    .HasColumnType("money")
                    .HasColumnName("PG");

                entity.Property(e => e.TotalPoint).HasColumnType("money");
            });

            modelBuilder.Entity<SalesOrder>(entity =>
            {
                entity.ToTable("SalesOrder");

                entity.HasIndex(e => new { e.TipeLokasi, e.Idlokasi, e.Idcustomer, e.CustomerNama, e.Idsales, e.Nomor }, "index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerReferenceNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.DiscountGift).HasColumnType("money");

                entity.Property(e => e.DiscountNominal).HasColumnType("money");

                entity.Property(e => e.DiscountProgram).HasColumnType("money");

                entity.Property(e => e.DiscountProgramNominal).HasColumnType("money");

                entity.Property(e => e.DiscountRound).HasColumnType("money");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.EReceiptEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("eReceiptEmail");

                entity.Property(e => e.EReceiptHp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("eReceiptHP");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.Idcustomer).HasColumnName("IDCustomer");

                entity.Property(e => e.IdcustomerReference).HasColumnName("IDCustomerReference");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.IdlokasiCross).HasColumnName("IDLokasiCross");

                entity.Property(e => e.Idsales).HasColumnName("IDSales");

                entity.Property(e => e.Idsales2).HasColumnName("IDSales2");

                entity.Property(e => e.IdsalesCross).HasColumnName("IDSalesCross");

                entity.Property(e => e.IdtransactionStamps).HasColumnName("IDTransactionStamps");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KeteranganVoid).IsUnicode(false);

                entity.Property(e => e.KodeBrandCross)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.KodeCustomerLama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastPrintedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastPrintedDate).HasColumnType("datetime");

                entity.Property(e => e.LinkPackagingDownPayment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LinkPackagingRepair)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LinkPackagingSalesOrder)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Membership)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LinkPackagingDownPayment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LinkPackagingRepair)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LinkPackagingSalesOrder)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.NamaSalesCross)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NiksalesCross)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NIKSalesCross");

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Npwp).HasColumnName("NPWP");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Paid).HasColumnType("money");

                entity.Property(e => e.SalesNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SalesNama2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.Property(e => e.TglLunas).HasColumnType("date");

                entity.Property(e => e.TglVoid).HasColumnType("date");

                entity.Property(e => e.TotalBayar).HasColumnType("money");

                entity.Property(e => e.TotalBayarBeforeDisc).HasColumnType("money");

                entity.Property(e => e.TotalResell).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.TotalRupiahBeforeDisc).HasColumnType("money");

                entity.Property(e => e.Unpaid).HasColumnType("money");

                entity.Property(e => e.UrlFile).IsUnicode(false);

                entity.HasOne(d => d.DataCustomer)
                    .WithMany(p => p.SalesOrder_Customers)
                    .HasForeignKey(d => d.Idcustomer)
                    .HasConstraintName("FK_SalesOrder_DataCustomer");

                entity.HasOne(d => d.DataCustomer_Reference)
                    .WithMany(p => p.SalesOrder_CustomerReferences)
                    .HasForeignKey(d => d.IdcustomerReference)
                    .HasConstraintName("FK_SalesOrder_DataCustomer1");

                entity.HasOne(d => d.DataSales)
                    .WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.Idsales)
                    .HasConstraintName("FK_SalesOrder_DataSales");
            });

            modelBuilder.Entity<SalesOrderDJ>(entity =>
            {
                entity.ToTable("SalesOrderDJ");

                entity.HasIndex(e => new { e.Idform, e.Idproduct }, "index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.DiscountBank).HasColumnType("money");

                entity.Property(e => e.DiscountGift).HasColumnType("money");

                entity.Property(e => e.DiscountNominal).HasColumnType("money");

                entity.Property(e => e.DiscountOther).HasColumnType("money");

                entity.Property(e => e.DiscountProgram).HasColumnType("money");

                entity.Property(e => e.DiscountProgramNominal).HasColumnType("money");

                entity.Property(e => e.DiscountPromo).HasColumnType("money");

                entity.Property(e => e.DiscountRound).HasColumnType("money");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Invoice)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Menominal)
                    .HasColumnType("money")
                    .HasColumnName("MENominal");

                entity.Property(e => e.MeperiodeMax).HasColumnName("MEPeriodeMax");

                entity.Property(e => e.MeperiodeMaxDay).HasColumnName("MEPeriodeMaxDay");

                entity.Property(e => e.MeperiodeMin).HasColumnName("MEPeriodeMin");

                entity.Property(e => e.Merumus)
                    .HasColumnType("money")
                    .HasColumnName("MERumus");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.PoinPembagi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.R1Nominal)
                    .HasColumnType("money")
                    .HasColumnName("R1_Nominal");

                entity.Property(e => e.R1PeriodeMax).HasColumnName("R1_PeriodeMax");

                entity.Property(e => e.R1PeriodeMin).HasColumnName("R1_PeriodeMin");

                entity.Property(e => e.R1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R1_Rumus");

                entity.Property(e => e.R2Nominal)
                    .HasColumnType("money")
                    .HasColumnName("R2_Nominal");

                entity.Property(e => e.R2PeriodeMax).HasColumnName("R2_PeriodeMax");

                entity.Property(e => e.R2PeriodeMin).HasColumnName("R2_PeriodeMin");

                entity.Property(e => e.R2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R2_Rumus");

                entity.Property(e => e.RateM).HasColumnType("money");

                entity.Property(e => e.Ti1Nominal)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Nominal");

                entity.Property(e => e.Ti1PeriodeMax).HasColumnName("TI1_PeriodeMax");

                entity.Property(e => e.Ti1PeriodeMin).HasColumnName("TI1_PeriodeMin");

                entity.Property(e => e.Ti1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Rumus");

                entity.Property(e => e.Ti2Nominal)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Nominal");

                entity.Property(e => e.Ti2PeriodeMax).HasColumnName("TI2_PeriodeMax");

                entity.Property(e => e.Ti2PeriodeMin).HasColumnName("TI2_PeriodeMin");

                entity.Property(e => e.Ti2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Rumus");

                entity.Property(e => e.Ti3Nominal)
                    .HasColumnType("money")
                    .HasColumnName("TI3_Nominal");

                entity.Property(e => e.Ti3PeriodeMax).HasColumnName("TI3_PeriodeMax");

                entity.Property(e => e.Ti3PeriodeMin).HasColumnName("TI3_PeriodeMin");

                entity.Property(e => e.Ti3Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI3_Rumus");

                entity.Property(e => e.TotalBayar).HasColumnType("money");

                entity.Property(e => e.TotalDp)
                    .HasColumnType("money")
                    .HasColumnName("TotalDP");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesOrderDJs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderDJ_SalesOrder");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.SalesOrderDJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderDJ_StockProductDJ");
            });

            modelBuilder.Entity<SalesOrderGJ>(entity =>
            {
                entity.ToTable("SalesOrderGJ");

                entity.HasIndex(e => new { e.Idform, e.Idproduct }, "index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.DiscountBank).HasColumnType("money");

                entity.Property(e => e.DiscountGift).HasColumnType("money");

                entity.Property(e => e.DiscountNominal).HasColumnType("money");

                entity.Property(e => e.DiscountOther).HasColumnType("money");

                entity.Property(e => e.DiscountProgram).HasColumnType("money");

                entity.Property(e => e.DiscountProgramNominal).HasColumnType("money");

                entity.Property(e => e.DiscountPromo).HasColumnType("money");

                entity.Property(e => e.DiscountRound).HasColumnType("money");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Invoice)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Menominal)
                    .HasColumnType("money")
                    .HasColumnName("MENominal");

                entity.Property(e => e.MeperiodeMax).HasColumnName("MEPeriodeMax");

                entity.Property(e => e.MeperiodeMin).HasColumnName("MEPeriodeMin");

                entity.Property(e => e.Merumus)
                    .HasColumnType("money")
                    .HasColumnName("MERumus");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.PoinPembagi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.R1Nominal)
                    .HasColumnType("money")
                    .HasColumnName("R1_Nominal");

                entity.Property(e => e.R1PeriodeMax).HasColumnName("R1_PeriodeMax");

                entity.Property(e => e.R1PeriodeMin).HasColumnName("R1_PeriodeMin");

                entity.Property(e => e.R1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R1_Rumus");

                entity.Property(e => e.R2Nominal)
                    .HasColumnType("money")
                    .HasColumnName("R2_Nominal");

                entity.Property(e => e.R2PeriodeMax).HasColumnName("R2_PeriodeMax");

                entity.Property(e => e.R2PeriodeMin).HasColumnName("R2_PeriodeMin");

                entity.Property(e => e.R2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R2_Rumus");

                entity.Property(e => e.Ti1Nominal)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Nominal");

                entity.Property(e => e.Ti1PeriodeMax).HasColumnName("TI1_PeriodeMax");

                entity.Property(e => e.Ti1PeriodeMin).HasColumnName("TI1_PeriodeMin");

                entity.Property(e => e.Ti1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Rumus");

                entity.Property(e => e.Ti2Nominal)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Nominal");

                entity.Property(e => e.Ti2PeriodeMax).HasColumnName("TI2_PeriodeMax");

                entity.Property(e => e.Ti2PeriodeMin).HasColumnName("TI2_PeriodeMin");

                entity.Property(e => e.Ti2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Rumus");

                entity.Property(e => e.Ti3Nominal)
                    .HasColumnType("money")
                    .HasColumnName("TI3_Nominal");

                entity.Property(e => e.Ti3PeriodeMax).HasColumnName("TI3_PeriodeMax");

                entity.Property(e => e.Ti3PeriodeMin).HasColumnName("TI3_PeriodeMin");

                entity.Property(e => e.Ti3Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI3_Rumus");

                entity.Property(e => e.TotalBayar).HasColumnType("money");

                entity.Property(e => e.TotalDp)
                    .HasColumnType("money")
                    .HasColumnName("TotalDP");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesOrderGJs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderGJ_SalesOrder");

                entity.HasOne(d => d.StockProductGJ)
                    .WithMany(p => p.SalesOrderGJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderGJ_StockProductGJ");
            });

            modelBuilder.Entity<SalesOrderLD>(entity =>
            {
                entity.ToTable("SalesOrderLD");

                entity.HasIndex(e => new { e.Idform, e.Idproduct }, "index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.DiscountBank).HasColumnType("money");

                entity.Property(e => e.DiscountGift).HasColumnType("money");

                entity.Property(e => e.DiscountNominal).HasColumnType("money");

                entity.Property(e => e.DiscountOther).HasColumnType("money");

                entity.Property(e => e.DiscountProgram).HasColumnType("money");

                entity.Property(e => e.DiscountProgramNominal).HasColumnType("money");

                entity.Property(e => e.DiscountPromo).HasColumnType("money");

                entity.Property(e => e.DiscountRound).HasColumnType("money");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Invoice)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Menominal)
                    .HasColumnType("money")
                    .HasColumnName("MENominal");

                entity.Property(e => e.MeperiodeMax).HasColumnName("MEPeriodeMax");

                entity.Property(e => e.MeperiodeMin).HasColumnName("MEPeriodeMin");

                entity.Property(e => e.Merumus)
                    .HasColumnType("money")
                    .HasColumnName("MERumus");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.PoinPembagi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.R1Nominal)
                    .HasColumnType("money")
                    .HasColumnName("R1_Nominal");

                entity.Property(e => e.R1PeriodeMax).HasColumnName("R1_PeriodeMax");

                entity.Property(e => e.R1PeriodeMin).HasColumnName("R1_PeriodeMin");

                entity.Property(e => e.R1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R1_Rumus");

                entity.Property(e => e.R2Nominal)
                    .HasColumnType("money")
                    .HasColumnName("R2_Nominal");

                entity.Property(e => e.R2PeriodeMax).HasColumnName("R2_PeriodeMax");

                entity.Property(e => e.R2PeriodeMin).HasColumnName("R2_PeriodeMin");

                entity.Property(e => e.R2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("R2_Rumus");

                entity.Property(e => e.Ti1Nominal)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Nominal");

                entity.Property(e => e.Ti1PeriodeMax).HasColumnName("TI1_PeriodeMax");

                entity.Property(e => e.Ti1PeriodeMin).HasColumnName("TI1_PeriodeMin");

                entity.Property(e => e.Ti1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Rumus");

                entity.Property(e => e.Ti2Nominal)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Nominal");

                entity.Property(e => e.Ti2PeriodeMax).HasColumnName("TI2_PeriodeMax");

                entity.Property(e => e.Ti2PeriodeMin).HasColumnName("TI2_PeriodeMin");

                entity.Property(e => e.Ti2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Rumus");

                entity.Property(e => e.Ti3Nominal)
                    .HasColumnType("money")
                    .HasColumnName("TI3_Nominal");

                entity.Property(e => e.Ti3PeriodeMax).HasColumnName("TI3_PeriodeMax");

                entity.Property(e => e.Ti3PeriodeMin).HasColumnName("TI3_PeriodeMin");

                entity.Property(e => e.Ti3Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI3_Rumus");

                entity.Property(e => e.TotalBayar).HasColumnType("money");

                entity.Property(e => e.TotalDp)
                    .HasColumnType("money")
                    .HasColumnName("TotalDP");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesOrderLDs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderLD_SalesOrder");

                entity.HasOne(d => d.StockProductLD_Stone1B)
                    .WithMany(p => p.SalesOrderLDs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderLD_StockProductLD_Stone1B");
            });



            modelBuilder.Entity<Cetakan>(entity =>
            {
                entity.ToTable("Cetakan");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.ImgPicture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Kode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Satuan)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.Cetakans)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cetakan_CompanyBrand");
            });

            modelBuilder.Entity<SalesOrderCetakan>(entity =>
            {
                entity.ToTable("SalesOrderCetakan");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Invoice)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.Property(e => e.TotalModalRupiah).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesOrderCetakans)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderCetakan_SalesOrder");

                entity.HasOne(d => d.Cetakan)
                    .WithMany(p => p.SalesOrderCetakans)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderCetakan_Cetakan");
            });


            modelBuilder.Entity<StockActualCetakan>(entity =>
            {
                entity.ToTable("StockActualCetakan");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Damaged).HasColumnType("money");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.InTransit).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaLokasi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NeverArrived).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.Cetakan)
                    .WithMany(p => p.StockActualCetakans)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualCetakan_Cetakan");
            });


            modelBuilder.Entity<StockAwalCetakan>(entity =>
            {
                entity.ToTable("StockAwalCetakan");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idlocation).HasColumnName("IDLocation");

                entity.Property(e => e.IdCetakan).HasColumnName("IDCetakan");

                entity.Property(e => e.Periode)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((9999)-(12))-(31))");
            });

            modelBuilder.Entity<StockIncomingCetakan>(entity =>
            {
                entity.ToTable("StockIncomingCetakan");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idoutgoing).HasColumnName("IDOutgoing");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockOutgoingCetakan)
                    .WithMany(p => p.StockIncomingCetakans)
                    .HasForeignKey(d => d.Idoutgoing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingCetakan_StockIncomingCetakan");
            });



            modelBuilder.Entity<StockIncomingCetakan_Product>(entity =>
            {
                entity.ToTable("StockIncomingCetakan_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Damaged).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.NeverArrived).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.Property(e => e.Received).HasColumnType("money");

                entity.HasOne(d => d.StockIncomingCetakan)
                    .WithMany(p => p.StockIncomingCetakan_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingCetakan_Product_StockIncomingCetakan");

                entity.HasOne(d => d.Cetakan)
                    .WithMany(p => p.StockIncomingCetakanProducts)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingCetakan_Product_Cetakan");
            });


            modelBuilder.Entity<StockOutgoingCetakan>(entity =>
            {
                entity.ToTable("StockOutgoingCetakan");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idasal).HasColumnName("IDAsal");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idtujuan).HasColumnName("IDTujuan");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaAsal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaTujuan)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglEta)
                    .HasColumnType("date")
                    .HasColumnName("TglETA");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockOutgoingCetakans)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_StockOutgoingCetakan_Company");
            });

            modelBuilder.Entity<StockOutgoingCetakan_Product>(entity =>
            {
                entity.ToTable("StockOutgoingCetakan_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.HasOne(d => d.StockOutgoingCetakan)
                    .WithMany(p => p.StockOutgoingCetakan_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingCetakan_Product_StockOutgoingCetakan");

                entity.HasOne(d => d.Cetakan)
                    .WithMany(p => p.StockOutgoingCetakanProducts)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingCetakan_Product_StockProductCetakan");
            });


            modelBuilder.Entity<StockReceiveCetakan>(entity =>
            {
                entity.ToTable("StockReceiveCetakan");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NoDo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoDO");

                entity.Property(e => e.NoPo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoPO");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglInput).HasColumnType("datetime");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockReceiveCetakans)
                    .HasForeignKey(d => d.Idwarehouse)
                    .HasConstraintName("FK_StockReceiveCetakan_LocWarehouse");
            });

            modelBuilder.Entity<StockReceiveCetakan_Product>(entity =>
            {
                entity.ToTable("StockReceiveCetakan_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Damaged).HasColumnType("money");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.NeverArrived).HasColumnType("money");

                entity.Property(e => e.Ongkos).HasColumnType("money");

                entity.Property(e => e.OngkosPacking).HasColumnType("money");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.Property(e => e.Received).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveCetakan)
                    .WithMany(p => p.StockReceiveCetakan_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveCetakan_Product_StockReceiveCetakan");

                entity.HasOne(d => d.Cetakan)
                    .WithMany(p => p.StockReceiveCetakanProducts)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveCetakan_Product_Cetakan");
            });


            modelBuilder.Entity<SalesOrderPackaging>(entity =>
            {
                entity.ToTable("SalesOrderPackaging");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdproductDj).HasColumnName("IDProductDJ");

                entity.Property(e => e.IdproductGj).HasColumnName("IDProductGJ");

                entity.Property(e => e.IdproductLd).HasColumnName("IDProductLD");

                entity.Property(e => e.IdproductPg).HasColumnName("IDProductPG");

                entity.Property(e => e.Invoice)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.Property(e => e.TotalModalRupiah).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesOrderPackagings)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderPackaging_SalesOrder");

                entity.HasOne(d => d.Packaging)
                    .WithMany(p => p.SalesOrderPackagings)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderPackaging_Packaging");
            });

            modelBuilder.Entity<SalesOrderPG>(entity =>
            {
                entity.ToTable("SalesOrderPG");

                entity.HasIndex(e => new { e.Idform, e.Idproduct }, "index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BeratTimbang).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.DiscountBank).HasColumnType("money");

                entity.Property(e => e.DiscountGift).HasColumnType("money");

                entity.Property(e => e.DiscountNominal).HasColumnType("money");

                entity.Property(e => e.DiscountOther).HasColumnType("money");

                entity.Property(e => e.DiscountProgram).HasColumnType("money");

                entity.Property(e => e.DiscountProgramNominal).HasColumnType("money");

                entity.Property(e => e.DiscountPromo).HasColumnType("money");

                entity.Property(e => e.DiscountRound).HasColumnType("money");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Invoice)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MeperiodeMax).HasColumnName("MEPeriodeMax");

                entity.Property(e => e.MeperiodeMin).HasColumnName("MEPeriodeMin");

                entity.Property(e => e.Merumus)
                    .HasColumnType("money")
                    .HasColumnName("MERumus");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalTgp)
                    .HasColumnType("money")
                    .HasColumnName("ModalTGP");

                entity.Property(e => e.PoinPembagi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RPeriodeMin).HasColumnName("R_PeriodeMin");

                entity.Property(e => e.RRumus)
                    .HasColumnType("money")
                    .HasColumnName("R_Rumus");

                entity.Property(e => e.Tgpjual)
                    .HasColumnType("money")
                    .HasColumnName("TGPJual");

                entity.Property(e => e.Ti1PeriodeMin).HasColumnName("TI1_PeriodeMin");

                entity.Property(e => e.Ti1Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI1_Rumus");

                entity.Property(e => e.Ti2PeriodeMin).HasColumnName("TI2_PeriodeMin");

                entity.Property(e => e.Ti2Rumus)
                    .HasColumnType("money")
                    .HasColumnName("TI2_Rumus");

                entity.Property(e => e.TotalBayar).HasColumnType("money");

                entity.Property(e => e.TotalDp)
                    .HasColumnType("money")
                    .HasColumnName("TotalDP");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesOrderPGs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderPG_SalesOrder");

                entity.HasOne(d => d.StockProductPG)
                    .WithMany(p => p.SalesOrderPGs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderPG_StockProductPG");
            });

            modelBuilder.Entity<SalesOrderPGLEI>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesOrderPGLEI");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdsalesOrder).HasColumnName("IDSalesOrder");

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgpbeli)
                    .HasColumnType("decimal(32, 2)")
                    .HasColumnName("TGPBeli");

                entity.Property(e => e.Tgpjual)
                    .HasColumnType("decimal(32, 2)")
                    .HasColumnName("TGPJual");
            });

            modelBuilder.Entity<SalesOrderRepair>(entity =>
            {
                entity.ToTable("SalesOrderRepair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.DiscountGift).HasColumnType("money");

                entity.Property(e => e.DiscountNominal).HasColumnType("money");

                entity.Property(e => e.DiscountProgram).HasColumnType("money");

                entity.Property(e => e.DiscountProgramNominal).HasColumnType("money");

                entity.Property(e => e.DiscountRound).HasColumnType("money");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.Idcustomer).HasColumnName("IDCustomer");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdproductTitipan).HasColumnName("IDProductTitipan");

                entity.Property(e => e.Idrepair).HasColumnName("IDRepair");

                entity.Property(e => e.Idsales).HasColumnName("IDSales");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Paid).HasColumnType("money");

                entity.Property(e => e.SalesNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.Property(e => e.TotalBayar).HasColumnType("money");

                entity.Property(e => e.TotalBayarBeforeDisc).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.TotalRupiahBeforeDisc).HasColumnType("money");

                entity.Property(e => e.Unpaid).HasColumnType("money");

                entity.HasOne(d => d.DataCustomer)
                    .WithMany(p => p.SalesOrderRepairs)
                    .HasForeignKey(d => d.Idcustomer)
                    .HasConstraintName("FK_SalesOrderRepair_DataCustomer");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.SalesOrderRepairs)
                    .HasForeignKey(d => d.Idproduct)
                    .HasConstraintName("FK_SalesOrderRepair_StockProductDJ");

                entity.HasOne(d => d.DocRepairResult)
                    .WithMany(p => p.SalesOrderRepairs)
                    .HasForeignKey(d => d.Idrepair)
                    .HasConstraintName("FK_SalesOrderRepair_DocRepairResult");

                entity.HasOne(d => d.DataSales)
                    .WithMany(p => p.SalesOrderRepairs)
                    .HasForeignKey(d => d.Idsales)
                    .HasConstraintName("FK_SalesOrderRepair_DataSales");
            });

            modelBuilder.Entity<SalesOrderSouvenir>(entity =>
            {
                entity.ToTable("SalesOrderSouvenir");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdproductDj).HasColumnName("IDProductDJ");

                entity.Property(e => e.IdproductGj).HasColumnName("IDProductGJ");

                entity.Property(e => e.IdproductLd).HasColumnName("IDProductLD");

                entity.Property(e => e.IdproductPg).HasColumnName("IDProductPG");

                entity.Property(e => e.IdproductSouvenir).HasColumnName("IDProductSouvenir");

                entity.Property(e => e.Invoice)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.Property(e => e.TotalModalRupiah).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesOrderSouvenirs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderSouvenir_SalesOrder");

                entity.HasOne(d => d.Souvenir)
                    .WithMany(p => p.SalesOrderSouvenirs)
                    .HasForeignKey(d => d.Idproduct)
                    .HasConstraintName("FK_SalesOrderSouvenir_Souvenir");
            });

            modelBuilder.Entity<SalesPromo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesPromo");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Idpromo).HasColumnName("IDPromo");

                entity.Property(e => e.IdsalesOrder).HasColumnName("IDSalesOrder");
            });

            modelBuilder.Entity<SalesReceipt>(entity =>
            {
                entity.ToTable("SalesReceipt");

                entity.HasIndex(e => new { e.IdsalesOrder, e.NoSalesOrder, e.NomorDp, e.NomorInvoice }, "index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idrepair).HasColumnName("IDRepair");

                entity.Property(e => e.IdsalesOrder).HasColumnName("IDSalesOrder");

                entity.Property(e => e.NoSalesOrder)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomorDp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NomorDP");

                entity.Property(e => e.NomorInvoice)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TotalBayar).HasColumnType("money");

                entity.HasOne(d => d.DocRepairResult)
                    .WithMany(p => p.SalesReceipts)
                    .HasForeignKey(d => d.Idrepair)
                    .HasConstraintName("FK_SalesReceipt_DocRepairResult");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesReceipts)
                    .HasForeignKey(d => d.IdsalesOrder)
                    .HasConstraintName("FK_SalesReceipt_SalesOrder");
            });

            modelBuilder.Entity<SalesReceiptDetail>(entity =>
            {
                entity.ToTable("SalesReceiptDetail");

                entity.HasIndex(e => new { e.IdsalesReceipt, e.IdpaymentType, e.Idcard, e.Idprogram, e.IdbankIssuer, e.IdjenisKartuKredit, e.VoidReference }, "index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ccname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CCName");

                entity.Property(e => e.Ccnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CCNumber");

                entity.Property(e => e.EcrResponseValue)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ECR_ResponseValue");

                entity.Property(e => e.EcrVerification).HasColumnName("ECR_Verification");

                entity.Property(e => e.EcrVerificationTgl)
                    .HasColumnType("datetime")
                    .HasColumnName("ECR_VerificationTgl");

                entity.Property(e => e.GcVerification).HasColumnName("GC_Verification");

                entity.Property(e => e.GcVerificationTgl)
                    .HasColumnType("datetime")
                    .HasColumnName("GC_VerificationTgl");

                entity.Property(e => e.GcVoidVerification).HasColumnName("GC_VoidVerification");

                entity.Property(e => e.GcVoidVerificationTgl)
                    .HasColumnType("datetime")
                    .HasColumnName("GC_VoidVerificationTgl");

                entity.Property(e => e.IdbankIssuer).HasColumnName("IDBankIssuer");

                entity.Property(e => e.Idcard).HasColumnName("IDCard");

                entity.Property(e => e.Idedc).HasColumnName("IDEDC");

                entity.Property(e => e.IdjenisKartuKredit).HasColumnName("IDJenisKartuKredit");

                entity.Property(e => e.IdpaymentType).HasColumnName("IDPaymentType");

                entity.Property(e => e.Idprogram).HasColumnName("IDProgram");

                entity.Property(e => e.IdsalesReceipt).HasColumnName("IDSalesReceipt");

                entity.Property(e => e.Mdr)
                    .HasColumnType("money")
                    .HasColumnName("MDR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nominal).HasColumnType("money");

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.BankIssuer)
                    .WithMany(p => p.SalesReceiptDetails)
                    .HasForeignKey(d => d.IdbankIssuer)
                    .HasConstraintName("FK_SalesReceiptDetail_BankIssuer");

                entity.HasOne(d => d.CardType)
                    .WithMany(p => p.SalesReceiptDetails)
                    .HasForeignKey(d => d.Idcard)
                    .HasConstraintName("FK_SalesReceiptDetail_CardType");

                entity.HasOne(d => d.EDCList)
                    .WithMany(p => p.SalesReceiptDetails)
                    .HasForeignKey(d => d.Idedc)
                    .HasConstraintName("FK_SalesReceiptDetail_EDCList");

                entity.HasOne(d => d.PaymentType)
                    .WithMany(p => p.SalesReceiptDetails)
                    .HasForeignKey(d => d.IdpaymentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesReceiptDetail_PaymentType");

                entity.HasOne(d => d.ProgramCicilan)
                    .WithMany(p => p.SalesReceiptDetails)
                    .HasForeignKey(d => d.Idprogram)
                    .HasConstraintName("FK_SalesReceiptDetail_ProgramCicilan");

                entity.HasOne(d => d.SalesReceipt)
                    .WithMany(p => p.SalesReceiptDetails)
                    .HasForeignKey(d => d.IdsalesReceipt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesReceiptDetail_SalesReceipt");
            });

            modelBuilder.Entity<SalesReceiptDetailDebitLakuEmas>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdsalesReceiptDetail).HasColumnName("IDSalesReceiptDetail");

                entity.Property(e => e.Plu)
                    .HasMaxLength(200)
                    .HasColumnName("PLU");

                entity.Property(e => e.RateLeibuy)
                    .HasColumnType("money")
                    .HasColumnName("RateLEIBuy");

                entity.Property(e => e.RateLeimid)
                    .HasColumnType("money")
                    .HasColumnName("RateLEIMid");

                entity.Property(e => e.RateLeisell)
                    .HasColumnType("money")
                    .HasColumnName("RateLEISell");

                entity.Property(e => e.RateLm)
                    .HasColumnType("money")
                    .HasColumnName("RateLM");
            });

            modelBuilder.Entity<SalesReceiptDetailExtension>(entity =>
            {
                entity.ToTable("SalesReceiptDetailExtension");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.PaymentName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VerificationDateTime).HasColumnType("datetime");

                entity.Property(e => e.VerificationOperator)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VoidDateTime).HasColumnType("datetime");

                entity.Property(e => e.VoidOperator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.SalesReceiptDetail)
                    .WithOne(p => p.SalesReceiptDetailExtension)
                    .HasForeignKey<SalesReceiptDetailExtension>(d => d.Id)
                    .HasConstraintName("FK_SalesReceiptDetailExtension_SalesReceiptDetailExtension");
            });

            modelBuilder.Entity<SalesReceiptDetailLakuEmas>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.NoLakuEmas)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RateLm)
                    .HasColumnType("money")
                    .HasColumnName("RateLM");

                entity.Property(e => e.Value).HasColumnType("money");

                entity.Property(e => e.WeightLm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WeightLM");
            });

            modelBuilder.Entity<SalesReceiptDPPO>(entity =>
            {
                entity.ToTable("SalesReceiptDPPO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DiamondWeight1).HasColumnType("money");

                entity.Property(e => e.DiamondWeight2).HasColumnType("money");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.EstimasiHarga).HasColumnType("money");

                entity.Property(e => e.GoldWeight1).HasColumnType("money");

                entity.Property(e => e.GoldWeight2).HasColumnType("money");

                entity.Property(e => e.Idcustomer).HasColumnName("IDCustomer");

                entity.Property(e => e.Iddpporeference).HasColumnName("IDDPPOReference");

                entity.Property(e => e.IdfontType).HasColumnName("IDFontType");

                entity.Property(e => e.IdframeColor).HasColumnName("IDFrameColor");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.IdproductSample1).HasColumnName("IDProductSample1");

                entity.Property(e => e.IdproductSample2).HasColumnName("IDProductSample2");

                entity.Property(e => e.Idsales).HasColumnName("IDSales");

                entity.Property(e => e.IdsalesOrder).HasColumnName("IDSalesOrder");

                entity.Property(e => e.ImgSketch)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Inscription1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Inscription2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NomorDp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NomorDP");

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RingSize1).HasColumnType("money");

                entity.Property(e => e.RingSize2).HasColumnType("money");

                entity.Property(e => e.SalesNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDp).HasColumnName("StatusDP");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TotalBayar).HasColumnType("money");

                entity.Property(e => e.VoucherCode).HasMaxLength(30);

                entity.Property(e => e.VoucherNominal).HasColumnType("money");

                entity.HasOne(d => d.DataCustomer)
                    .WithMany(p => p.SalesReceiptDPPOs)
                    .HasForeignKey(d => d.Idcustomer)
                    .HasConstraintName("FK_SalesReceiptDPPO_DataCustomer");

                entity.HasOne(d => d.DataSales)
                    .WithMany(p => p.SalesReceiptDPPOs)
                    .HasForeignKey(d => d.Idsales)
                    .HasConstraintName("FK_SalesReceiptDPPO_DataSales");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesReceiptDPPOs)
                    .HasForeignKey(d => d.IdsalesOrder)
                    .HasConstraintName("FK_SalesReceiptDPPO_SalesOrder");
            });

            modelBuilder.Entity<SalesReceiptDPPODetail>(entity =>
            {
                entity.ToTable("SalesReceiptDPPODetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ccname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CCName");

                entity.Property(e => e.Ccnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CCNumber");

                entity.Property(e => e.IdbankIssuer).HasColumnName("IDBankIssuer");

                entity.Property(e => e.Idcard).HasColumnName("IDCard");

                entity.Property(e => e.Idedc).HasColumnName("IDEDC");

                entity.Property(e => e.IdjenisKartuKredit).HasColumnName("IDJenisKartuKredit");

                entity.Property(e => e.IdpaymentType).HasColumnName("IDPaymentType");

                entity.Property(e => e.Idprogram).HasColumnName("IDProgram");

                entity.Property(e => e.IdsalesReceipt).HasColumnName("IDSalesReceipt");

                entity.Property(e => e.Mdr)
                    .HasColumnType("money")
                    .HasColumnName("MDR");

                entity.Property(e => e.Nominal).HasColumnType("money");

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.BankIssuer)
                    .WithMany(p => p.SalesReceiptDPPODetails)
                    .HasForeignKey(d => d.IdbankIssuer)
                    .HasConstraintName("FK_SalesReceiptDPPODetail_BankIssuer");

                entity.HasOne(d => d.CardType)
                    .WithMany(p => p.SalesReceiptDPPODetails)
                    .HasForeignKey(d => d.Idcard)
                    .HasConstraintName("FK_SalesReceiptDPPODetail_CardType");

                entity.HasOne(d => d.EDCList)
                    .WithMany(p => p.SalesReceiptDPPODetails)
                    .HasForeignKey(d => d.Idedc)
                    .HasConstraintName("FK_SalesReceiptDPPODetail_EDCList");

                entity.HasOne(d => d.PaymentType)
                    .WithMany(p => p.SalesReceiptDPPODetails)
                    .HasForeignKey(d => d.IdpaymentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesReceiptDPPODetail_PaymentType");

                entity.HasOne(d => d.ProgramCicilan)
                    .WithMany(p => p.SalesReceiptDPPODetails)
                    .HasForeignKey(d => d.Idprogram)
                    .HasConstraintName("FK_SalesReceiptDPPODetail_ProgramCicilan");

                entity.HasOne(d => d.SalesReceiptDPPO)
                    .WithMany(p => p.SalesReceiptDPPODetails)
                    .HasForeignKey(d => d.IdsalesReceipt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesReceiptDPPODetail_SalesReceiptDPPO");
            });

            modelBuilder.Entity<SalesReceiptDPPODetailExtension>(entity =>
            {
                entity.ToTable("SalesReceiptDPPODetailExtension");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.PaymentName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VerificationDateTime).HasColumnType("datetime");

                entity.Property(e => e.VerificationOperator)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VoidDateTime).HasColumnType("datetime");

                entity.Property(e => e.VoidOperator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.SalesReceiptDPPODetail)
                    .WithOne(p => p.SalesReceiptDPPODetailExtension)
                    .HasForeignKey<SalesReceiptDPPODetailExtension>(d => d.Id)
                    .HasConstraintName("FK_SalesReceiptDPPODetailExtension_SalesReceiptDPPODetailExtension");
            });

            modelBuilder.Entity<SalesVoucher>(entity =>
            {
                entity.ToTable("SalesVoucher");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdsalesOrder).HasColumnName("IDSalesOrder");

                entity.Property(e => e.IdtypeVoucher)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDTypeVoucher");

                entity.Property(e => e.Issuer)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nominal).HasColumnType("money");

                entity.Property(e => e.NomorVoucher)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.TypeVoucher)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesVouchers)
                    .HasForeignKey(d => d.IdsalesOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesVoucher_SalesOrder");
            });

            modelBuilder.Entity<SettingsSegmen>(entity =>
            {
                entity.HasKey(e => new { e.Idcategory, e.Idlevel });

                entity.Property(e => e.Idcategory).HasColumnName("IDCategory");

                entity.Property(e => e.Idlevel).HasColumnName("IDLevel");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.SettingsSegmen)
                    .HasForeignKey(d => d.Idcategory)
                    .HasConstraintName("FK_SettingsSegmen_CharProductCategory");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.SettingsSegmen)
                    .HasForeignKey(d => d.Idlevel)
                    .HasConstraintName("FK_SettingsSegmen_CharProductLevel");
            });

            modelBuilder.Entity<SettingsStoneDist>(entity =>
            {
                entity.HasKey(e => new { e.Idcategory, e.Idlevel, e.Iddist });

                entity.ToTable("SettingsStoneDist");

                entity.Property(e => e.Idcategory).HasColumnName("IDCategory");

                entity.Property(e => e.Idlevel).HasColumnName("IDLevel");

                entity.Property(e => e.Iddist).HasColumnName("IDDist");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.SettingsStoneDists)
                    .HasForeignKey(d => d.Idcategory)
                    .HasConstraintName("FK_SettingsStoneDist_CharProductCategory");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.SettingsStoneDists)
                    .HasForeignKey(d => d.Iddist)
                    .HasConstraintName("FK_SettingsStoneDist_CharStoneDist");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.SettingsStoneDists)
                    .HasForeignKey(d => d.Idlevel)
                    .HasConstraintName("FK_SettingsStoneDist_CharProductLevel");
            });

            modelBuilder.Entity<Souvenir>(entity =>
            {
                entity.ToTable("Souvenir");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.ImgPicture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Kode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Satuan)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.Souvenirs)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Souvenir_CompanyBrand");
            });

            modelBuilder.Entity<StockActualDJ>(entity =>
            {
                entity.HasKey(e => e.Idproduct);

                entity.ToTable("StockActualDJ");

                entity.HasIndex(e => e.Idbrand, "IX_StockActualDJ");

                entity.HasIndex(e => e.Idlokasi, "IX_StockActualDJ_1");

                entity.Property(e => e.Idproduct)
                    .ValueGeneratedNever()
                    .HasColumnName("IDProduct");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LegacyPost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegacyPostTgl).HasColumnType("datetime");

                entity.Property(e => e.NamaLokasi)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockActualDJs)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualDJ_StockProductDJ");

                entity.HasOne(d => d.StockProductDJ)
                    .WithOne(p => p.StockActualDj)
                    .HasForeignKey<StockActualDJ>(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualDJ_StockActualDJ");
            });

            modelBuilder.Entity<StockActualDJRepair>(entity =>
            {
                entity.HasKey(e => e.IdrepairWorkOrder);

                entity.ToTable("StockActualDJRepair");

                entity.Property(e => e.IdrepairWorkOrder)
                    .ValueGeneratedNever()
                    .HasColumnName("IDRepairWorkOrder");

                entity.Property(e => e.RepairBonId).HasColumnName("RepairBonID");

                entity.Property(e => e.RepairBonNomor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RepairBrjid).HasColumnName("RepairBRJID");

                entity.Property(e => e.RepairBrjnomor)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RepairBRJNomor");

                entity.Property(e => e.RepairInvoiceId).HasColumnName("RepairInvoiceID");

                entity.Property(e => e.RepairInvoiceNomor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RepairReceiveNomor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RepairSpkid).HasColumnName("RepairSPKID");

                entity.Property(e => e.RepairSpknomor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RepairSPKNomor");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<StockActualGJ>(entity =>
            {
                entity.HasKey(e => e.Idproduct);

                entity.ToTable("StockActualGJ");

                entity.Property(e => e.Idproduct)
                    .ValueGeneratedNever()
                    .HasColumnName("IDProduct");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LegacyPost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegacyPostTgl).HasColumnType("datetime");

                entity.Property(e => e.NamaLokasi)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockActualGJs)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualGJ_StockProductGJ");

                entity.HasOne(d => d.StockProductGJ)
                    .WithOne(p => p.StockActualGJ)
                    .HasForeignKey<StockActualGJ>(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualGJ_StockActualGJ");
            });

            modelBuilder.Entity<StockActualLD>(entity =>
            {
                entity.HasKey(e => e.Idproduct);

                entity.ToTable("StockActualLD");

                entity.Property(e => e.Idproduct)
                    .ValueGeneratedNever()
                    .HasColumnName("IDProduct");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LegacyPost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegacyPostTgl).HasColumnType("datetime");

                entity.Property(e => e.NamaLokasi)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockActualLDs)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualLD_StockProductLD");

                entity.HasOne(d => d.StockProductLD)
                    .WithOne(p => p.StockActualLD)
                    .HasForeignKey<StockActualLD>(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualLD_StockActualLD");
            });

            modelBuilder.Entity<StockActualLD_Stone1B>(entity =>
            {
                entity.HasKey(e => e.Idproduct);

                entity.ToTable("StockActualLD_Stone1B");

                entity.Property(e => e.Idproduct)
                    .ValueGeneratedNever()
                    .HasColumnName("IDProduct");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LegacyPost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegacyPostTgl).HasColumnType("datetime");

                entity.Property(e => e.NamaLokasi)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockActualLD_Stone1Bs)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualLD_Stone1B_StockProductLD");

                entity.HasOne(d => d.StockProductLD_Stone1B)
                    .WithOne(p => p.StockActualLD_Stone1B)
                    .HasForeignKey<StockActualLD_Stone1B>(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualLD_Stone1B_StockActualLD_Stone1B");
            });

            modelBuilder.Entity<StockActualMounting>(entity =>
            {
                entity.HasKey(e => e.Idproduct);

                entity.ToTable("StockActualMounting");

                entity.Property(e => e.Idproduct)
                    .ValueGeneratedNever()
                    .HasColumnName("IDProduct");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LegacyPost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegacyPostTgl).HasColumnType("datetime");

                entity.Property(e => e.NamaLokasi)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockActualMountings)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualMounting_StockProductMounting");

                entity.HasOne(d => d.StockProductMounting)
                    .WithOne(p => p.StockActualMounting)
                    .HasForeignKey<StockActualMounting>(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualMounting_StockActualMounting");
            });

            modelBuilder.Entity<StockActualPackaging>(entity =>
            {
                entity.ToTable("StockActualPackaging");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Damaged).HasColumnType("money");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.InTransit).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaLokasi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NeverArrived).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.Packaging)
                    .WithMany(p => p.StockActualPackagings)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualPackaging_Packaging");
            });

            modelBuilder.Entity<StockActualPG>(entity =>
            {
                entity.HasKey(e => e.Idproduct);

                entity.ToTable("StockActualPG");

                entity.Property(e => e.Idproduct)
                    .ValueGeneratedNever()
                    .HasColumnName("IDProduct");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LegacyPost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegacyPostTgl).HasColumnType("datetime");

                entity.Property(e => e.NamaLokasi)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockActualPGs)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualPG_CompanyBrand");

                entity.HasOne(d => d.StockProductPG)
                    .WithOne(p => p.StockActualPG)
                    .HasForeignKey<StockActualPG>(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualPG_StockProductPG");
            });

            modelBuilder.Entity<StockActualSouvenir>(entity =>
            {
                entity.ToTable("StockActualSouvenir");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Damaged).HasColumnType("money");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.InTransit).HasColumnType("money");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaLokasi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NeverArrived).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.Souvenir)
                    .WithMany(p => p.StockActualSouvenirs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockActualSouvenir_Souvenir");
            });

            modelBuilder.Entity<StockAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockAll");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StockAudit>(entity =>
            {
                entity.ToTable("StockAudit");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FinishJam).HasColumnType("datetime");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.TotalItemActual).HasColumnType("money");

                entity.Property(e => e.TotalItemAudit).HasColumnType("money");
            });

            modelBuilder.Entity<StockAuditDetail>(entity =>
            {
                entity.ToTable("StockAudit_Detail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Iddj).HasColumnName("IDDJ");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idgj).HasColumnName("IDGJ");

                entity.Property(e => e.Idld).HasColumnName("IDLD");

                entity.Property(e => e.Idpg).HasColumnName("IDPG");

                entity.HasOne(d => d.StockAuditDJ)
                    .WithMany(p => p.StockAuditDetails)
                    .HasForeignKey(d => d.Iddj)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAudit_Detail_StockAuditDJ");

                entity.HasOne(d => d.StockAudit)
                    .WithMany(p => p.StockAuditDetails)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAudit_Detail_StockAudit");

                entity.HasOne(d => d.StockAuditGJ)
                    .WithMany(p => p.StockAuditDetails)
                    .HasForeignKey(d => d.Idgj)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAudit_Detail_StockAuditGJ");

                entity.HasOne(d => d.StockAuditLD)
                    .WithMany(p => p.StockAuditDetails)
                    .HasForeignKey(d => d.Idld)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAudit_Detail_StockAuditLD");

                entity.HasOne(d => d.StockAuditPG)
                    .WithMany(p => p.StockAuditDetails)
                    .HasForeignKey(d => d.Idpg)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAudit_Detail_StockAuditPG");
            });

            modelBuilder.Entity<StockAuditDJ>(entity =>
            {
                entity.ToTable("StockAuditDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FinishJam).HasColumnType("datetime");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.TotalItemActual).HasColumnType("money");

                entity.Property(e => e.TotalItemAudit).HasColumnType("money");
            });

            modelBuilder.Entity<StockAuditDJDetail>(entity =>
            {
                entity.ToTable("StockAuditDJDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NoMeja)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockAuditDJ)
                    .WithMany(p => p.StockAuditDJDetails)
                    .HasForeignKey(d => d.AuditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditDetail_StockAudit");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockAuditDJDetails)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditDetail_StockProductDJ");
            });

            modelBuilder.Entity<StockAuditGJ>(entity =>
            {
                entity.ToTable("StockAuditGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FinishJam).HasColumnType("datetime");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.TotalItemActual).HasColumnType("money");

                entity.Property(e => e.TotalItemAudit).HasColumnType("money");
            });

            modelBuilder.Entity<StockAuditGJDetail>(entity =>
            {
                entity.ToTable("StockAuditGJDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NoMeja)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockAuditGJ)
                    .WithMany(p => p.StockAuditGJDetails)
                    .HasForeignKey(d => d.AuditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditDetailGJ_StockAuditGJ");

                entity.HasOne(d => d.StockProductGJ)
                    .WithMany(p => p.StockAuditGJDetails)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditDetailGJ_StockProductGJ");
            });

            modelBuilder.Entity<StockAuditItemDJ>(entity =>
            {
                entity.ToTable("StockAuditItemDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockAuditDJ)
                    .WithMany(p => p.StockAuditItemDJs)
                    .HasForeignKey(d => d.AuditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditItemDJ_StockAuditDJ");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockAuditItemDJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditItemDJ_StockProductDJ");
            });

            modelBuilder.Entity<StockAuditItemGJ>(entity =>
            {
                entity.ToTable("StockAuditItemGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockAuditGJ)
                    .WithMany(p => p.StockAuditItemGJs)
                    .HasForeignKey(d => d.AuditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditItemGJ_StockAuditGJ");

                entity.HasOne(d => d.StockProductGJ)
                    .WithMany(p => p.StockAuditItemGJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditItemGJ_StockProductGJ");
            });

            modelBuilder.Entity<StockAuditItemLD>(entity =>
            {
                entity.ToTable("StockAuditItemLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockAuditLD)
                    .WithMany(p => p.StockAuditItemLDs)
                    .HasForeignKey(d => d.AuditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditItemLD_StockAuditLD");

                entity.HasOne(d => d.StockProductLD_Stone1B)
                    .WithMany(p => p.StockAuditItemLDs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditItemLD_StockProductLD_Stone1B");
            });

            modelBuilder.Entity<StockAuditItemPG>(entity =>
            {
                entity.ToTable("StockAuditItemPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockAuditPG)
                    .WithMany(p => p.StockAuditItemPGs)
                    .HasForeignKey(d => d.AuditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditItemPG_StockAuditPG");

                entity.HasOne(d => d.StockProductPG)
                    .WithMany(p => p.StockAuditItemPGs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditItemPG_StockProductPG");
            });

            modelBuilder.Entity<StockAuditLD>(entity =>
            {
                entity.ToTable("StockAuditLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FinishJam).HasColumnType("datetime");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.TotalItemActual).HasColumnType("money");

                entity.Property(e => e.TotalItemAudit).HasColumnType("money");
            });

            modelBuilder.Entity<StockAuditLDDetail>(entity =>
            {
                entity.ToTable("StockAuditLDDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NoMeja)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockAuditLD)
                    .WithMany(p => p.StockAuditLDDetails)
                    .HasForeignKey(d => d.AuditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditDetailLD_StockAuditLD");

                entity.HasOne(d => d.StockProductLD_Stone1B)
                    .WithMany(p => p.StockAuditLDDetails)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditDetailLD_StockProductLD_Stone1B");
            });

            modelBuilder.Entity<StockAuditPG>(entity =>
            {
                entity.ToTable("StockAuditPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FinishJam).HasColumnType("datetime");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.TotalItemActual).HasColumnType("money");

                entity.Property(e => e.TotalItemAudit).HasColumnType("money");
            });

            modelBuilder.Entity<StockAuditPGDetail>(entity =>
            {
                entity.ToTable("StockAuditPGDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NoMeja)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockAuditPG)
                    .WithMany(p => p.StockAuditPGDetails)
                    .HasForeignKey(d => d.AuditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditDetailPG_StockAuditPG");

                entity.HasOne(d => d.StockProductPG)
                    .WithMany(p => p.StockAuditPGDetails)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockAuditDetailPG_StockProductPG");
            });

            modelBuilder.Entity<StockAwalDJ>(entity =>
            {
                entity.ToTable("StockAwalDJ");

                entity.HasIndex(e => new { e.Idbrand, e.LocationType, e.Idlocation, e.ProductItem, e.ProductCategory, e.ProductLevel, e.StoneDist, e.Nomor, e.Periode }, "IX_StockAwalDJ")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaM).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idlocation).HasColumnName("IDLocation");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Periode).HasColumnType("datetime");
            });

            modelBuilder.Entity<CetakanPriceLog>(entity =>
            {
                entity.ToTable("CetakanPriceLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Kode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<PackagingPriceLog>(entity =>
            {
                entity.ToTable("PackagingPriceLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Kode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<SouvenirPriceLog>(entity =>
            {
                entity.ToTable("SouvenirPriceLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Kode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockAwalGJ>(entity =>
            {
                entity.ToTable("StockAwalGJ");

                entity.HasIndex(e => new { e.Idbrand, e.LocationType, e.Idlocation, e.ProductItem, e.ProductCategory, e.ProductLevel, e.StoneDist, e.Nomor, e.Periode }, "IX_StockAwalGJ")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaM).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idlocation).HasColumnName("IDLocation");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Periode).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockAwalLD>(entity =>
            {
                entity.ToTable("StockAwalLD");

                entity.HasIndex(e => new { e.Idbrand, e.LocationType, e.Idlocation, e.ProductItem, e.ProductCategory, e.ProductLevel, e.StoneDist, e.Nomor, e.Periode }, "IX_StockAwalLD")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaM).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idlocation).HasColumnName("IDLocation");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Periode).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockAwalPackaging>(entity =>
            {
                entity.ToTable("StockAwalPackaging");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idlocation).HasColumnName("IDLocation");

                entity.Property(e => e.Idpackage).HasColumnName("IDPackage");

                entity.Property(e => e.Periode)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((9999)-(12))-(31))");
            });

            modelBuilder.Entity<StockAwalPG>(entity =>
            {
                entity.ToTable("StockAwalPG");

                entity.HasIndex(e => new { e.Idbrand, e.LocationType, e.Idlocation, e.ProductItem, e.ProductCategory, e.ProductLevel, e.StoneDist, e.Nomor, e.Periode }, "IX_StockAwalPG")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaM).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idlocation).HasColumnName("IDLocation");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Periode).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockAwalSouvenir>(entity =>
            {
                entity.ToTable("StockAwalSouvenir");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idlocation).HasColumnName("IDLocation");

                entity.Property(e => e.Idsouvenir).HasColumnName("IDSouvenir");

                entity.Property(e => e.Periode)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((9999)-(12))-(31))");
            });

            modelBuilder.Entity<StockBasic>(entity =>
            {
                entity.ToTable("StockBasic");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.ProtoNomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StockCutoff>(entity =>
            {
                entity.ToTable("StockCutoff");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdcutoffAkhir).HasColumnName("IDCutoffAkhir");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TglCutoffAkhir).HasColumnType("datetime");

                entity.Property(e => e.TglCutoffAwal).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockCutoffIncoming>(entity =>
            {
                entity.ToTable("StockCutoff_Incoming");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idcutoff).HasColumnName("IDCutoff");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.LokasiId).HasColumnName("LokasiID");

                entity.Property(e => e.NomorPlu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NomorPLU");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSegmen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalButir).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.Property(e => e.TotalGross).HasColumnType("money");

                entity.Property(e => e.TotalNetto).HasColumnType("money");

                entity.Property(e => e.TransaksiId).HasColumnName("TransaksiID");

                entity.Property(e => e.TransaksiNomor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransaksiTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockCutoffInvalid>(entity =>
            {
                entity.ToTable("StockCutoff_Invalid");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idcutoff).HasColumnName("IDCutoff");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LokasiId).HasColumnName("LokasiID");

                entity.Property(e => e.NomorPlu)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NomorPLU");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StockCutoffOutgoing>(entity =>
            {
                entity.ToTable("StockCutoff_Outgoing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idcutoff).HasColumnName("IDCutoff");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.LokasiId).HasColumnName("LokasiID");

                entity.Property(e => e.NomorPlu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NomorPLU");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSegmen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalButir).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.Property(e => e.TotalGross).HasColumnType("money");

                entity.Property(e => e.TotalNetto).HasColumnType("money");

                entity.Property(e => e.TransaksiId).HasColumnName("TransaksiID");

                entity.Property(e => e.TransaksiNomor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransaksiTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockCutoffReceive>(entity =>
            {
                entity.ToTable("StockCutoff_Receive");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idcutoff).HasColumnName("IDCutoff");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.LokasiId).HasColumnName("LokasiID");

                entity.Property(e => e.NomorPlu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NomorPLU");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSegmen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalButir).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.Property(e => e.TotalGross).HasColumnType("money");

                entity.Property(e => e.TotalNetto).HasColumnType("money");

                entity.Property(e => e.TransaksiId).HasColumnName("TransaksiID");

                entity.Property(e => e.TransaksiNomor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransaksiTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockCutoffResell>(entity =>
            {
                entity.ToTable("StockCutoff_Resell");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idcutoff).HasColumnName("IDCutoff");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.LokasiId).HasColumnName("LokasiID");

                entity.Property(e => e.NomorPlu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NomorPLU");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSegmen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalButir).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.Property(e => e.TotalGross).HasColumnType("money");

                entity.Property(e => e.TotalNetto).HasColumnType("money");

                entity.Property(e => e.TransaksiId).HasColumnName("TransaksiID");

                entity.Property(e => e.TransaksiNomor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransaksiTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockCutoffRetire>(entity =>
            {
                entity.ToTable("StockCutoff_Retire");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idcutoff).HasColumnName("IDCutoff");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.LokasiId).HasColumnName("LokasiID");

                entity.Property(e => e.NomorPlu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NomorPLU");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSegmen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalButir).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.Property(e => e.TotalGross).HasColumnType("money");

                entity.Property(e => e.TotalNetto).HasColumnType("money");

                entity.Property(e => e.TransaksiId).HasColumnName("TransaksiID");

                entity.Property(e => e.TransaksiNomor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransaksiTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockCutoffReturn>(entity =>
            {
                entity.ToTable("StockCutoff_Return");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idcutoff).HasColumnName("IDCutoff");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.LokasiId).HasColumnName("LokasiID");

                entity.Property(e => e.NomorPlu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NomorPLU");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSegmen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalButir).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.Property(e => e.TotalGross).HasColumnType("money");

                entity.Property(e => e.TotalNetto).HasColumnType("money");

                entity.Property(e => e.TransaksiId).HasColumnName("TransaksiID");

                entity.Property(e => e.TransaksiNomor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransaksiTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockCutoffSalesOrder>(entity =>
            {
                entity.ToTable("StockCutoff_SalesOrder");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idcutoff).HasColumnName("IDCutoff");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.LokasiId).HasColumnName("LokasiID");

                entity.Property(e => e.NomorPlu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NomorPLU");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSegmen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalButir).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.Property(e => e.TotalGross).HasColumnType("money");

                entity.Property(e => e.TotalNetto).HasColumnType("money");

                entity.Property(e => e.TransaksiId).HasColumnName("TransaksiID");

                entity.Property(e => e.TransaksiNomor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransaksiTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockCutoffStockAkhir>(entity =>
            {
                entity.ToTable("StockCutoff_StockAkhir");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idcutoff).HasColumnName("IDCutoff");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.LokasiId).HasColumnName("LokasiID");

                entity.Property(e => e.NomorPlu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NomorPLU");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSegmen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalButir).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.Property(e => e.TotalGross).HasColumnType("money");

                entity.Property(e => e.TotalNetto).HasColumnType("money");
            });

            modelBuilder.Entity<StockCutoffStockAwal>(entity =>
            {
                entity.ToTable("StockCutoff_StockAwal");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idcutoff).HasColumnName("IDCutoff");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.LokasiId).HasColumnName("LokasiID");

                entity.Property(e => e.NomorPlu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NomorPLU");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSegmen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalButir).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.Property(e => e.TotalGross).HasColumnType("money");

                entity.Property(e => e.TotalNetto).HasColumnType("money");
            });

            modelBuilder.Entity<StockCutoffTradeIn>(entity =>
            {
                entity.ToTable("StockCutoff_TradeIn");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HargaJual).HasColumnType("money");

                entity.Property(e => e.HargaM).HasColumnType("money");

                entity.Property(e => e.Idcutoff).HasColumnName("IDCutoff");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.LokasiId).HasColumnName("LokasiID");

                entity.Property(e => e.NomorPlu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NomorPLU");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSegmen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalButir).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.Property(e => e.TotalGross).HasColumnType("money");

                entity.Property(e => e.TotalNetto).HasColumnType("money");

                entity.Property(e => e.TransaksiId).HasColumnName("TransaksiID");

                entity.Property(e => e.TransaksiNomor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransaksiTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StockIncomingDJ>(entity =>
            {
                entity.ToTable("StockIncomingDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idoutgoing).HasColumnName("IDOutgoing");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockOutgoingDJ)
                    .WithMany(p => p.StockIncomingDJs)
                    .HasForeignKey(d => d.Idoutgoing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingDJ_StockIncomingDJ");
            });

            modelBuilder.Entity<StockIncomingDJ_Product>(entity =>
            {
                entity.ToTable("StockIncomingDJ_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockIncomingDJ)
                    .WithMany(p => p.StockIncomingDJ_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingDJ_Product_StockIncomingDJ");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockIncomingDJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingDJ_Product_StockProductDJ");

                entity.HasOne(d => d.StockActualDJ)
                    .WithMany(p => p.StockIncomingDJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingDJ_Product_StockActualDJ");
            });

            modelBuilder.Entity<StockIncomingGJ>(entity =>
            {
                entity.ToTable("StockIncomingGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idoutgoing).HasColumnName("IDOutgoing");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockOutgoingGJ)
                    .WithMany(p => p.StockIncomingGJs)
                    .HasForeignKey(d => d.Idoutgoing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingGJ_StockIncomingGJ");
            });

            modelBuilder.Entity<StockIncomingGJ_Product>(entity =>
            {
                entity.ToTable("StockIncomingGJ_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockIncomingGJ)
                    .WithMany(p => p.StockIncomingGJ_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingGJ_Product_StockIncomingGJ");

                entity.HasOne(d => d.StockProductGJ)
                    .WithMany(p => p.StockIncomingGJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingGJ_Product_StockProductGJ");

                entity.HasOne(d => d.StockActualGJ)
                    .WithMany(p => p.StockIncomingGJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingGJ_Product_StockActualGJ");
            });

            modelBuilder.Entity<StockIncomingLD>(entity =>
            {
                entity.ToTable("StockIncomingLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idoutgoing).HasColumnName("IDOutgoing");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockOutgoingLD)
                    .WithMany(p => p.StockIncomingLDs)
                    .HasForeignKey(d => d.Idoutgoing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingLD_StockIncomingLD");
            });

            modelBuilder.Entity<StockIncomingLD_Product>(entity =>
            {
                entity.ToTable("StockIncomingLD_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockIncomingLD)
                    .WithMany(p => p.StockIncomingLD_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingLD_Product_StockIncomingLD");

                entity.HasOne(d => d.StockProductLD_Stone1B)
                    .WithMany(p => p.StockIncomingLD_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingLD_Product_StockProductLD_Stone1B");

                entity.HasOne(d => d.StockActualLD_Stone1B)
                    .WithMany(p => p.StockIncomingLD_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingLD_Product_StockActualLD_Stone1B");
            });

            modelBuilder.Entity<StockIncomingPackaging>(entity =>
            {
                entity.ToTable("StockIncomingPackaging");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idoutgoing).HasColumnName("IDOutgoing");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockOutgoingPackaging)
                    .WithMany(p => p.StockIncomingPackagings)
                    .HasForeignKey(d => d.Idoutgoing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingPackaging_StockIncomingPackaging");
            });

            modelBuilder.Entity<StockIncomingPackaging_Product>(entity =>
            {
                entity.ToTable("StockIncomingPackaging_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Damaged).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.NeverArrived).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.Property(e => e.Received).HasColumnType("money");

                entity.HasOne(d => d.StockIncomingPackaging)
                    .WithMany(p => p.StockIncomingPackaging_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingPackaging_Product_StockIncomingPackaging");

                entity.HasOne(d => d.Packaging)
                    .WithMany(p => p.StockIncomingPackagingProducts)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingPackaging_Product_Packaging");
            });

            modelBuilder.Entity<StockIncomingPG>(entity =>
            {
                entity.ToTable("StockIncomingPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idoutgoing).HasColumnName("IDOutgoing");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockOutgoingPG)
                    .WithMany(p => p.StockIncomingPGs)
                    .HasForeignKey(d => d.Idoutgoing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingPG_StockOutgoingPG");
            });

            modelBuilder.Entity<StockIncomingPG_Product>(entity =>
            {
                entity.ToTable("StockIncomingPG_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockIncomingPG)
                    .WithMany(p => p.StockIncomingPG_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingPG_Product_StockIncomingPG");

                entity.HasOne(d => d.StockProductPG)
                    .WithMany(p => p.StockIncomingPG_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingPG_Product_StockProductPG");

                entity.HasOne(d => d.StockActualPG)
                    .WithMany(p => p.StockIncomingPG_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingPG_Product_StockActualPG");
            });

            modelBuilder.Entity<StockIncomingSouvenir>(entity =>
            {
                entity.ToTable("StockIncomingSouvenir");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idoutgoing).HasColumnName("IDOutgoing");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockOutgoingSouvenir)
                    .WithMany(p => p.StockIncomingSouvenirs)
                    .HasForeignKey(d => d.Idoutgoing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingSouvenir_StockIncomingSouvenir");
            });

            modelBuilder.Entity<StockIncomingSouvenir_Product>(entity =>
            {
                entity.ToTable("StockIncomingSouvenir_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Damaged).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.NeverArrived).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.Property(e => e.Received).HasColumnType("money");

                entity.HasOne(d => d.StockIncomingSouvenir)
                    .WithMany(p => p.StockIncomingSouvenir_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingSouvenir_Product_StockIncomingSouvenir");

                entity.HasOne(d => d.Souvenir)
                    .WithMany(p => p.StockIncomingSouvenirProducts)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockIncomingSouvenir_Product_Souvenir");
            });

            modelBuilder.Entity<StockLedgerDJ>(entity =>
            {
                entity.ToTable("StockLedgerDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLokasi)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Value).HasColumnType("money");
            });

            modelBuilder.Entity<StockLedgerGJ>(entity =>
            {
                entity.ToTable("StockLedgerGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLokasi)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Value).HasColumnType("money");
            });

            modelBuilder.Entity<StockLedgerLd>(entity =>
            {
                entity.ToTable("StockLedgerLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLokasi)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Value).HasColumnType("money");
            });

            modelBuilder.Entity<StockLedgerPg>(entity =>
            {
                entity.ToTable("StockLedgerPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLokasi)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Value).HasColumnType("money");
            });

            modelBuilder.Entity<StockOutgoingDJ>(entity =>
            {
                entity.ToTable("StockOutgoingDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idasal).HasColumnName("IDAsal");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idtujuan).HasColumnName("IDTujuan");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaAsal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaTujuan)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglEta)
                    .HasColumnType("date")
                    .HasColumnName("TglETA");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockOutgoingDJs)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingDJ_CompanyBrand");
            });

            modelBuilder.Entity<StockOutgoingDJ_Product>(entity =>
            {
                entity.ToTable("StockOutgoingDJ_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.HasOne(d => d.StockOutgoingDJ)
                    .WithMany(p => p.StockOutgoingDJ_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingDJ_Product_StockOutgoingDJ");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockOutgoingDJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingDJ_Product_StockProductDJ");

                entity.HasOne(d => d.StockActualDJ)
                    .WithMany(p => p.StockOutgoingDJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingDJ_Product_StockActualDJ");
            });

            modelBuilder.Entity<StockOutgoingGJ>(entity =>
            {
                entity.ToTable("StockOutgoingGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idasal).HasColumnName("IDAsal");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idtujuan).HasColumnName("IDTujuan");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaAsal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaTujuan)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglEta)
                    .HasColumnType("date")
                    .HasColumnName("TglETA");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockOutgoingGJs)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingGJ_CompanyBrand");
            });

            modelBuilder.Entity<StockOutgoingGJ_Product>(entity =>
            {
                entity.ToTable("StockOutgoingGJ_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.HasOne(d => d.StockOutgoingGJ)
                    .WithMany(p => p.StockOutgoingGJ_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingGJ_Product_StockOutgoingGJ");

                entity.HasOne(d => d.StockProductGJ)
                    .WithMany(p => p.StockOutgoingGJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingGJ_Product_StockProductGJ");

                entity.HasOne(d => d.StockActualGJ)
                    .WithMany(p => p.StockOutgoingGJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingGJ_Product_StockActualGJ");
            });

            modelBuilder.Entity<StockOutgoingLD>(entity =>
            {
                entity.ToTable("StockOutgoingLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idasal).HasColumnName("IDAsal");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idtujuan).HasColumnName("IDTujuan");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaAsal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaTujuan)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglEta)
                    .HasColumnType("date")
                    .HasColumnName("TglETA");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockOutgoingLDs)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingLD_CompanyBrand");
            });

            modelBuilder.Entity<StockOutgoingLD_Product>(entity =>
            {
                entity.ToTable("StockOutgoingLD_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.HasOne(d => d.StockOutgoingLD)
                    .WithMany(p => p.StockOutgoingLD_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingLD_Product_StockOutgoingLD");

                entity.HasOne(d => d.StockProductLD_Stone1B)
                    .WithMany(p => p.StockOutgoingLD_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingLD_Product_StockProductLD_Stone1B");

                entity.HasOne(d => d.StockActualLD_Stone1B)
                    .WithMany(p => p.StockOutgoingLD_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingLD_Product_StockActualLD_Stone1B");
            });

            modelBuilder.Entity<StockOutgoingPackaging>(entity =>
            {
                entity.ToTable("StockOutgoingPackaging");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idasal).HasColumnName("IDAsal");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idtujuan).HasColumnName("IDTujuan");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaAsal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaTujuan)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglEta)
                    .HasColumnType("date")
                    .HasColumnName("TglETA");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockOutgoingPackagings)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_StockOutgoingPackaging_Company");
            });

            modelBuilder.Entity<StockOutgoingPackaging_Product>(entity =>
            {
                entity.ToTable("StockOutgoingPackaging_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.HasOne(d => d.StockOutgoingPackaging)
                    .WithMany(p => p.StockOutgoingPackaging_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingPackaging_Product_StockOutgoingPackaging");

                entity.HasOne(d => d.Packaging)
                    .WithMany(p => p.StockOutgoingPackagingProducts)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingPackaging_Product_StockProductPackaging");
            });

            modelBuilder.Entity<StockOutgoingPG>(entity =>
            {
                entity.ToTable("StockOutgoingPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idasal).HasColumnName("IDAsal");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idtujuan).HasColumnName("IDTujuan");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaAsal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaTujuan)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglEta)
                    .HasColumnType("date")
                    .HasColumnName("TglETA");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockOutgoingPGs)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingPG_CompanyBrand");
            });

            modelBuilder.Entity<StockOutgoingPG_Product>(entity =>
            {
                entity.ToTable("StockOutgoingPG_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.HasOne(d => d.StockOutgoingPG)
                    .WithMany(p => p.StockOutgoingPG_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingPG_Product_StockOutgoingPG");

                entity.HasOne(d => d.StockProductPG)
                    .WithMany(p => p.StockOutgoingPG_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingPG_Product_StockProductPG");

                entity.HasOne(d => d.StockActualPG)
                    .WithMany(p => p.StockOutgoingPG_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingPG_Product_StockActualPG");
            });

            modelBuilder.Entity<StockOutgoingSouvenir>(entity =>
            {
                entity.ToTable("StockOutgoingSouvenir");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idasal).HasColumnName("IDAsal");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idtujuan).HasColumnName("IDTujuan");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NamaAsal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaTujuan)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglEta)
                    .HasColumnType("date")
                    .HasColumnName("TglETA");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockOutgoingSouvenirs)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_StockOutgoingSouvenir_Company");
            });

            modelBuilder.Entity<StockOutgoingSouvenir_Product>(entity =>
            {
                entity.ToTable("StockOutgoingSouvenir_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.HasOne(d => d.StockOutgoingSouvenir)
                    .WithMany(p => p.StockOutgoingSouvenir_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingSouvenir_Product_StockOutgoingSouvenir");

                entity.HasOne(d => d.Souvenir)
                    .WithMany(p => p.StockOutgoingSouvenirProducts)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockOutgoingSouvenir_Product_StockProductSouvenir");
            });

            modelBuilder.Entity<StockProductDJ>(entity =>
            {
                entity.ToTable("StockProductDJ");

                entity.HasIndex(e => e.Idwarehouse, "IX_StockProductDJ");

                entity.HasIndex(e => e.Nomor, "IX_StockProductDJ_1");

                entity.HasIndex(e => e.RequestOutlet, "IX_StockProductDJ_2");

                entity.HasIndex(e => e.RequestCustomer, "IX_StockProductDJ_3");

                entity.HasIndex(e => new { e.ProtoNomor, e.Nomor }, "IX_StockProductDJ_ProtoNomor");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiredProduct).HasColumnType("date");

                entity.Property(e => e.ExpiredRequest).HasColumnType("date");

                entity.Property(e => e.HumanDesginerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HumanStockNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.ProductOrderNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProtoNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockProductDJs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .HasConstraintName("FK_StockProductDJ_LocWarehouse");
            });

            modelBuilder.Entity<StockProductDJ_CharDesign>(entity =>
            {
                entity.ToTable("StockProductDJ_CharDesign");

                entity.HasIndex(e => e.DesignCategory, "IX_StockProductDJ_CharDesign");

                entity.HasIndex(e => e.DesignConcept, "IX_StockProductDJ_CharDesign_1");

                entity.HasIndex(e => e.DesignProcess, "IX_StockProductDJ_CharDesign_2");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.StockProductDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.StockProductDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.StockProductDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.StockProductDJ)
                    .WithOne(p => p.StockProductDJ_CharDesign)
                    .HasForeignKey<StockProductDJ_CharDesign>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharDesign_StockProductDJ");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.StockProductDJ_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.StockProductDJ_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<StockProductDJ_CharProduct>(entity =>
            {
                entity.ToTable("StockProductDJ_CharProduct");

                entity.HasIndex(e => e.FrameColor, "IX_StockProductDJ_CharProduct");

                entity.HasIndex(e => e.FrameFinishing, "IX_StockProductDJ_CharProduct_1");

                entity.HasIndex(e => e.FrameMaterial, "IX_StockProductDJ_CharProduct_2");

                entity.HasIndex(e => e.ProcessCons, "IX_StockProductDJ_CharProduct_3");

                entity.HasIndex(e => e.ProductCategory, "IX_StockProductDJ_CharProduct_4");

                entity.HasIndex(e => e.ProductItem, "IX_StockProductDJ_CharProduct_5");

                entity.HasIndex(e => e.ProductLevel, "IX_StockProductDJ_CharProduct_6");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.Property(e => e.TukarB2)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((80.5))");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.StockProductDJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.StockProductDJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.StockProductDJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.StockProductDJ)
                    .WithOne(p => p.StockProductDJ_CharProduct)
                    .HasForeignKey<StockProductDJ_CharProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharProduct_StockProductDJ");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.StockProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.StockProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.StockProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.StockProductDJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.StockProductDJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<StockProductDJ_Costing>(entity =>
            {
                entity.ToTable("StockProductDJ_Costing");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Frame).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.OngkosLain).HasColumnType("money");

                entity.Property(e => e.OngkosLainCogs)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGS");

                entity.Property(e => e.Pembagi).HasColumnType("money");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalBiaya).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJ)
                    .WithOne(p => p.StockProductDJ_Costing)
                    .HasForeignKey<StockProductDJ_Costing>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_Costing_StockProductDJ");
            });

            modelBuilder.Entity<StockProductDJ_CostingProduct>(entity =>
            {
                entity.ToTable("StockProductDJ_CostingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJ)
                    .WithOne(p => p.StockProductDJ_CostingProduct)
                    .HasForeignKey<StockProductDJ_CostingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_CostingProduct_StockProductDJ");
            });

            modelBuilder.Entity<StockProductDJ_Finishing>(entity =>
            {
                entity.ToTable("StockProductDJ_Finishing");

                entity.HasIndex(e => e.Idfinishing, "IX_StockProductDJ_Finishing");

                entity.HasIndex(e => e.Idform, "IX_StockProductDJ_Finishing_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaModal).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.StockProductDJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockProductDJ_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJ_Finishing_StockProductDJ");
            });

            modelBuilder.Entity<StockProductDJ_PricingBiaya>(entity =>
            {
                entity.ToTable("StockProductDJ_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJ)
                    .WithOne(p => p.StockProductDJ_PricingBiaya)
                    .HasForeignKey<StockProductDJ_PricingBiaya>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_PricingBiaya_StockProductDJ");
            });

            modelBuilder.Entity<StockProductDJ_PricingMU>(entity =>
            {
                entity.ToTable("StockProductDJ_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockProductDJ)
                    .WithOne(p => p.StockProductDJ_PricingMU)
                    .HasForeignKey<StockProductDJ_PricingMU>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_PricingMU_StockProductDJ");
            });

            modelBuilder.Entity<StockProductDJ_PricingProduct>(entity =>
            {
                entity.ToTable("StockProductDJ_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJ)
                    .WithOne(p => p.StockProductDJ_PricingProduct)
                    .HasForeignKey<StockProductDJ_PricingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_PricingProduct_StockProductDJ");
            });

            modelBuilder.Entity<StockProductDJ_PricingSegmen>(entity =>
            {
                entity.ToTable("StockProductDJ_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJ)
                    .WithOne(p => p.StockProductDJ_PricingSegmen)
                    .HasForeignKey<StockProductDJ_PricingSegmen>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_PricingSegmen_StockProductDJ");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.StockProductDJ_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJ_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<StockProductDJ_Stone1A>(entity =>
            {
                entity.ToTable("StockProductDJ_Stone1A");

                entity.HasIndex(e => e.Idform, "IX_StockProductDJ_Stone1A");

                entity.HasIndex(e => e.Idstone, "IX_StockProductDJ_Stone1A_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.CertificateNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockProductDJ_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJ_Stone1A_StockProductDJ");
            });

            modelBuilder.Entity<StockProductDJ_Stone1B>(entity =>
            {
                entity.ToTable("StockProductDJ_Stone1B");

                entity.HasIndex(e => e.Idform, "IX_StockProductDJ_Stone1B");

                entity.HasIndex(e => e.Idstone, "IX_StockProductDJ_Stone1B_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.DiscMjual)
                    .HasColumnType("money")
                    .HasColumnName("DiscMJual");

                entity.Property(e => e.DiscRjual)
                    .HasColumnType("money")
                    .HasColumnName("DiscRJual");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.Giaexpired)
                    .HasColumnType("date")
                    .HasColumnName("GIAExpired");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaMinputH)
                    .HasColumnType("money")
                    .HasColumnName("HargaMInputH");

                entity.Property(e => e.HargaMinputP)
                    .HasColumnType("money")
                    .HasColumnName("HargaMInputP");

                entity.Property(e => e.HargaMjual)
                    .HasColumnType("money")
                    .HasColumnName("HargaMJual");

                entity.Property(e => e.HargaRjual)
                    .HasColumnType("money")
                    .HasColumnName("HargaRJual");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockProductDJ_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJ_Stone1B_StockProductDJ");
            });

            modelBuilder.Entity<StockProductDJ_Stone2>(entity =>
            {
                entity.ToTable("StockProductDJ_Stone2");

                entity.HasIndex(e => e.Idform, "IX_StockProductDJ_Stone2");

                entity.HasIndex(e => e.Idstone, "IX_StockProductDJ_Stone2_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockProductDJ_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJ_Stone2_StockProductDJ");
            });

            modelBuilder.Entity<StockProductDJ_Stone3>(entity =>
            {
                entity.ToTable("StockProductDJ_Stone3");

                entity.HasIndex(e => e.Idform, "IX_StockProductDJ_Stone3");

                entity.HasIndex(e => e.Idstone, "IX_StockProductDJ_Stone3_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockProductDJ_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJ_Stone3_StockProductDJ");
            });

            modelBuilder.Entity<StockProductDJ_Stone4>(entity =>
            {
                entity.ToTable("StockProductDJ_Stone4");

                entity.HasIndex(e => e.Idform, "IX_StockProductDJ_Stone4");

                entity.HasIndex(e => e.Idstone, "IX_StockProductDJ_Stone4_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockProductDJ_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJ_Stone4_StockProductDJ");
            });

            modelBuilder.Entity<StockProductDJ_Stone5>(entity =>
            {
                entity.ToTable("StockProductDJ_Stone5");

                entity.HasIndex(e => e.Idform, "IX_StockProductDJ_Stone5");

                entity.HasIndex(e => e.Idstone, "IX_StockProductDJ_Stone5_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockProductDJ_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJ_Stone5_StockProductDJ");
            });

            modelBuilder.Entity<StockProductDJCustomer>(entity =>
            {
                entity.ToTable("StockProductDJCustomer");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");
            });

            modelBuilder.Entity<StockProductDJCustomer_CharProduct>(entity =>
            {
                entity.ToTable("StockProductDJCustomer_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJCustomer)
                    .WithOne(p => p.StockProductDJCustomer_CharProduct)
                    .HasForeignKey<StockProductDJCustomer_CharProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJCustomer_CharProduct_StockProductDJ");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.StockProductDJCustomer_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductDJCustomer_CharProduct_CharProductItem");
            });

            modelBuilder.Entity<StockProductDJCustomer_Stone1A>(entity =>
            {
                entity.ToTable("StockProductDJCustomer_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJCustomer)
                    .WithMany(p => p.StockProductDJCustomer_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJCustomer_Stone1A_StockProductDJCustomer");
            });

            modelBuilder.Entity<StockProductDJCustomer_Stone1B>(entity =>
            {
                entity.ToTable("StockProductDJCustomer_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJCustomer)
                    .WithMany(p => p.StockProductDJCustomer_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJCustomer_Stone1B_StockProductDJCustomer");
            });

            modelBuilder.Entity<StockProductDJCustomer_Stone2>(entity =>
            {
                entity.ToTable("StockProductDJCustomer_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJCustomer)
                    .WithMany(p => p.StockProductDJCustomer_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJCustomer_Stone2_StockProductDJCustomer");
            });

            modelBuilder.Entity<StockProductDJCustomer_Stone3>(entity =>
            {
                entity.ToTable("StockProductDJCustomer_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJCustomer)
                    .WithMany(p => p.StockProductDJCustomer_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJCustomer_Stone3_StockProductDJCustomer");
            });

            modelBuilder.Entity<StockProductDJCustomer_Stone4>(entity =>
            {
                entity.ToTable("StockProductDJCustomer_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJCustomer)
                    .WithMany(p => p.StockProductDJCustomer_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJCustomer_Stone4_StockProductDJCustomer");
            });

            modelBuilder.Entity<StockProductDJCustomer_Stone5>(entity =>
            {
                entity.ToTable("StockProductDJCustomer_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductDJCustomer)
                    .WithMany(p => p.StockProductDJCustomer_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductDJCustomer_Stone5_StockProductDJCustomer");
            });

            modelBuilder.Entity<StockProductDJLD>(entity =>
            {
                entity.ToTable("StockProductDJLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.IdproductDj).HasColumnName("IDProductDJ");

                entity.Property(e => e.IdproductLd).HasColumnName("IDProductLD");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockProductDJLDs)
                    .HasForeignKey(d => d.IdproductDj)
                    .HasConstraintName("FK_StockProductDJLD_StockProductDJ");

                entity.HasOne(d => d.StockProductLD_Stone1B)
                    .WithMany(p => p.StockProductDJLDs)
                    .HasForeignKey(d => d.IdproductLd)
                    .HasConstraintName("FK_StockProductDJLD_StockProductLD_Stone1B");
            });

            modelBuilder.Entity<StockProductGJ>(entity =>
            {
                entity.ToTable("StockProductGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiredProduct).HasColumnType("date");

                entity.Property(e => e.ExpiredRequest).HasColumnType("date");

                entity.Property(e => e.HumanDesginerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HumanStockNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.ProductOrderNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProtoNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockProductGJs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .HasConstraintName("FK_StockProductGJ_LocWarehouse");
            });

            modelBuilder.Entity<StockProductGJ_CharDesign>(entity =>
            {
                entity.ToTable("StockProductGJ_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.StockProductGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.StockProductGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.StockProductGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.StockProductGJ)
                    .WithOne(p => p.StockProductGJ_CharDesign)
                    .HasForeignKey<StockProductGJ_CharDesign>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharDesign_StockProductGJ");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.StockProductGJ_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.StockProductGJ_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<StockProductGJ_CharProduct>(entity =>
            {
                entity.ToTable("StockProductGJ_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.StockProductGJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.StockProductGJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.StockProductGJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.StockProductGJ)
                    .WithOne(p => p.StockProductGJ_CharProduct)
                    .HasForeignKey<StockProductGJ_CharProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharProduct_StockProductGJ");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.StockProductGJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.StockProductGJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.StockProductGJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.StockProductGJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.StockProductGJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<StockProductGJ_Costing>(entity =>
            {
                entity.ToTable("StockProductGJ_Costing");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Frame).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.OngkosLain).HasColumnType("money");

                entity.Property(e => e.OngkosLainCogs)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGS");

                entity.Property(e => e.Pembagi).HasColumnType("money");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalBiaya).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.StockProductGJ)
                    .WithOne(p => p.StockProductGJ_Costing)
                    .HasForeignKey<StockProductGJ_Costing>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_Costing_StockProductGJ");
            });

            modelBuilder.Entity<StockProductGJ_CostingProduct>(entity =>
            {
                entity.ToTable("StockProductGJ_CostingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.StockProductGJ)
                    .WithOne(p => p.StockProductGJ_CostingProduct)
                    .HasForeignKey<StockProductGJ_CostingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_CostingProduct_StockProductGJ");
            });

            modelBuilder.Entity<StockProductGJ_Finishing>(entity =>
            {
                entity.ToTable("StockProductGJ_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaModal).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.StockProductGJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.StockProductGJ)
                    .WithMany(p => p.StockProductGJ_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductGJ_Finishing_StockProductGJ");
            });

            modelBuilder.Entity<StockProductGJ_PricingBiaya>(entity =>
            {
                entity.ToTable("StockProductGJ_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.StockProductGJ)
                    .WithOne(p => p.StockProductGJ_PricingBiaya)
                    .HasForeignKey<StockProductGJ_PricingBiaya>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_PricingBiaya_StockProductGJ");
            });

            modelBuilder.Entity<StockProductGJ_PricingMu>(entity =>
            {
                entity.ToTable("StockProductGJ_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockProductGJ)
                    .WithOne(p => p.StockProductGJ_PricingMu)
                    .HasForeignKey<StockProductGJ_PricingMu>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_PricingMU_StockProductGJ");
            });

            modelBuilder.Entity<StockProductGJ_PricingProduct>(entity =>
            {
                entity.ToTable("StockProductGJ_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.StockProductGJ)
                    .WithOne(p => p.StockProductGJ_PricingProduct)
                    .HasForeignKey<StockProductGJ_PricingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_PricingProduct_StockProductGJ");
            });

            modelBuilder.Entity<StockProductGJ_PricingSegmen>(entity =>
            {
                entity.ToTable("StockProductGJ_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductGJ)
                    .WithOne(p => p.StockProductGJ_PricingSegmen)
                    .HasForeignKey<StockProductGJ_PricingSegmen>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_PricingSegmen_StockProductGJ");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.StockProductGJ_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductGJ_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<StockProductLD>(entity =>
            {
                entity.ToTable("StockProductLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiredProduct).HasColumnType("date");

                entity.Property(e => e.ExpiredRequest).HasColumnType("date");

                entity.Property(e => e.HumanStockNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockProductLDs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .HasConstraintName("FK_StockProductLD_LocWarehouse");
            });

            modelBuilder.Entity<StockProductLD_CharDesign>(entity =>
            {
                entity.ToTable("StockProductLD_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.StockProductLD_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductLD_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.StockProductLD_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductLD_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.StockProductLD_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductLD_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.StockProductLD)
                    .WithOne(p => p.StockProductLD_CharDesign)
                    .HasForeignKey<StockProductLD_CharDesign>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductLD_CharDesign_StockProductLD");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.StockProductLD_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductLD_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.StockProductLD_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductLD_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<StockProductLD_Stone1B>(entity =>
            {
                entity.ToTable("StockProductLD_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BookExpire).HasColumnType("datetime");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.DiscMjual)
                    .HasColumnType("money")
                    .HasColumnName("DiscMJual");

                entity.Property(e => e.DiscRjual)
                    .HasColumnType("money")
                    .HasColumnName("DiscRJual");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaMinputH)
                    .HasColumnType("money")
                    .HasColumnName("HargaMInputH");

                entity.Property(e => e.HargaMinputP)
                    .HasColumnType("money")
                    .HasColumnName("HargaMInputP");

                entity.Property(e => e.HargaMjual)
                    .HasColumnType("money")
                    .HasColumnName("HargaMJual");

                entity.Property(e => e.HargaRjual)
                    .HasColumnType("money")
                    .HasColumnName("HargaRJual");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.ImgPicture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductLD)
                    .WithMany(p => p.StockProductLD_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductLD_Stone1B_StockProductLD");
            });

            modelBuilder.Entity<StockProductMounting>(entity =>
            {
                entity.ToTable("StockProductMounting");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiredProduct).HasColumnType("date");

                entity.Property(e => e.ExpiredRequest).HasColumnType("date");

                entity.Property(e => e.HumanDesginerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HumanStockNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.ProductOrderNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProtoNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockProductMountings)
                    .HasForeignKey(d => d.Idwarehouse)
                    .HasConstraintName("FK_StockProductMounting_LocWarehouse");
            });

            modelBuilder.Entity<StockProductMounting_CharDesign>(entity =>
            {
                entity.ToTable("StockProductMounting_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.StockProductMounting_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.StockProductMounting_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.StockProductMounting_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.StockProductMounting)
                    .WithOne(p => p.StockProductMounting_CharDesign)
                    .HasForeignKey<StockProductMounting_CharDesign>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharDesign_StockProductMounting");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.StockProductMounting_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.StockProductMounting_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<StockProductMounting_CharProduct>(entity =>
            {
                entity.ToTable("StockProductMounting_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.StockProductMounting_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.StockProductMounting_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.StockProductMounting_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.StockProductMounting)
                    .WithOne(p => p.StockProductMounting_CharProduct)
                    .HasForeignKey<StockProductMounting_CharProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharProduct_StockProductMounting");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.StockProductMounting_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.StockProductMounting_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.StockProductMounting_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.StockProductMounting_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.StockProductMounting_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<StockProductMounting_Costing>(entity =>
            {
                entity.ToTable("StockProductMounting_Costing");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Frame).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.OngkosLain).HasColumnType("money");

                entity.Property(e => e.OngkosLainCogs)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGS");

                entity.Property(e => e.Pembagi).HasColumnType("money");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalBiaya).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.StockProductMounting)
                    .WithOne(p => p.StockProductMounting_Costing)
                    .HasForeignKey<StockProductMounting_Costing>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_Costing_StockProductMounting");
            });

            modelBuilder.Entity<StockProductMounting_CostingProduct>(entity =>
            {
                entity.ToTable("StockProductMounting_CostingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.HasOne(d => d.StockProductMounting)
                    .WithOne(p => p.StockProductMounting_CostingProduct)
                    .HasForeignKey<StockProductMounting_CostingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_CostingProduct_StockProductMounting");
            });

            modelBuilder.Entity<StockProductMounting_Finishing>(entity =>
            {
                entity.ToTable("StockProductMounting_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaModal).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.StockProductMounting_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.StockProductMounting)
                    .WithMany(p => p.StockProductMounting_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockProductMounting_Finishing_StockProductMounting");
            });

            modelBuilder.Entity<StockProductMounting_PricingBiaya>(entity =>
            {
                entity.ToTable("StockProductMounting_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.StockProductMounting)
                    .WithOne(p => p.StockProductMounting_PricingBiaya)
                    .HasForeignKey<StockProductMounting_PricingBiaya>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_PricingBiaya_StockProductMounting");
            });

            modelBuilder.Entity<StockProductMounting_PricingMU>(entity =>
            {
                entity.ToTable("StockProductMounting_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockProductMounting)
                    .WithOne(p => p.StockProductMounting_PricingMU)
                    .HasForeignKey<StockProductMounting_PricingMU>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_PricingMU_StockProductMounting");
            });

            modelBuilder.Entity<StockProductMounting_PricingProduct>(entity =>
            {
                entity.ToTable("StockProductMounting_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.HasOne(d => d.StockProductMounting)
                    .WithOne(p => p.StockProductMounting_PricingProduct)
                    .HasForeignKey<StockProductMounting_PricingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_PricingProduct_StockProductMounting");
            });

            modelBuilder.Entity<StockProductMounting_PricingSegmen>(entity =>
            {
                entity.ToTable("StockProductMounting_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockProductMounting)
                    .WithOne(p => p.StockProductMounting_PricingSegmen)
                    .HasForeignKey<StockProductMounting_PricingSegmen>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_PricingSegmen_StockProductMounting");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.StockProductMounting_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductMounting_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<StockProductPG>(entity =>
            {
                entity.ToTable("StockProductPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DimensiR)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.EfektifGold)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EfektifTotalRate).HasColumnType("datetime");

                entity.Property(e => e.GoldRate)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GrossWeight)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Harga)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HumanStockNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idsupplier).HasColumnName("IDSupplier");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.KadarLogam)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KadarTukaranBeli)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KadarTukaranJual)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KodeBarang)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MountingM)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MountingMusd)
                    .HasColumnType("money")
                    .HasColumnName("MountingMUSD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MountingR)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MountingRusd)
                    .HasColumnType("money")
                    .HasColumnName("MountingRUSD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NamaBarang)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NettoWeight)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NoTtb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoTTB");

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomorSertifikat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.StatusDj).HasColumnName("StatusDJ");

                entity.Property(e => e.StoneQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.StoneWeight)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierSj)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SupplierSJ");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglTjt)
                    .HasColumnType("date")
                    .HasColumnName("TglTJT");

                entity.Property(e => e.TotalHarga)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalHarga24)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalHargaJual)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalHargaJualUsd)
                    .HasColumnType("money")
                    .HasColumnName("TotalHargaJualUSD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalHargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("TotalHargaUSD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalRate)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.StockProductPGs)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductPG_CharFrameColor");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockProductPGs)
                    .HasForeignKey(d => d.Idbrand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductPG_CompanyBrand");

                entity.HasOne(d => d.DataSupplier)
                    .WithMany(p => p.StockProductPGs)
                    .HasForeignKey(d => d.Idsupplier)
                    .HasConstraintName("FK_StockProductPG_DataSupplier");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockProductPGs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .HasConstraintName("FK_StockProductPG_LocWarehouse");

                entity.HasOne(d => d.CharGoldModel)
                    .WithMany(p => p.StockProductPGs)
                    .HasForeignKey(d => d.Model)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductPG_CharGoldModel");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.StockProductPGs)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductPG_CharProductItem");

                entity.HasOne(d => d.CharGoldLevel)
                    .WithMany(p => p.StockProductPGs)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductPG_CharGoldLevel");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.StockProductPGs)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockProductPG_CharTargetAge");
            });

            modelBuilder.Entity<StockProductWhitelist>(entity =>
            {
                entity.ToTable("StockProductWhitelist");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.NomorPlu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NomorPLU");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TipeProduct)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StockReal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockReal");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.InHand).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipe)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StockReceiveDJ>(entity =>
            {
                entity.ToTable("StockReceiveDJ");

                entity.HasIndex(e => e.Idmounting, "IX_StockReceiveDJ");

                entity.HasIndex(e => e.Idwarehouse, "IX_StockReceiveDJ_1");

                entity.HasIndex(e => e.OperatorTgl, "IX_StockReceiveDJ_10");

                entity.HasIndex(e => e.Id, "IX_StockReceiveDJ_11");

                entity.HasIndex(e => e.Nomor, "IX_StockReceiveDJ_12");

                entity.HasIndex(e => e.Nomor, "IX_StockReceiveDJ_2");

                entity.HasIndex(e => e.RequestCustomer, "IX_StockReceiveDJ_3");

                entity.HasIndex(e => e.RequestOutlet, "IX_StockReceiveDJ_4");

                entity.HasIndex(e => e.Idmounting, "IX_StockReceiveDJ_5");

                entity.HasIndex(e => e.HumanDesigner, "IX_StockReceiveDJ_6");

                entity.HasIndex(e => e.HumanStock, "IX_StockReceiveDJ_7");

                entity.HasIndex(e => e.SupplierNama, "IX_StockReceiveDJ_8");

                entity.HasIndex(e => e.Operator, "IX_StockReceiveDJ_9");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiredProduct).HasColumnType("date");

                entity.Property(e => e.ExpiredRequest).HasColumnType("date");

                entity.Property(e => e.HumanDesignerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HumanStockNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idmounting).HasColumnName("IDMounting");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NoValidasi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.ProductOrderNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProtoNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockReceiveDJs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_LocWarehouse");
            });

            modelBuilder.Entity<StockReceiveDJ_CharDesign>(entity =>
            {
                entity.ToTable("StockReceiveDJ_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.StockReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.StockReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.StockReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithOne(p => p.StockReceiveDJ_CharDesign)
                    .HasForeignKey<StockReceiveDJ_CharDesign>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveDJ_CharDesign_StockReceiveDJ");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.StockReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.StockReceiveDJ_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<StockReceiveDJ_CharProduct>(entity =>
            {
                entity.ToTable("StockReceiveDJ_CharProduct");

                entity.HasIndex(e => e.ProcessCons, "IX_StockReceiveDJ_CharProduct");

                entity.HasIndex(e => e.ProductCategory, "IX_StockReceiveDJ_CharProduct_1");

                entity.HasIndex(e => e.ProductItem, "IX_StockReceiveDJ_CharProduct_2");

                entity.HasIndex(e => e.ProductLevel, "IX_StockReceiveDJ_CharProduct_3");

                entity.HasIndex(e => e.Id, "IX_StockReceiveDJ_CharProduct_4");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.Property(e => e.TukarB2)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((80.5))");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.StockReceiveDJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.StockReceiveDJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.StockReceiveDJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithOne(p => p.StockReceiveDJ_CharProduct)
                    .HasForeignKey<StockReceiveDJ_CharProduct>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveDJ_CharProduct_StockReceiveDJ");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.StockReceiveDJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.StockReceiveDJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.StockReceiveDJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.StockReceiveDJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.StockReceiveDJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<StockReceiveDJ_Costing>(entity =>
            {
                entity.ToTable("StockReceiveDJ_Costing");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Frame).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.OngkosLain).HasColumnType("money");

                entity.Property(e => e.OngkosLainCogs)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGS");

                entity.Property(e => e.Pembagi).HasColumnType("money");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalBiaya).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithOne(p => p.StockReceiveDJ_Costing)
                    .HasForeignKey<StockReceiveDJ_Costing>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveDJ_Costing_StockReceiveDJ");
            });

            modelBuilder.Entity<StockReceiveDJ_CostingProduct>(entity =>
            {
                entity.ToTable("StockReceiveDJ_CostingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithOne(p => p.StockReceiveDJ_CostingProduct)
                    .HasForeignKey<StockReceiveDJ_CostingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_CostingProduct_StockReceiveDJ");
            });

            modelBuilder.Entity<StockReceiveDJ_Finishing>(entity =>
            {
                entity.ToTable("StockReceiveDJ_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaModal).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.StockReceiveDJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithMany(p => p.StockReceiveDJ_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockReceiveDJ_Finishing_StockReceiveDJ");
            });

            modelBuilder.Entity<StockReceiveDJ_PricingBiaya>(entity =>
            {
                entity.ToTable("StockReceiveDJ_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithOne(p => p.StockReceiveDJ_PricingBiaya)
                    .HasForeignKey<StockReceiveDJ_PricingBiaya>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveDJ_PricingBiaya_StockReceiveDJ");
            });

            modelBuilder.Entity<StockReceiveDJ_PricingMU>(entity =>
            {
                entity.ToTable("StockReceiveDJ_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.Mrate)
                    .HasColumnType("money")
                    .HasColumnName("MRate");

                entity.Property(e => e.Mrupiah)
                    .HasColumnType("money")
                    .HasColumnName("MRupiah");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithOne(p => p.StockReceiveDJ_PricingMU)
                    .HasForeignKey<StockReceiveDJ_PricingMU>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveDJ_PricingMU_StockReceiveDJ");
            });

            modelBuilder.Entity<StockReceiveDJ_PricingProduct>(entity =>
            {
                entity.ToTable("StockReceiveDJ_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithOne(p => p.StockReceiveDJ_PricingProduct)
                    .HasForeignKey<StockReceiveDJ_PricingProduct>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveDJ_PricingProduct_StockReceiveDJ");
            });

            modelBuilder.Entity<StockReceiveDJ_PricingSegmen>(entity =>
            {
                entity.ToTable("StockReceiveDJ_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithOne(p => p.StockReceiveDJ_PricingSegmen)
                    .HasForeignKey<StockReceiveDJ_PricingSegmen>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveDJ_PricingSegmen_StockReceiveDJ");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.StockReceiveDJ_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJ_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<StockReceiveDJ_Stone1A>(entity =>
            {
                entity.ToTable("StockReceiveDJ_Stone1A");

                entity.HasIndex(e => e.Idstone, "IX_StockReceiveDJ_Stone1A");

                entity.HasIndex(e => e.Idform, "IX_StockReceiveDJ_Stone1A_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.CertificateNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TglCertificate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithMany(p => p.StockReceiveDJ_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockReceiveDJ_Stone1A_StockReceiveDJ");
            });

            modelBuilder.Entity<StockReceiveDJ_Stone1B>(entity =>
            {
                entity.ToTable("StockReceiveDJ_Stone1B");

                entity.HasIndex(e => e.Idform, "IX_StockReceiveDJ_Stone1B");

                entity.HasIndex(e => e.Idstone, "IX_StockReceiveDJ_Stone1B_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaMinputH)
                    .HasColumnType("money")
                    .HasColumnName("HargaMInputH");

                entity.Property(e => e.HargaMinputP)
                    .HasColumnType("money")
                    .HasColumnName("HargaMInputP");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TglGia)
                    .HasColumnType("date")
                    .HasColumnName("TglGIA");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithMany(p => p.StockReceiveDJ_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockReceiveDJ_Stone1B_StockReceiveDJ");
            });

            modelBuilder.Entity<StockReceiveDJ_Stone2>(entity =>
            {
                entity.ToTable("StockReceiveDJ_Stone2");

                entity.HasIndex(e => e.Idform, "IX_StockReceiveDJ_Stone2");

                entity.HasIndex(e => e.Idstone, "IX_StockReceiveDJ_Stone2_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TglGia)
                    .HasColumnType("date")
                    .HasColumnName("TglGIA");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithMany(p => p.StockReceiveDJ_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockReceiveDJ_Stone2_StockReceiveDJ");
            });

            modelBuilder.Entity<StockReceiveDJ_Stone3>(entity =>
            {
                entity.ToTable("StockReceiveDJ_Stone3");

                entity.HasIndex(e => e.Idform, "IX_StockReceiveDJ_Stone3");

                entity.HasIndex(e => e.Idstone, "IX_StockReceiveDJ_Stone3_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TglGia)
                    .HasColumnType("date")
                    .HasColumnName("TglGIA");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithMany(p => p.StockReceiveDJ_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockReceiveDJ_Stone3_StockReceiveDJ");
            });

            modelBuilder.Entity<StockReceiveDJ_Stone4>(entity =>
            {
                entity.ToTable("StockReceiveDJ_Stone4");

                entity.HasIndex(e => e.Idform, "IX_StockReceiveDJ_Stone4");

                entity.HasIndex(e => e.Idstone, "IX_StockReceiveDJ_Stone4_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithMany(p => p.StockReceiveDJ_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockReceiveDJ_Stone4_StockReceiveDJ");
            });

            modelBuilder.Entity<StockReceiveDJ_Stone5>(entity =>
            {
                entity.ToTable("StockReceiveDJ_Stone5");

                entity.HasIndex(e => e.Idform, "IX_StockReceiveDJ_Stone5");

                entity.HasIndex(e => e.Idstone, "IX_StockReceiveDJ_Stone5_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithMany(p => p.StockReceiveDJ_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockReceiveDJ_Stone5_StockReceiveDJ");
            });

            modelBuilder.Entity<StockReceiveDJLegacy>(entity =>
            {
                entity.ToTable("StockReceiveDJLegacy");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.M).HasColumnType("money");

                entity.Property(e => e.Plu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PLU");

                entity.HasOne(d => d.StockReceiveDJ)
                    .WithOne(p => p.StockReceiveDJLegacy)
                    .HasForeignKey<StockReceiveDJLegacy>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveDJLegacy_StockProductDJ");
            });

            modelBuilder.Entity<StockReceiveGJ>(entity =>
            {
                entity.ToTable("StockReceiveGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiredProduct).HasColumnType("date");

                entity.Property(e => e.ExpiredRequest).HasColumnType("date");

                entity.Property(e => e.HumanDesignerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HumanStockNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idmounting).HasColumnName("IDMounting");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NoValidasi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.ProductOrderNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProtoNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.IdwarehouseNavigation)
                    .WithMany(p => p.StockReceiveGJs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_LocWarehouse");
            });

            modelBuilder.Entity<StockReceiveGJ_CharDesign>(entity =>
            {
                entity.ToTable("StockReceiveGJ_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.DesignCategoryNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.DesignConceptNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.DesignProcessNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StockReceiveGjCharDesign)
                    .HasForeignKey<StockReceiveGJ_CharDesign>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveGJ_CharDesign_StockReceiveGJ");

                entity.HasOne(d => d.TargetAgeNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharDesign_CharTargetAge");

                entity.HasOne(d => d.TargetGenderNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<StockReceiveGJ_CharProduct>(entity =>
            {
                entity.ToTable("StockReceiveGJ_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.FrameColorNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharProduct_CharFrameColor");

                entity.HasOne(d => d.FrameFinishingNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.FrameMaterialNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StockReceiveGjCharProduct)
                    .HasForeignKey<StockReceiveGJ_CharProduct>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveGJ_CharProduct_StockReceiveGJ");

                entity.HasOne(d => d.ProcessConsNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharProduct_CharProcessCons");

                entity.HasOne(d => d.ProductCategoryNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharProduct_CharProductCategory");

                entity.HasOne(d => d.ProductItemNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharProduct_CharProductItem");

                entity.HasOne(d => d.ProductLevelNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharProduct_CharProductLevel");

                entity.HasOne(d => d.StoneDistNavigation)
                    .WithMany(p => p.StockReceiveGJ_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<StockReceiveGJ_Costing>(entity =>
            {
                entity.ToTable("StockReceiveGJ_Costing");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Frame).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.OngkosLain).HasColumnType("money");

                entity.Property(e => e.OngkosLainCogs)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGS");

                entity.Property(e => e.Pembagi).HasColumnType("money");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalBiaya).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StockReceiveGjCosting)
                    .HasForeignKey<StockReceiveGJ_Costing>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveGJ_Costing_StockReceiveGJ");
            });

            modelBuilder.Entity<StockReceiveGJ_CostingProduct>(entity =>
            {
                entity.ToTable("StockReceiveGJ_CostingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StockReceiveGjCostingProduct)
                    .HasForeignKey<StockReceiveGJ_CostingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_CostingProduct_StockReceiveGJ");
            });

            modelBuilder.Entity<StockReceiveGJ_Finishing>(entity =>
            {
                entity.ToTable("StockReceiveGJ_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaModal).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.IdfinishingNavigation)
                    .WithMany(p => p.StockReceiveGJ_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.IdformNavigation)
                    .WithMany(p => p.StockReceiveGjFinishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockReceiveGJ_Finishing_StockReceiveGJ");
            });

            modelBuilder.Entity<StockReceiveGJ_PricingBiaya>(entity =>
            {
                entity.ToTable("StockReceiveGJ_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StockReceiveGjPricingBiaya)
                    .HasForeignKey<StockReceiveGJ_PricingBiaya>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveGJ_PricingBiaya_StockReceiveGJ");
            });

            modelBuilder.Entity<StockReceiveGJ_PricingMU>(entity =>
            {
                entity.ToTable("StockReceiveGJ_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StockReceiveGjPricingMu)
                    .HasForeignKey<StockReceiveGJ_PricingMU>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveGJ_PricingMU_StockReceiveGJ");
            });

            modelBuilder.Entity<StockReceiveGJ_PricingProduct>(entity =>
            {
                entity.ToTable("StockReceiveGJ_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.Property(e => e.TotalStone1A).HasColumnType("money");

                entity.Property(e => e.TotalStone1B).HasColumnType("money");

                entity.Property(e => e.TotalStone2).HasColumnType("money");

                entity.Property(e => e.TotalStone3).HasColumnType("money");

                entity.Property(e => e.TotalStone4).HasColumnType("money");

                entity.Property(e => e.TotalStone5).HasColumnType("money");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StockReceiveGjPricingProduct)
                    .HasForeignKey<StockReceiveGJ_PricingProduct>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveGJ_PricingProduct_StockReceiveGJ");
            });

            modelBuilder.Entity<StockReceiveGJ_PricingSegmen>(entity =>
            {
                entity.ToTable("StockReceiveGJ_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StockReceiveGjPricingSegman)
                    .HasForeignKey<StockReceiveGJ_PricingSegmen>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveGJ_PricingSegmen_StockReceiveGJ");

                entity.HasOne(d => d.ProductSegmenNavigation)
                    .WithMany(p => p.StockReceiveGJ_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJ_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<StockReceiveGJLegacy>(entity =>
            {
                entity.ToTable("StockReceiveGJLegacy");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.M).HasColumnType("money");

                entity.Property(e => e.Plu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PLU");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StockReceiveGJLegacy)
                    .HasForeignKey<StockReceiveGJLegacy>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveGJLegacy_StockProductGJ");
            });

            modelBuilder.Entity<StockReceiveLD>(entity =>
            {
                entity.ToTable("StockReceiveLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiredProduct).HasColumnType("date");

                entity.Property(e => e.ExpiredRequest).HasColumnType("date");

                entity.Property(e => e.HumanStockNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.IdwarehouseNavigation)
                    .WithMany(p => p.StockReceiveLDs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveLD_LocWarehouse");
            });

            modelBuilder.Entity<StockReceiveLD_CharDesign>(entity =>
            {
                entity.ToTable("StockReceiveLD_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.HasOne(d => d.DesignCategoryNavigation)
                    .WithMany(p => p.StockReceiveLD_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveLD_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.DesignConceptNavigation)
                    .WithMany(p => p.StockReceiveLD_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveLD_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.DesignProcessNavigation)
                    .WithMany(p => p.StockReceiveLD_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveLD_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StockReceiveLdCharDesign)
                    .HasForeignKey<StockReceiveLD_CharDesign>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveLD_CharDesign_StockReceiveLD");

                entity.HasOne(d => d.TargetAgeNavigation)
                    .WithMany(p => p.StockReceiveLD_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveLD_CharDesign_CharTargetAge");

                entity.HasOne(d => d.TargetGenderNavigation)
                    .WithMany(p => p.StockReceiveLD_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveLD_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<StockReceiveLD_Stone1A>(entity =>
            {
                entity.ToTable("StockReceiveLD_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.IdformNavigation)
                    .WithMany(p => p.StockReceiveLdStone1As)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockReceiveLD_Stone1A_StockReceiveLD");
            });

            modelBuilder.Entity<StockReceiveLD_Stone1B>(entity =>
            {
                entity.ToTable("StockReceiveLD_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiT).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Gia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GIA");

                entity.Property(e => e.HargaInputH).HasColumnType("money");

                entity.Property(e => e.HargaInputP).HasColumnType("money");

                entity.Property(e => e.HargaMinputH)
                    .HasColumnType("money")
                    .HasColumnName("HargaMInputH");

                entity.Property(e => e.HargaMinputP)
                    .HasColumnType("money")
                    .HasColumnName("HargaMInputP");

                entity.Property(e => e.HargaSatuan).HasColumnType("money");

                entity.Property(e => e.HargaSatuanM).HasColumnType("money");

                entity.Property(e => e.HargaTotal).HasColumnType("money");

                entity.Property(e => e.HargaTotalM).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.ImgPicture)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.IdformNavigation)
                    .WithMany(p => p.StockReceiveLdStone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockReceiveLD_Stone1B_StockReceiveLD");
            });

            modelBuilder.Entity<StockReceiveLDLegacy>(entity =>
            {
                entity.ToTable("StockReceiveLDLegacy");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.M).HasColumnType("money");

                entity.Property(e => e.Plu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PLU");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.StockReceiveLDLegacy)
                    .HasForeignKey<StockReceiveLDLegacy>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveLDLegacy_StockProductLD_stone1B");
            });

            modelBuilder.Entity<StockReceiveMounting>(entity =>
            {
                entity.ToTable("StockReceiveMounting");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiredProduct).HasColumnType("date");

                entity.Property(e => e.ExpiredRequest).HasColumnType("date");

                entity.Property(e => e.HumanDesignerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HumanStockNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.ProductOrderNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProtoNomor).IsUnicode(false);

                entity.Property(e => e.RequestCustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutletNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockReceiveMountings)
                    .HasForeignKey(d => d.Idwarehouse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_LocWarehouse");
            });

            modelBuilder.Entity<StockReceiveMounting_CharDesign>(entity =>
            {
                entity.ToTable("StockReceiveMounting_CharDesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Grafir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Naming)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CharDesignCategory)
                    .WithMany(p => p.StockReceiveMounting_CharDesigns)
                    .HasForeignKey(d => d.DesignCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharDesign_CharDesignCategory");

                entity.HasOne(d => d.CharDesignConcept)
                    .WithMany(p => p.StockReceiveMounting_CharDesigns)
                    .HasForeignKey(d => d.DesignConcept)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharDesign_CharDesignConcept");

                entity.HasOne(d => d.CharDesignProcess)
                    .WithMany(p => p.StockReceiveMounting_CharDesigns)
                    .HasForeignKey(d => d.DesignProcess)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharDesign_CharDesignProcess");

                entity.HasOne(d => d.StockReceiveMounting)
                    .WithOne(p => p.StockReceiveMounting_CharDesign)
                    .HasForeignKey<StockReceiveMounting_CharDesign>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveMounting_CharDesign_StockReceiveMounting");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.StockReceiveMounting_CharDesigns)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharDesign_CharTargetAge");

                entity.HasOne(d => d.CharTargetGender)
                    .WithMany(p => p.StockReceiveMounting_CharDesigns)
                    .HasForeignKey(d => d.TargetGender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharDesign_CharTargetGender");
            });

            modelBuilder.Entity<StockReceiveMounting_CharProduct>(entity =>
            {
                entity.ToTable("StockReceiveMounting_CharProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensiD).HasColumnType("money");

                entity.Property(e => e.DimensiL).HasColumnType("money");

                entity.Property(e => e.DimensiP).HasColumnType("money");

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.StoneCarat).HasColumnType("money");

                entity.Property(e => e.StoneQty).HasColumnType("money");

                entity.Property(e => e.StoneWeight).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.StockReceiveMounting_CharProducts)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharProduct_CharFrameColor");

                entity.HasOne(d => d.CharFrameFinishing)
                    .WithMany(p => p.StockReceiveMounting_CharProducts)
                    .HasForeignKey(d => d.FrameFinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharProduct_CharFrameFinishing");

                entity.HasOne(d => d.CharFrameMaterial)
                    .WithMany(p => p.StockReceiveMounting_CharProducts)
                    .HasForeignKey(d => d.FrameMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharProduct_CharFrameMaterial");

                entity.HasOne(d => d.StockReceiveMounting)
                    .WithOne(p => p.StockReceiveMounting_CharProduct)
                    .HasForeignKey<StockReceiveMounting_CharProduct>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveMounting_CharProduct_StockReceiveMounting");

                entity.HasOne(d => d.CharProcessCon)
                    .WithMany(p => p.StockReceiveMounting_CharProducts)
                    .HasForeignKey(d => d.ProcessCons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharProduct_CharProcessCons");

                entity.HasOne(d => d.CharProductCategory)
                    .WithMany(p => p.StockReceiveMounting_CharProducts)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharProduct_CharProductCategory");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.StockReceiveMounting_CharProducts)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharProduct_CharProductItem");

                entity.HasOne(d => d.CharProductLevel)
                    .WithMany(p => p.StockReceiveMounting_CharProducts)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharProduct_CharProductLevel");

                entity.HasOne(d => d.CharStoneDist)
                    .WithMany(p => p.StockReceiveMounting_CharProducts)
                    .HasForeignKey(d => d.StoneDist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CharProduct_CharStoneDist");
            });

            modelBuilder.Entity<StockReceiveMounting_Costing>(entity =>
            {
                entity.ToTable("StockReceiveMounting_Costing");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Frame).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.OngkosLain).HasColumnType("money");

                entity.Property(e => e.OngkosLainCogs)
                    .HasColumnType("money")
                    .HasColumnName("OngkosLainCOGS");

                entity.Property(e => e.Pembagi).HasColumnType("money");

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.TotalBiaya).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveMounting)
                    .WithOne(p => p.StockReceiveMounting_Costing)
                    .HasForeignKey<StockReceiveMounting_Costing>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveMounting_Costing_StockReceiveMounting");
            });

            modelBuilder.Entity<StockReceiveMounting_CostingProduct>(entity =>
            {
                entity.ToTable("StockReceiveMounting_CostingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveMounting)
                    .WithOne(p => p.StockReceiveMounting_CostingProduct)
                    .HasForeignKey<StockReceiveMounting_CostingProduct>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_CostingProduct_StockReceiveMounting");
            });

            modelBuilder.Entity<StockReceiveMounting_Finishing>(entity =>
            {
                entity.ToTable("StockReceiveMounting_Finishing");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Biaya).HasColumnType("money");

                entity.Property(e => e.BiayaModal).HasColumnType("money");

                entity.Property(e => e.Efektif).HasColumnType("datetime");

                entity.Property(e => e.Idfinishing).HasColumnName("IDFinishing");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.HasOne(d => d.CharProcessFinishing)
                    .WithMany(p => p.StockReceiveMounting_Finishings)
                    .HasForeignKey(d => d.Idfinishing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_Finishing_CharProcessFinishing");

                entity.HasOne(d => d.StockReceiveMounting)
                    .WithMany(p => p.StockReceiveMounting_Finishings)
                    .HasForeignKey(d => d.Idform)
                    .HasConstraintName("FK_StockReceiveMounting_Finishing_StockReceiveMounting");
            });

            modelBuilder.Entity<StockReceiveMounting_PricingBiaya>(entity =>
            {
                entity.ToTable("StockReceiveMounting_PricingBiaya");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifMounting).HasColumnType("datetime");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.EfektifSetting).HasColumnType("datetime");

                entity.Property(e => e.Finishing).HasColumnType("money");

                entity.Property(e => e.Mounting).HasColumnType("money");

                entity.Property(e => e.MountingNo)
                    .HasColumnType("money")
                    .HasColumnName("MountingNO");

                entity.Property(e => e.MountingRo)
                    .HasColumnType("money")
                    .HasColumnName("MountingRO");

                entity.Property(e => e.NamaBrand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaCons)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Setting).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.Property(e => e.TotalRupiah).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveMounting)
                    .WithOne(p => p.StockReceiveMounting_PricingBiaya)
                    .HasForeignKey<StockReceiveMounting_PricingBiaya>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveMounting_PricingBiaya_StockReceiveMounting");
            });

            modelBuilder.Entity<StockReceiveMounting_PricingMU>(entity =>
            {
                entity.ToTable("StockReceiveMounting_PricingMU");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifRate).HasColumnType("datetime");

                entity.Property(e => e.HargaRupiah).HasColumnType("money");

                entity.Property(e => e.HargaRupiahRound).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.ModalRate).HasColumnType("money");

                entity.Property(e => e.ModalRupiah).HasColumnType("money");

                entity.Property(e => e.ModalUsd)
                    .HasColumnType("money")
                    .HasColumnName("ModalUSD");

                entity.Property(e => e.Mu)
                    .HasColumnType("money")
                    .HasColumnName("MU");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockReceiveMounting)
                    .WithOne(p => p.StockReceiveMounting_PricingMU)
                    .HasForeignKey<StockReceiveMounting_PricingMU>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveMounting_PricingMU_StockReceiveMounting");
            });

            modelBuilder.Entity<StockReceiveMounting_PricingProduct>(entity =>
            {
                entity.ToTable("StockReceiveMounting_PricingProduct");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.Kadar).HasColumnType("money");

                entity.Property(e => e.Netto).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalProduct).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveMounting)
                    .WithOne(p => p.StockReceiveMounting_PricingProduct)
                    .HasForeignKey<StockReceiveMounting_PricingProduct>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveMounting_PricingProduct_StockReceiveMounting");
            });

            modelBuilder.Entity<StockReceiveMounting_PricingSegmen>(entity =>
            {
                entity.ToTable("StockReceiveMounting_PricingSegmen");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EfektifSegmen).HasColumnType("datetime");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.NamaCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaDist)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamaLevel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmenMinimum).HasColumnType("money");

                entity.Property(e => e.TotalCarat).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveMounting)
                    .WithOne(p => p.StockReceiveMounting_PricingSegmen)
                    .HasForeignKey<StockReceiveMounting_PricingSegmen>(d => d.Id)
                    .HasConstraintName("FK_StockReceiveMounting_PricingSegmen_StockReceiveMounting");

                entity.HasOne(d => d.CharProductSegmen)
                    .WithMany(p => p.StockReceiveMounting_PricingSegmens)
                    .HasForeignKey(d => d.ProductSegmen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveMounting_PricingSegmen_CharProductSegmen");
            });

            modelBuilder.Entity<StockReceivePackaging>(entity =>
            {
                entity.ToTable("StockReceivePackaging");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NoDo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoDO");

                entity.Property(e => e.NoPo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoPO");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglInput).HasColumnType("datetime");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockReceivePackagings)
                    .HasForeignKey(d => d.Idwarehouse)
                    .HasConstraintName("FK_StockReceivePackaging_LocWarehouse");
            });

            modelBuilder.Entity<StockReceivePackaging_Product>(entity =>
            {
                entity.ToTable("StockReceivePackaging_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Damaged).HasColumnType("money");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.NeverArrived).HasColumnType("money");

                entity.Property(e => e.Ongkos).HasColumnType("money");

                entity.Property(e => e.OngkosPacking).HasColumnType("money");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.Property(e => e.Received).HasColumnType("money");

                entity.HasOne(d => d.StockReceivePackaging)
                    .WithMany(p => p.StockReceivePackaging_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceivePackaging_Product_StockReceivePackaging");

                entity.HasOne(d => d.Packaging)
                    .WithMany(p => p.StockReceivePackagingProducts)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceivePackaging_Product_Packaging");
            });

            modelBuilder.Entity<StockReceivePG>(entity =>
            {
                entity.ToTable("StockReceivePG");

                entity.HasIndex(e => e.Nomor, "idx_stockreceivepg_plu");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.CatatanManager).IsUnicode(false);

                entity.Property(e => e.DimensiR).HasColumnType("money");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.EfektifGold).HasColumnType("datetime");

                entity.Property(e => e.EfektifTotalRate).HasColumnType("datetime");

                entity.Property(e => e.GoldRate).HasColumnType("money");

                entity.Property(e => e.GrossWeight).HasColumnType("money");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("HargaUSD");

                entity.Property(e => e.HumanStockNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idsupplier).HasColumnName("IDSupplier");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.KadarLogam).HasColumnType("money");

                entity.Property(e => e.KadarTukaranBeli).HasColumnType("money");

                entity.Property(e => e.KadarTukaranJual).HasColumnType("money");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KodeBarang)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MountingM).HasColumnType("money");

                entity.Property(e => e.MountingMusd)
                    .HasColumnType("money")
                    .HasColumnName("MountingMUSD");

                entity.Property(e => e.MountingR).HasColumnType("money");

                entity.Property(e => e.MountingRusd)
                    .HasColumnType("money")
                    .HasColumnName("MountingRUSD");

                entity.Property(e => e.NamaBarang)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.NoKirimCz)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoKirimCZ");

                entity.Property(e => e.NoTtb)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoTTB");

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomorSertifikat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.StoneQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.StoneWeight)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierSj)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SupplierSJ");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglTjt)
                    .HasColumnType("date")
                    .HasColumnName("TglTJT");

                entity.Property(e => e.TotalHarga).HasColumnType("money");

                entity.Property(e => e.TotalHarga24).HasColumnType("money");

                entity.Property(e => e.TotalHargaJual).HasColumnType("money");

                entity.Property(e => e.TotalHargaJualUsd)
                    .HasColumnType("money")
                    .HasColumnName("TotalHargaJualUSD");

                entity.Property(e => e.TotalHargaUsd)
                    .HasColumnType("money")
                    .HasColumnName("TotalHargaUSD");

                entity.Property(e => e.TotalRate).HasColumnType("money");

                entity.HasOne(d => d.CharFrameColor)
                    .WithMany(p => p.StockReceivePGs)
                    .HasForeignKey(d => d.FrameColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceivePG_CharFrameColor");

                entity.HasOne(d => d.DataSupplier)
                    .WithMany(p => p.StockReceivePGs)
                    .HasForeignKey(d => d.Idsupplier)
                    .HasConstraintName("FK_StockReceivePG_DataSupplier");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockReceivePgs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceivePG_LocWarehouse");

                entity.HasOne(d => d.CharGoldModel)
                    .WithMany(p => p.StockReceivePGs)
                    .HasForeignKey(d => d.Model)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceivePG_CharGoldModel");

                entity.HasOne(d => d.CharProductItem)
                    .WithMany(p => p.StockReceivePGs)
                    .HasForeignKey(d => d.ProductItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceivePG_CharProductItem");

                entity.HasOne(d => d.CharGoldLevel)
                    .WithMany(p => p.StockReceivePGs)
                    .HasForeignKey(d => d.ProductLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceivePG_CharGoldLevel");

                entity.HasOne(d => d.CharTargetAge)
                    .WithMany(p => p.StockReceivePGs)
                    .HasForeignKey(d => d.TargetAge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceivePG_CharTargetAge");
            });

            modelBuilder.Entity<StockReceivePGLegacy>(entity =>
            {
                entity.ToTable("StockReceivePGLegacy");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.M).HasColumnType("money");

                entity.Property(e => e.Plu)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PLU");

                entity.HasOne(d => d.StockProductPG)
                    .WithOne(p => p.StockReceivePGLegacy)
                    .HasForeignKey<StockReceivePGLegacy>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceivePGLegacy_StockProductPG");
            });

            modelBuilder.Entity<StockReceiveSouvenir>(entity =>
            {
                entity.ToTable("StockReceiveSouvenir");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NoDo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoDO");

                entity.Property(e => e.NoPo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoPO");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Tgl).HasColumnType("date");

                entity.Property(e => e.TglInput).HasColumnType("datetime");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockReceiveSouvenirs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .HasConstraintName("FK_StockReceiveSouvenir_LocWarehouse");
            });

            modelBuilder.Entity<StockReceiveSouvenir_Product>(entity =>
            {
                entity.ToTable("StockReceiveSouvenir_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Damaged).HasColumnType("money");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.NeverArrived).HasColumnType("money");

                entity.Property(e => e.Ongkos).HasColumnType("money");

                entity.Property(e => e.OngkosPacking).HasColumnType("money");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.Property(e => e.Received).HasColumnType("money");

                entity.HasOne(d => d.StockReceiveSouvenir)
                    .WithMany(p => p.StockReceiveSouvenir_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveSouvenir_Product_StockReceiveSouvenir");

                entity.HasOne(d => d.Souvenir)
                    .WithMany(p => p.StockReceiveSouvenirProducts)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReceiveSouvenir_Product_Souvenir");
            });

            modelBuilder.Entity<StockRetireDJ>(entity =>
            {
                entity.ToTable("StockRetireDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Alasan).IsUnicode(false);

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.BeratAkhir).HasColumnType("money");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.KadarTukaran).HasColumnType("money");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NettoSetelahBongkar).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.SusutBongkar).HasColumnType("money");

                entity.Property(e => e.SusutLebur).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockProductDJ)
                    .WithMany(p => p.StockRetireDJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_StockProductDJ");
            });

            modelBuilder.Entity<StockRetireDJ_Stone1A>(entity =>
            {
                entity.ToTable("StockRetireDJ_Stone1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.CaratRusak).HasColumnType("money");

                entity.Property(e => e.CaratSelisih).HasColumnType("money");

                entity.Property(e => e.CaratTerima).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockRetireDJ)
                    .WithMany(p => p.StockRetireDJ_Stone1As)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_Stone1A_StockRetireDJ");

                entity.HasOne(d => d.StockProductDJ_Stone1A)
                    .WithMany(p => p.StockRetireDJ_Stone1As)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_Stone1A_StockProductDJ");
            });

            modelBuilder.Entity<StockRetireDJ_Stone1B>(entity =>
            {
                entity.ToTable("StockRetireDJ_Stone1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.CaratRusak).HasColumnType("money");

                entity.Property(e => e.CaratSelisih).HasColumnType("money");

                entity.Property(e => e.CaratTerima).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockRetireDJ)
                    .WithMany(p => p.StockRetireDJ_Stone1Bs)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_Stone1B_StockRetireDJ");

                entity.HasOne(d => d.StockProductDJ_Stone1B)
                    .WithMany(p => p.StockRetireDJ_Stone1Bs)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_Stone1B_StockProductDJ");
            });

            modelBuilder.Entity<StockRetireDJ_Stone2>(entity =>
            {
                entity.ToTable("StockRetireDJ_Stone2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.CaratRusak).HasColumnType("money");

                entity.Property(e => e.CaratSelisih).HasColumnType("money");

                entity.Property(e => e.CaratTerima).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockRetireDJ)
                    .WithMany(p => p.StockRetireDJ_Stone2s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_Stone2_StockRetireDJ");

                entity.HasOne(d => d.StockProductDJ_Stone2)
                    .WithMany(p => p.StockRetireDJ_Stone2s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_Stone2_StockProductDJ");
            });

            modelBuilder.Entity<StockRetireDJ_Stone3>(entity =>
            {
                entity.ToTable("StockRetireDJ_Stone3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.CaratRusak).HasColumnType("money");

                entity.Property(e => e.CaratSelisih).HasColumnType("money");

                entity.Property(e => e.CaratTerima).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockRetireDJ)
                    .WithMany(p => p.StockRetireDJ_Stone3s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_Stone3_StockRetireDJ");

                entity.HasOne(d => d.StockProductDJ_Stone3)
                    .WithMany(p => p.StockRetireDJ_Stone3s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_Stone3_StockProductDJ");
            });

            modelBuilder.Entity<StockRetireDJ_Stone4>(entity =>
            {
                entity.ToTable("StockRetireDJ_Stone4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.CaratRusak).HasColumnType("money");

                entity.Property(e => e.CaratSelisih).HasColumnType("money");

                entity.Property(e => e.CaratTerima).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockProductDJ_Stone4)
                    .WithMany(p => p.StockRetireDJ_Stone4s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_Stone4_StockRetireDJ");

                entity.HasOne(d => d.StockProductDJ_Stone4)
                    .WithMany(p => p.StockRetireDJ_Stone4s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_Stone4_StockProductDJ");
            });

            modelBuilder.Entity<StockRetireDJ_Stone5>(entity =>
            {
                entity.ToTable("StockRetireDJ_Stone5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratButir).HasColumnType("money");

                entity.Property(e => e.CaratRusak).HasColumnType("money");

                entity.Property(e => e.CaratSelisih).HasColumnType("money");

                entity.Property(e => e.CaratTerima).HasColumnType("money");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idstone).HasColumnName("IDStone");

                entity.Property(e => e.Keterangan)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockRetireDJ)
                    .WithMany(p => p.StockRetireDJ_Stone5s)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_Stone5_StockRetireDJ");

                entity.HasOne(d => d.StockProductDJ_Stone5)
                    .WithMany(p => p.StockRetireDJ_Stone5s)
                    .HasForeignKey(d => d.Idstone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireDJ_Stone5_StockProductDJ");
            });

            modelBuilder.Entity<StockRetireGJ>(entity =>
            {
                entity.ToTable("StockRetireGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Alasan).IsUnicode(false);

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.BeratAkhir).HasColumnType("money");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NettoSetelahBongkar).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.SusutBongkar).HasColumnType("money");

                entity.Property(e => e.SusutLebur).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockProductGJ)
                    .WithMany(p => p.StockRetireGJs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetireGJ_StockProductGJ");
            });

            modelBuilder.Entity<StockRetirePG>(entity =>
            {
                entity.ToTable("StockRetirePG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Alasan).IsUnicode(false);

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.BeratAkhir).HasColumnType("money");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Nama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NettoSetelahBongkar).HasColumnType("money");

                entity.Property(e => e.NettoWeight).HasColumnType("money");

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.SusutBongkar).HasColumnType("money");

                entity.Property(e => e.SusutLebur).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.StockProductPG)
                    .WithMany(p => p.StockRetirePGs)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRetirePG_StockProductDJ");
            });

            modelBuilder.Entity<StockReturnDJ>(entity =>
            {
                entity.ToTable("StockReturnDJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoDokumen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockReturnDJs)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_StockReturnDJ_CompanyBrand");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockReturnDJs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReturnDJ_LocWarehouse");
            });

            modelBuilder.Entity<StockReturnDJ_Product>(entity =>
            {
                entity.ToTable("StockReturnDJ_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockReturnDJ)
                    .WithMany(p => p.StockReturnDJ_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReturnDJ_Product_StockReturnDJ");
            });

            modelBuilder.Entity<StockReturnGJ>(entity =>
            {
                entity.ToTable("StockReturnGJ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoDokumen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockReturnGJs)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_StockReturnGJ_CompanyBrand");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockReturnGJs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReturnGJ_LocWarehouse");
            });

            modelBuilder.Entity<StockReturnGJ_Product>(entity =>
            {
                entity.ToTable("StockReturnGJ_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockReturnGJ)
                    .WithMany(p => p.StockReturnGJ_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReturnGJ_Product_StockReturnGJ");

                entity.HasOne(d => d.StockProductGJ)
                    .WithMany(p => p.StockReturnGJ_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReturnGJ_Product_StockProductDJ");
            });

            modelBuilder.Entity<StockReturnLD>(entity =>
            {
                entity.ToTable("StockReturnLD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoDokumen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockReturnLDs)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_StockReturnLD_CompanyBrand");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockReturnLDs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReturnLD_LocWarehouse");
            });

            modelBuilder.Entity<StockReturnLD_Product>(entity =>
            {
                entity.ToTable("StockReturnLD_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockReturnLD)
                    .WithMany(p => p.StockReturnLD_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReturnLD_Product_StockReturnLD");

                entity.HasOne(d => d.StockProductLD_Stone1B)
                    .WithMany(p => p.StockReturnLD_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReturnLD_Product_StockProductLD_Stone1B");
            });

            modelBuilder.Entity<StockReturnPG>(entity =>
            {
                entity.ToTable("StockReturnPG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idbrand).HasColumnName("IDBrand");

                entity.Property(e => e.Idwarehouse).HasColumnName("IDWarehouse");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NamaKurir)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoDokumen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.SupplierNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.HasOne(d => d.CompanyBrand)
                    .WithMany(p => p.StockReturnPGs)
                    .HasForeignKey(d => d.Idbrand)
                    .HasConstraintName("FK_StockReturnPG_CompanyBrand");

                entity.HasOne(d => d.LocWarehouse)
                    .WithMany(p => p.StockReturnPGs)
                    .HasForeignKey(d => d.Idwarehouse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReturnPG_LocWarehouse");
            });

            modelBuilder.Entity<StockReturnPG_Product>(entity =>
            {
                entity.ToTable("StockReturnPG_Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idform).HasColumnName("IDForm");

                entity.Property(e => e.Idproduct).HasColumnName("IDProduct");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockReturnPG)
                    .WithMany(p => p.StockReturnPG_Products)
                    .HasForeignKey(d => d.Idform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReturnPG_Product_StockReturnPG");

                entity.HasOne(d => d.StockProductPG)
                    .WithMany(p => p.StockReturnPG_Products)
                    .HasForeignKey(d => d.Idproduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockReturnPG_Product_StockProductPG");
            });

            modelBuilder.Entity<StockHadiah>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("stockhadiah");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierNomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stone1A>(entity =>
            {
                entity.ToTable("Stone1A");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeParcel)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");
            });

            modelBuilder.Entity<Stone1B>(entity =>
            {
                entity.ToTable("Stone1B");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeParcel)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");
            });

            modelBuilder.Entity<Stone2>(entity =>
            {
                entity.ToTable("Stone2");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeParcel)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");
            });

            modelBuilder.Entity<Stone3>(entity =>
            {
                entity.ToTable("Stone3");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeParcel)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");
            });

            modelBuilder.Entity<Stone4>(entity =>
            {
                entity.ToTable("Stone4");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeParcel)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");
            });

            modelBuilder.Entity<Stone5>(entity =>
            {
                entity.ToTable("Stone5");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeParcel)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");
            });

            modelBuilder.Entity<StoneCosting1A>(entity =>
            {
                entity.ToTable("StoneCosting1A");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StoneCosting1B>(entity =>
            {
                entity.ToTable("StoneCosting1B");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.InputH).HasColumnType("money");

                entity.Property(e => e.InputP).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.PendingH).HasColumnType("money");

                entity.Property(e => e.PendingP).HasColumnType("money");
            });

            modelBuilder.Entity<StoneCosting2>(entity =>
            {
                entity.ToTable("StoneCosting2");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StoneCosting3>(entity =>
            {
                entity.ToTable("StoneCosting3");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StoneCosting4>(entity =>
            {
                entity.ToTable("StoneCosting4");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StoneCosting5>(entity =>
            {
                entity.ToTable("StoneCosting5");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StoneCostingLog1A>(entity =>
            {
                entity.ToTable("StoneCostingLog1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StoneCostingLog1B>(entity =>
            {
                entity.ToTable("StoneCostingLog1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StoneCostingLog2>(entity =>
            {
                entity.ToTable("StoneCostingLog2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StoneCostingLog3>(entity =>
            {
                entity.ToTable("StoneCostingLog3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StoneCostingLog4>(entity =>
            {
                entity.ToTable("StoneCostingLog4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StoneCostingLog5>(entity =>
            {
                entity.ToTable("StoneCostingLog5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StonePricing1A>(entity =>
            {
                entity.ToTable("StonePricing1A");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Modal).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Selisih).HasColumnType("money");

                entity.Property(e => e.SelisihPersen).HasColumnType("money");
            });

            modelBuilder.Entity<StonePricing1B>(entity =>
            {
                entity.ToTable("StonePricing1B");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.InputH).HasColumnType("money");

                entity.Property(e => e.InputP).HasColumnType("money");

                entity.Property(e => e.MarkUp).HasColumnType("money");

                entity.Property(e => e.MarkUpPending).HasColumnType("money");

                entity.Property(e => e.Modal).HasColumnType("money");

                entity.Property(e => e.ModalH).HasColumnType("money");

                entity.Property(e => e.ModalP).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.PendingH).HasColumnType("money");

                entity.Property(e => e.PendingP).HasColumnType("money");

                entity.Property(e => e.Selisih).HasColumnType("money");

                entity.Property(e => e.SelisihPersen).HasColumnType("money");
            });

            modelBuilder.Entity<StonePricing2>(entity =>
            {
                entity.ToTable("StonePricing2");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Modal).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Selisih).HasColumnType("money");

                entity.Property(e => e.SelisihPersen).HasColumnType("money");
            });

            modelBuilder.Entity<StonePricing3>(entity =>
            {
                entity.ToTable("StonePricing3");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Modal).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Selisih).HasColumnType("money");

                entity.Property(e => e.SelisihPersen).HasColumnType("money");
            });

            modelBuilder.Entity<StonePricing4>(entity =>
            {
                entity.ToTable("StonePricing4");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Modal).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Selisih).HasColumnType("money");

                entity.Property(e => e.SelisihPersen).HasColumnType("money");
            });

            modelBuilder.Entity<StonePricing5>(entity =>
            {
                entity.ToTable("StonePricing5");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Modal).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Selisih).HasColumnType("money");

                entity.Property(e => e.SelisihPersen).HasColumnType("money");
            });

            modelBuilder.Entity<StonePricingLog1A>(entity =>
            {
                entity.ToTable("StonePricingLog1A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StonePricingLog1B>(entity =>
            {
                entity.ToTable("StonePricingLog1B");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.MarkUpBaru).HasColumnType("money");

                entity.Property(e => e.MarkUpLama).HasColumnType("money");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StonePricingLog2>(entity =>
            {
                entity.ToTable("StonePricingLog2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StonePricingLog3>(entity =>
            {
                entity.ToTable("StonePricingLog3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StonePricingLog4>(entity =>
            {
                entity.ToTable("StonePricingLog4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StonePricingLog5>(entity =>
            {
                entity.ToTable("StonePricingLog5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StonePricingLogRepair>(entity =>
            {
                entity.ToTable("StonePricingLogRepair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HargaBaru).HasColumnType("money");

                entity.Property(e => e.HargaLama).HasColumnType("money");

                entity.Property(e => e.Idmaster).HasColumnName("IDMaster");

                entity.Property(e => e.Tgl).HasColumnType("datetime");
            });

            modelBuilder.Entity<StonePricingRepair>(entity =>
            {
                entity.ToTable("StonePricingRepair");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Approval)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalTgl).HasColumnType("datetime");

                entity.Property(e => e.Harga).HasColumnType("money");

                entity.Property(e => e.HargaPending).HasColumnType("money");

                entity.Property(e => e.Mutasi).HasColumnType("money");

                entity.Property(e => e.MutasiPersen).HasColumnType("money");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.Selisih).HasColumnType("money");

                entity.Property(e => e.SelisihPersen).HasColumnType("money");
            });

            modelBuilder.Entity<StoneRepair>(entity =>
            {
                entity.ToTable("StoneRepair");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.ImgPicture).IsUnicode(false);

                entity.Property(e => e.Keterangan)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KodeParcel)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("date");
            });

            modelBuilder.Entity<Substorage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Substorage");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Nama)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempResult>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_result");

                entity.Property(e => e.M1).HasColumnName("m_1");

                entity.Property(e => e.M2).HasColumnName("m_2");

                entity.Property(e => e.M3).HasColumnName("m_3");

                entity.Property(e => e.M4).HasColumnName("m_4");

                entity.Property(e => e.M5).HasColumnName("m_5");

                entity.Property(e => e.Nama)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nama");

                entity.Property(e => e.Tgl)
                    .HasColumnType("date")
                    .HasColumnName("tgl");

                entity.Property(e => e.TotalSum)
                    .HasColumnType("money")
                    .HasColumnName("total_sum");
            });

            modelBuilder.Entity<TradeIn>(entity =>
            {
                entity.ToTable("TradeIn");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CustomerNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DraftDate).HasColumnType("datetime");

                entity.Property(e => e.Idcustomer).HasColumnName("IDCustomer");

                entity.Property(e => e.Idlokasi).HasColumnName("IDLokasi");

                entity.Property(e => e.Idresell).HasColumnName("IDResell");

                entity.Property(e => e.Idsales).HasColumnName("IDSales");

                //entity.Property(e => e.Idsales2).HasColumnName("IDSales2");

                entity.Property(e => e.IdsalesOrder).HasColumnName("IDSalesOrder");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KodeCustomerLama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nomor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorNama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorTgl).HasColumnType("datetime");

                entity.Property(e => e.SalesNama)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SalesNama2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tgl).HasColumnType("datetime");

                entity.Property(e => e.TotalHarga).HasColumnType("money");

                entity.HasOne(d => d.DataCustomer)
                    .WithMany(p => p.TradeIns)
                    .HasForeignKey(d => d.Idcustomer)
                    .HasConstraintName("FK_TradeIn_DataCustomer");

                entity.HasOne(d => d.Resell)
                    .WithMany(p => p.TradeIns)
                    .HasForeignKey(d => d.Idresell)
                    .HasConstraintName("FK_TradeIn_Resell");

                entity.HasOne(d => d.DataSales)
                    .WithMany(p => p.TradeIns)
                    .HasForeignKey(d => d.Idsales)
                    .HasConstraintName("FK_TradeIn_DataSales");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.TradeIns)
                    .HasForeignKey(d => d.IdsalesOrder)
                    .HasConstraintName("FK_TradeIn_SalesOrder");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
